{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\nclass XhrClient {\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  async sendGetRequestAsync(url, options) {\n    return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\n  }\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  async sendPostRequestAsync(url, options) {\n    return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\n  }\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n  sendRequestAsync(url, method, options) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(method, url, /* async: */true);\n      this.setXhrHeaders(xhr, options);\n      xhr.onload = () => {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n          }\n        }\n        try {\n          const jsonResponse = JSON.parse(xhr.responseText);\n          const networkResponse = {\n            headers: this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n      xhr.onerror = () => {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  }\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n  setXhrHeaders(xhr, options) {\n    if (options && options.headers) {\n      const headers = options.headers;\n      Object.keys(headers).forEach(key => {\n        xhr.setRequestHeader(key, headers[key]);\n      });\n    }\n  }\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n  getHeaderDict(xhr) {\n    const headerString = xhr.getAllResponseHeaders();\n    const headerArr = headerString.trim().split(/[\\r\\n]+/);\n    const headerDict = {};\n    headerArr.forEach(value => {\n      const parts = value.split(\": \");\n      const headerName = parts.shift();\n      const headerVal = parts.join(\": \");\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  }\n}\nexport { XhrClient };","map":{"version":3,"names":["XhrClient","sendGetRequestAsync","url","options","sendRequestAsync","HTTP_REQUEST_TYPE","GET","sendPostRequestAsync","POST","method","Promise","resolve","reject","xhr","XMLHttpRequest","open","setXhrHeaders","onload","status","BrowserAuthError","createPostRequestFailedError","createGetRequestFailedError","jsonResponse","JSON","parse","responseText","networkResponse","headers","getHeaderDict","body","e","createFailedToParseNetworkResponseError","onerror","window","navigator","onLine","createNoNetworkConnectivityError","send","createHttpMethodNotImplementedError","Object","keys","forEach","key","setRequestHeader","headerString","getAllResponseHeaders","headerArr","trim","split","headerDict","value","parts","headerName","shift","headerVal","join"],"sources":["../../src/network/XhrClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}