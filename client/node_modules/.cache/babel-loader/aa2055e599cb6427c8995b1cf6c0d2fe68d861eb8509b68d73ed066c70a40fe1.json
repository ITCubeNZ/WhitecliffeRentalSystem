{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { MathUtils } from '../utils/MathUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass GuidGenerator {\n  constructor(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /*\r\n   * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n   * pseudo-random numbers.\r\n   * The algorithm is as follows:\r\n   *     Set the two most significant bits (bits 6 and 7) of the\r\n   *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n   *     Set the four most significant bits (bits 12 through 15) of the\r\n   *        time_hi_and_version field to the 4-bit version number from\r\n   *        Section 4.1.3. Version4\r\n   *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n   *     values.\r\n   * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n   * time-low               = 4hexOctet\r\n   * time-mid               = 2hexOctet\r\n   * time-high-and-version  = 2hexOctet\r\n   * clock-seq-and-reserved = hexOctet:\r\n   * clock-seq-low          = hexOctet\r\n   * node                   = 6hexOctet\r\n   * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n   * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n   * y values are 8, 9, A, B\r\n   */\n  generateGuid() {\n    try {\n      const buffer = new Uint8Array(16);\n      this.cryptoObj.getRandomValues(buffer);\n      // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n      return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1]) + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3]) + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5]) + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7]) + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9]) + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11]) + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13]) + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n    } catch (err) {\n      const guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      const hex = \"0123456789abcdef\";\n      let r = 0;\n      let guidResponse = Constants.EMPTY_STRING;\n      for (let i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n          r |= 0x8; // set pos 3 to 1 as 1???\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n      return guidResponse;\n    }\n  }\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n  isGuid(guid) {\n    const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  }\n}\nexport { GuidGenerator };","map":{"version":3,"names":["GuidGenerator","constructor","cryptoObj","generateGuid","buffer","Uint8Array","getRandomValues","MathUtils","decimalToHex","err","guidHolder","hex","r","guidResponse","Constants","EMPTY_STRING","i","Math","random","isGuid","guid","regexGuid","test"],"sources":["../../src/crypto/GuidGenerator.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}