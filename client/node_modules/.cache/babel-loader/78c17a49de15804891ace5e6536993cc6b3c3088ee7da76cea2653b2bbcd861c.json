{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { Separators, CacheAccountType, Constants } from '../../utils/Constants.mjs';\nimport { buildClientInfo } from '../../account/ClientInfo.mjs';\nimport { StringUtils } from '../../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { AuthorityType } from '../../authority/AuthorityType.mjs';\nimport { ProtocolMode } from '../../authority/ProtocolMode.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n * @internal\r\n */\nclass AccountEntity {\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  generateAccountId() {\n    const accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n  generateAccountKey() {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  }\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n  getAccountInfo() {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims,\n      nativeAccountId: this.nativeAccountId,\n      authorityType: this.authorityType\n    };\n  }\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n  static generateAccountCacheKey(accountInterface) {\n    const accountKey = [accountInterface.homeAccountId, accountInterface.environment || Constants.EMPTY_STRING, accountInterface.tenantId || Constants.EMPTY_STRING];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param accountDetails\r\n   */\n  static createAccount(accountDetails, authority) {\n    const account = new AccountEntity();\n    if (authority.authorityType === AuthorityType.Adfs) {\n      account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n    } else if (authority.protocolMode === ProtocolMode.AAD) {\n      account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    } else {\n      account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    }\n    account.clientInfo = accountDetails.clientInfo;\n    account.homeAccountId = accountDetails.homeAccountId;\n    account.nativeAccountId = accountDetails.nativeAccountId;\n    const env = accountDetails.environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = accountDetails.idTokenClaims.tid || Constants.EMPTY_STRING;\n    account.idTokenClaims = accountDetails.idTokenClaims;\n    // How do you account for MSA CID here?\n    account.localAccountId = accountDetails.idTokenClaims.oid || accountDetails.idTokenClaims.sub || Constants.EMPTY_STRING;\n    /*\r\n     * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n     * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n     * policy is configured to return more than 1 email.\r\n     */\n    const preferredUsername = accountDetails.idTokenClaims.preferred_username || accountDetails.idTokenClaims.upn;\n    const email = accountDetails.idTokenClaims.emails ? accountDetails.idTokenClaims.emails[0] : null;\n    account.username = preferredUsername || email || Constants.EMPTY_STRING;\n    account.name = accountDetails.idTokenClaims.name;\n    account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n    account.msGraphHost = accountDetails.msGraphHost;\n    return account;\n  }\n  /**\r\n   * Creates an AccountEntity object from AccountInfo\r\n   * @param accountInfo\r\n   * @param cloudGraphHostName\r\n   * @param msGraphHost\r\n   * @returns\r\n   */\n  static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n    const account = new AccountEntity();\n    account.authorityType = accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = accountInfo.homeAccountId;\n    account.localAccountId = accountInfo.localAccountId;\n    account.nativeAccountId = accountInfo.nativeAccountId;\n    account.realm = accountInfo.tenantId;\n    account.environment = accountInfo.environment;\n    account.username = accountInfo.username;\n    account.name = accountInfo.name;\n    account.idTokenClaims = accountInfo.idTokenClaims;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  }\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n  static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n    const accountId = idTokenClaims?.sub ? idTokenClaims.sub : Constants.EMPTY_STRING;\n    // since ADFS does not have tid and does not set client_info\n    if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n      return accountId;\n    }\n    // for cases where there is clientInfo\n    if (serverClientInfo) {\n      try {\n        const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n        }\n      } catch (e) {}\n    }\n    // default to \"sub\" claim\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  }\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  static isAccountEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  }\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n  static accountInfoIsEqual(accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      const accountAClaims = accountA.idTokenClaims || {};\n      const accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  }\n}\nexport { AccountEntity };","map":{"version":3,"names":["AccountEntity","generateAccountId","accountId","homeAccountId","environment","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","getAccountInfo","name","idTokenClaims","nativeAccountId","authorityType","accountInterface","accountKey","Constants","EMPTY_STRING","createAccount","accountDetails","authority","account","AuthorityType","Adfs","CacheAccountType","ADFS_ACCOUNT_TYPE","protocolMode","ProtocolMode","AAD","MSSTS_ACCOUNT_TYPE","GENERIC_ACCOUNT_TYPE","clientInfo","env","getPreferredCache","ClientAuthError","createInvalidCacheEnvironmentError","tid","oid","sub","preferredUsername","preferred_username","upn","email","emails","cloudGraphHostName","msGraphHost","createFromAccountInfo","accountInfo","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","buildClientInfo","StringUtils","isEmpty","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["../../../src/cache/entities/AccountEntity.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA;;;AAGG;AAcH;;;;;;;;;;;;;;;;;;;;;;AAsBG;MACUA,aAAa;EAgBtB;;AAEG;EACHC,iBAAiBA,CAAA;IACb,MAAMC,SAAS,GAAkB,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,WAAW,CAAC;IACvE,OAAOF,SAAS,CAACG,IAAI,CAACC,UAAU,CAACC,mBAAmB,CAAC,CAACC,WAAW,EAAE;;EAGvE;;AAEG;EACHC,kBAAkBA,CAAA;IACd,OAAOT,aAAa,CAACU,uBAAuB,CAAC;MACzCP,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BO,QAAQ,EAAE,IAAI,CAACC,KAAK;MACpBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA;IACxB,EAAC;;EAGN;;AAEG;EACHC,cAAcA,CAAA;IACV,OAAO;MACHZ,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BO,QAAQ,EAAE,IAAI,CAACC,KAAK;MACpBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCE,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCC,aAAa,EAAE,IAAI,CAACA;KACvB;;EAGL;;;AAGG;EACH,OAAOT,uBAAuBA,CAACU,gBAA6B;IACxD,MAAMC,UAAU,GAAG,CACfD,gBAAgB,CAACjB,aAAa,EAC9BiB,gBAAgB,CAAChB,WAAW,IAAIkB,SAAS,CAACC,YAAY,EACtDH,gBAAgB,CAACT,QAAQ,IAAIW,SAAS,CAACC,YAAY,CACtD;IAED,OAAOF,UAAU,CAAChB,IAAI,CAACC,UAAU,CAACC,mBAAmB,CAAC,CAACC,WAAW,EAAE;;EAGxE;;;AAGG;EACH,OAAOgB,aAAaA,CAChBC,cAQC,EACDC,SAAoB;IAEpB,MAAMC,OAAO,GAAkB,IAAI3B,aAAa,EAAE;IAElD,IAAI0B,SAAS,CAACP,aAAa,KAAKS,aAAa,CAACC,IAAI,EAAE;MAChDF,OAAO,CAACR,aAAa,GAAGW,gBAAgB,CAACC,iBAAiB;IAC7D,OAAM,IAAIL,SAAS,CAACM,YAAY,KAAKC,YAAY,CAACC,GAAG,EAAE;MACpDP,OAAO,CAACR,aAAa,GAAGW,gBAAgB,CAACK,kBAAkB;IAC9D,OAAM;MACHR,OAAO,CAACR,aAAa,GAAGW,gBAAgB,CAACM,oBAAoB;IAChE;IAEDT,OAAO,CAACU,UAAU,GAAGZ,cAAc,CAACY,UAAU;IAC9CV,OAAO,CAACxB,aAAa,GAAGsB,cAAc,CAACtB,aAAa;IACpDwB,OAAO,CAACT,eAAe,GAAGO,cAAc,CAACP,eAAe;IAExD,MAAMoB,GAAG,GACLb,cAAc,CAACrB,WAAW,IACzBsB,SAAS,IAAIA,SAAS,CAACa,iBAAiB,EAAG;IAEhD,IAAI,CAACD,GAAG,EAAE;MACN,MAAME,eAAe,CAACC,kCAAkC,EAAE;IAC7D;IAEDd,OAAO,CAACvB,WAAW,GAAGkC,GAAG;;IAEzBX,OAAO,CAACf,KAAK,GACTa,cAAc,CAACR,aAAa,CAACyB,GAAG,IAAIpB,SAAS,CAACC,YAAY;IAE9DI,OAAO,CAACV,aAAa,GAAGQ,cAAc,CAACR,aAAa;;IAGpDU,OAAO,CAACb,cAAc,GAClBW,cAAc,CAACR,aAAa,CAAC0B,GAAG,IAChClB,cAAc,CAACR,aAAa,CAAC2B,GAAG,IAChCtB,SAAS,CAACC,YAAY;IAE1B;;;;AAIG;IACH,MAAMsB,iBAAiB,GACnBpB,cAAc,CAACR,aAAa,CAAC6B,kBAAkB,IAC/CrB,cAAc,CAACR,aAAa,CAAC8B,GAAG;IACpC,MAAMC,KAAK,GAAGvB,cAAc,CAACR,aAAa,CAACgC,MAAM,GAC3CxB,cAAc,CAACR,aAAa,CAACgC,MAAM,CAAC,CAAC,CAAC,GACtC,IAAI;IAEVtB,OAAO,CAACd,QAAQ,GAAGgC,iBAAiB,IAAIG,KAAK,IAAI1B,SAAS,CAACC,YAAY;IACvEI,OAAO,CAACX,IAAI,GAAGS,cAAc,CAACR,aAAa,CAACD,IAAI;IAEhDW,OAAO,CAACuB,kBAAkB,GAAGzB,cAAc,CAACyB,kBAAkB;IAC9DvB,OAAO,CAACwB,WAAW,GAAG1B,cAAc,CAAC0B,WAAW;IAEhD,OAAOxB,OAAO;;EAGlB;;;;;;AAMG;EACH,OAAOyB,qBAAqBA,CACxBC,WAAwB,EACxBH,kBAA2B,EAC3BC,WAAoB;IAEpB,MAAMxB,OAAO,GAAkB,IAAI3B,aAAa,EAAE;IAElD2B,OAAO,CAACR,aAAa,GACjBkC,WAAW,CAAClC,aAAa,IAAIW,gBAAgB,CAACM,oBAAoB;IACtET,OAAO,CAACxB,aAAa,GAAGkD,WAAW,CAAClD,aAAa;IACjDwB,OAAO,CAACb,cAAc,GAAGuC,WAAW,CAACvC,cAAc;IACnDa,OAAO,CAACT,eAAe,GAAGmC,WAAW,CAACnC,eAAe;IAErDS,OAAO,CAACf,KAAK,GAAGyC,WAAW,CAAC1C,QAAQ;IACpCgB,OAAO,CAACvB,WAAW,GAAGiD,WAAW,CAACjD,WAAW;IAE7CuB,OAAO,CAACd,QAAQ,GAAGwC,WAAW,CAACxC,QAAQ;IACvCc,OAAO,CAACX,IAAI,GAAGqC,WAAW,CAACrC,IAAI;IAC/BW,OAAO,CAACV,aAAa,GAAGoC,WAAW,CAACpC,aAAa;IAEjDU,OAAO,CAACuB,kBAAkB,GAAGA,kBAAkB;IAC/CvB,OAAO,CAACwB,WAAW,GAAGA,WAAW;IAEjC,OAAOxB,OAAO;;EAGlB;;;;AAIG;EACH,OAAO2B,qBAAqBA,CACxBC,gBAAwB,EACxBC,QAAuB,EACvBC,MAAc,EACdC,SAAkB,EAClBzC,aAA2B;IAE3B,MAAMf,SAAS,GAAGe,aAAa,EAAE2B,GAAG,GAC9B3B,aAAa,CAAC2B,GAAG,GACjBtB,SAAS,CAACC,YAAY;;IAG5B,IACIiC,QAAQ,KAAK5B,aAAa,CAACC,IAAI,IAC/B2B,QAAQ,KAAK5B,aAAa,CAAC+B,IAAI,EACjC;MACE,OAAOzD,SAAS;IACnB;;IAGD,IAAIqD,gBAAgB,EAAE;MAClB,IAAI;QACA,MAAMlB,UAAU,GAAGuB,eAAe,CAACL,gBAAgB,EAAEG,SAAS,CAAC;QAC/D,IACI,CAACG,WAAW,CAACC,OAAO,CAACzB,UAAU,CAAC0B,GAAG,CAAC,IACpC,CAACF,WAAW,CAACC,OAAO,CAACzB,UAAU,CAAC2B,IAAI,CAAC,EACvC;UACE,OAAU,GAAA3B,UAAU,CAAC0B,GAAM,GAAAzD,UAAU,CAAC2D,qBAAwB,GAAA5B,UAAU,CAAC2B,IAAI,EAAE;QAClF;MACJ,EAAC,OAAOE,CAAC,EAAE;IACf;;IAGDT,MAAM,CAACU,OAAO,CAAC,4BAA4B,CAAC;IAC5C,OAAOjE,SAAS;;EAGpB;;;AAGG;EACH,OAAOkE,eAAeA,CAACC,MAAc;IACjC,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IACf;IAED,OACIA,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC,IACtCD,MAAM,CAACC,cAAc,CAAC,aAAa,CAAC,IACpCD,MAAM,CAACC,cAAc,CAAC,OAAO,CAAC,IAC9BD,MAAM,CAACC,cAAc,CAAC,gBAAgB,CAAC,IACvCD,MAAM,CAACC,cAAc,CAAC,UAAU,CAAC,IACjCD,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC;;EAI9C;;;;;AAKG;EACH,OAAOC,kBAAkBA,CACrBC,QAA4B,EAC5BC,QAA4B,EAC5BC,aAAuB;IAEvB,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;MACxB,OAAO,KAAK;IACf;IAED,IAAIE,WAAW,GAAG,IAAI,CAAC;IACvB,IAAID,aAAa,EAAE;MACf,MAAME,cAAc,GAAIJ,QAAQ,CAACvD,aAAa,IAC1C,EAAkB;MACtB,MAAM4D,cAAc,GAAIJ,QAAQ,CAACxD,aAAa,IAC1C,EAAkB;;MAGtB0D,WAAW,GACPC,cAAc,CAACE,GAAG,KAAKD,cAAc,CAACC,GAAG,IACzCF,cAAc,CAACG,KAAK,KAAKF,cAAc,CAACE,KAAK;IACpD;IAED,OACIP,QAAQ,CAACrE,aAAa,KAAKsE,QAAQ,CAACtE,aAAa,IACjDqE,QAAQ,CAAC1D,cAAc,KAAK2D,QAAQ,CAAC3D,cAAc,IACnD0D,QAAQ,CAAC3D,QAAQ,KAAK4D,QAAQ,CAAC5D,QAAQ,IACvC2D,QAAQ,CAAC7D,QAAQ,KAAK8D,QAAQ,CAAC9D,QAAQ,IACvC6D,QAAQ,CAACpE,WAAW,KAAKqE,QAAQ,CAACrE,WAAW,IAC7CoE,QAAQ,CAACtD,eAAe,KAAKuD,QAAQ,CAACvD,eAAe,IACrDyD,WAAW;;AAGtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}