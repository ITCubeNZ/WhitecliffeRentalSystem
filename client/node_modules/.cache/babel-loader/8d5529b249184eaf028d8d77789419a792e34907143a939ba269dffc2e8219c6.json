{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { CredentialEntity } from './CredentialEntity.mjs';\nimport { CredentialType } from '../../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * REFRESH_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\r\n *\r\n * Value:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n * }\r\n */\nclass RefreshTokenEntity extends CredentialEntity {\n  /**\r\n   * Create RefreshTokenEntity\r\n   * @param homeAccountId\r\n   * @param authenticationResult\r\n   * @param clientId\r\n   * @param authority\r\n   */\n  static createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {\n    const rtEntity = new RefreshTokenEntity();\n    rtEntity.clientId = clientId;\n    rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n    rtEntity.environment = environment;\n    rtEntity.homeAccountId = homeAccountId;\n    rtEntity.secret = refreshToken;\n    rtEntity.userAssertionHash = userAssertionHash;\n    if (familyId) rtEntity.familyId = familyId;\n    return rtEntity;\n  }\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  static isRefreshTokenEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n  }\n}\nexport { RefreshTokenEntity };","map":{"version":3,"names":["RefreshTokenEntity","CredentialEntity","createRefreshTokenEntity","homeAccountId","environment","refreshToken","clientId","familyId","userAssertionHash","rtEntity","credentialType","CredentialType","REFRESH_TOKEN","secret","isRefreshTokenEntity","entity","hasOwnProperty"],"sources":["../../../src/cache/entities/RefreshTokenEntity.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;;;AAGG;AAKH;;;;;;;;;;;;;;;;;;AAkBG;AACG,MAAOA,kBAAmB,SAAQC,gBAAgB;EAGpD;;;;;;AAMG;EACH,OAAOC,wBAAwBA,CAC3BC,aAAqB,EACrBC,WAAmB,EACnBC,YAAoB,EACpBC,QAAgB,EAChBC,QAAiB,EACjBC,iBAA0B;IAE1B,MAAMC,QAAQ,GAAG,IAAIT,kBAAkB,EAAE;IAEzCS,QAAQ,CAACH,QAAQ,GAAGA,QAAQ;IAC5BG,QAAQ,CAACC,cAAc,GAAGC,cAAc,CAACC,aAAa;IACtDH,QAAQ,CAACL,WAAW,GAAGA,WAAW;IAClCK,QAAQ,CAACN,aAAa,GAAGA,aAAa;IACtCM,QAAQ,CAACI,MAAM,GAAGR,YAAY;IAC9BI,QAAQ,CAACD,iBAAiB,GAAGA,iBAAiB;IAE9C,IAAID,QAAQ,EAAEE,QAAQ,CAACF,QAAQ,GAAGA,QAAQ;IAE1C,OAAOE,QAAQ;;EAGnB;;;AAGG;EACH,OAAOK,oBAAoBA,CAACC,MAAc;IACtC,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IACf;IAED,OACIA,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC,IACtCD,MAAM,CAACC,cAAc,CAAC,aAAa,CAAC,IACpCD,MAAM,CAACC,cAAc,CAAC,gBAAgB,CAAC,IACvCD,MAAM,CAACC,cAAc,CAAC,UAAU,CAAC,IACjCD,MAAM,CAACC,cAAc,CAAC,QAAQ,CAAC,IAC/BD,MAAM,CAAC,gBAAgB,CAAC,KAAKJ,cAAc,CAACC,aAAa;;AAGpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}