{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { PerformanceEvents, Constants, UrlString, AuthorizationCodeClient, Authority, AuthorityFactory, ProtocolUtils, StringUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\nclass StandardInteractionClient extends BaseInteractionClient {\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n  async initializeAuthorizationCodeRequest(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n    this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n    const generatedPkceParams = await this.browserCrypto.generatePkceCodes();\n    const authCodeRequest = {\n      ...request,\n      redirectUri: request.redirectUri,\n      code: Constants.EMPTY_STRING,\n      codeVerifier: generatedPkceParams.verifier\n    };\n    request.codeChallenge = generatedPkceParams.challenge;\n    request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n    return authCodeRequest;\n  }\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n  initializeLogoutRequest(logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n    const validLogoutRequest = {\n      correlationId: this.correlationId || this.browserCrypto.createNewGuid(),\n      ...logoutRequest\n    };\n    /**\r\n     * Set logout_hint to be login_hint from ID Token Claims if present\r\n     * and logoutHint attribute wasn't manually set in logout request\r\n     */\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n    return validLogoutRequest;\n  }\n  /**\r\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n   * logout_hint in end session request.\r\n   * @param account\r\n   */\n  getLogoutHintFromIdTokenClaims(account) {\n    const idTokenClaims = account.idTokenClaims;\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n    return null;\n  }\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  async createAuthCodeClient(serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n    // Create auth module.\n    this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n    const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n    return new AuthorizationCodeClient(clientConfig, this.performanceClient);\n  }\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  async getClientConfiguration(serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n    this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\n    this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n    const discoveredAuthority = await this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions);\n    const logger = this.config.system.loggerOptions;\n    return {\n      authOptions: {\n        clientId: this.config.auth.clientId,\n        authority: discoveredAuthority,\n        clientCapabilities: this.config.auth.clientCapabilities\n      },\n      systemOptions: {\n        tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n        preventCorsPreflight: true\n      },\n      loggerOptions: {\n        loggerCallback: logger.loggerCallback,\n        piiLoggingEnabled: logger.piiLoggingEnabled,\n        logLevel: logger.logLevel,\n        correlationId: this.correlationId\n      },\n      cacheOptions: {\n        claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n      },\n      cryptoInterface: this.browserCrypto,\n      networkInterface: this.networkClient,\n      storageInterface: this.browserStorage,\n      serverTelemetryManager: serverTelemetryManager,\n      libraryInfo: {\n        sku: BrowserConstants.MSAL_SKU,\n        version: version,\n        cpu: Constants.EMPTY_STRING,\n        os: Constants.EMPTY_STRING\n      },\n      telemetry: this.config.telemetry\n    };\n  }\n  /**\r\n   * @param hash\r\n   * @param interactionType\r\n   */\n  validateAndExtractStateFromHash(serverParams, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n    if (!serverParams.state) {\n      throw BrowserAuthError.createHashDoesNotContainStateError();\n    }\n    const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n    if (!platformStateObj) {\n      throw BrowserAuthError.createUnableToParseStateError();\n    }\n    if (platformStateObj.interactionType !== interactionType) {\n      throw BrowserAuthError.createStateInteractionTypeMismatchError();\n    }\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  }\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  async getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n    this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\n    const getAuthorityMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      OIDCOptions: this.config.auth.OIDCOptions,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata,\n      skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n    };\n    // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n    const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n    // fall back to the authority from config\n    const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n    this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\n    this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\n    return await AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId).then(result => {\n      getAuthorityMeasurement.end({\n        success: true\n      });\n      return result;\n    }).catch(error => {\n      getAuthorityMeasurement.end({\n        errorCode: error.errorCode,\n        subErrorCode: error.subError,\n        success: false\n      });\n      throw error;\n    });\n  }\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n  async initializeAuthorizationRequest(request, interactionType) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n    this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\n    const redirectUri = this.getRedirectUri(request.redirectUri);\n    const browserState = {\n      interactionType: interactionType\n    };\n    const state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n    this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n    const validatedRequest = {\n      ...(await this.initializeBaseRequest(request)),\n      redirectUri: redirectUri,\n      state: state,\n      nonce: request.nonce || this.browserCrypto.createNewGuid(),\n      responseMode: this.config.auth.OIDCOptions.serverResponseType\n    };\n    const account = request.account || this.browserStorage.getActiveAccount();\n    if (account) {\n      this.logger.verbose(\"Setting validated request account\", this.correlationId);\n      this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\n      validatedRequest.account = account;\n    }\n    // Check for ADAL/MSAL v1 SSO\n    if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n      const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n      if (legacyLoginHint) {\n        validatedRequest.loginHint = legacyLoginHint;\n      }\n    }\n    return validatedRequest;\n  }\n}\nexport { StandardInteractionClient };","map":{"version":3,"names":["StandardInteractionClient","BaseInteractionClient","initializeAuthorizationCodeRequest","request","performanceClient","addQueueMeasurement","PerformanceEvents","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","logger","verbose","generatedPkceParams","browserCrypto","generatePkceCodes","authCodeRequest","redirectUri","code","Constants","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","initializeLogoutRequest","logoutRequest","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","UrlString","getAbsoluteUrl","BrowserUtils","getCurrentUri","config","auth","idTokenClaims","login_hint","createAuthCodeClient","serverTelemetryManager","authorityUrl","requestAzureCloudOptions","StandardInteractionClientCreateAuthCodeClient","setPreQueueTime","StandardInteractionClientGetClientConfiguration","clientConfig","getClientConfiguration","AuthorizationCodeClient","requestAuthority","StandardInteractionClientGetDiscoveredAuthority","discoveredAuthority","getDiscoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cacheOptions","claimsBasedCachingEnabled","cache","cryptoInterface","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","BrowserConstants","MSAL_SKU","version","cpu","os","telemetry","validateAndExtractStateFromHash","serverParams","interactionType","requestCorrelationId","state","BrowserAuthError","createHashDoesNotContainStateError","platformStateObj","BrowserProtocolUtils","extractBrowserRequestState","createUnableToParseStateError","createStateInteractionTypeMismatchError","getAuthorityMeasurement","startMeasurement","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","userAuthority","builtAuthority","Authority","generateAuthority","azureCloudOptions","AuthorityFactoryCreateDiscoveredInstance","AuthorityFactory","createDiscoveredInstance","then","result","end","success","catch","error","errorCode","subErrorCode","subError","initializeAuthorizationRequest","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","browserState","ProtocolUtils","setRequestState","InitializeBaseRequest","validatedRequest","initializeBaseRequest","nonce","responseMode","serverResponseType","getActiveAccount","verbosePii","homeAccountId","StringUtils","isEmpty","loginHint","legacyLoginHint","getLegacyLoginHint"],"sources":["../../src/interaction_client/StandardInteractionClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA;;;AAGG;AAsCH;;AAEG;AACG,MAAgBA,yBAA0B,SAAQC,qBAAqB;EACzE;;;AAGG;EACO,MAAMC,kCAAkCA,CAC9CC,OAAgC;IAEhC,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACC,2DAA2D,EAC7EJ,OAAO,CAACK,aAAa,CACxB;IACD,IAAI,CAACC,MAAM,CAACC,OAAO,CACf,uCAAuC,EACvCP,OAAO,CAACK,aAAa,CACxB;IACD,MAAMG,mBAAmB,GACrB,MAAM,IAAI,CAACC,aAAa,CAACC,iBAAiB,EAAE;IAEhD,MAAMC,eAAe,GAAmC;MACpD,GAAGX,OAAO;MACVY,WAAW,EAAEZ,OAAO,CAACY,WAAW;MAChCC,IAAI,EAAEC,SAAS,CAACC,YAAY;MAC5BC,YAAY,EAAER,mBAAmB,CAACS;KACrC;IAEDjB,OAAO,CAACkB,aAAa,GAAGV,mBAAmB,CAACW,SAAS;IACrDnB,OAAO,CAACoB,mBAAmB,GAAGN,SAAS,CAACO,0BAA0B;IAElE,OAAOV,eAAe;;EAG1B;;;AAGG;EACOW,uBAAuBA,CAC7BC,aAAiC;IAEjC,IAAI,CAACjB,MAAM,CAACC,OAAO,CACf,gCAAgC,EAChCgB,aAAa,EAAElB,aAAa,CAC/B;IAED,MAAMmB,kBAAkB,GAA4B;MAChDnB,aAAa,EACT,IAAI,CAACA,aAAa,IAAI,IAAI,CAACI,aAAa,CAACgB,aAAa,EAAE;MAC5D,GAAGF;KACN;IAED;;;AAGG;IACH,IAAIA,aAAa,EAAE;;MAEf,IAAI,CAACA,aAAa,CAACG,UAAU,EAAE;QAC3B,IAAIH,aAAa,CAACI,OAAO,EAAE;UACvB,MAAMD,UAAU,GAAG,IAAI,CAACE,8BAA8B,CAClDL,aAAa,CAACI,OAAO,CACxB;UACD,IAAID,UAAU,EAAE;YACZ,IAAI,CAACpB,MAAM,CAACC,OAAO,CACf,gFAAgF,CACnF;YACDiB,kBAAkB,CAACE,UAAU,GAAGA,UAAU;UAC7C;QACJ,OAAM;UACH,IAAI,CAACpB,MAAM,CAACC,OAAO,CACf,mGAAmG,CACtG;QACJ;MACJ,OAAM;QACH,IAAI,CAACD,MAAM,CAACC,OAAO,CACf,kDAAkD,CACrD;MACJ;IACJ,OAAM;MACH,IAAI,CAACD,MAAM,CAACC,OAAO,CACf,mEAAmE,CACtE;IACJ;IAED;;;AAGG;IACH,IAAI,CAACgB,aAAa,IAAIA,aAAa,CAACM,qBAAqB,KAAK,IAAI,EAAE;MAChE,IAAIN,aAAa,IAAIA,aAAa,CAACM,qBAAqB,EAAE;QACtD,IAAI,CAACvB,MAAM,CAACC,OAAO,CACf,4DAA4D,EAC5DiB,kBAAkB,CAACnB,aAAa,CACnC;QACDmB,kBAAkB,CAACK,qBAAqB,GACpCC,SAAS,CAACC,cAAc,CACpBR,aAAa,CAACM,qBAAqB,EACnCG,YAAY,CAACC,aAAa,EAAE,CAC/B;MACR,OAAM,IAAI,IAAI,CAACC,MAAM,CAACC,IAAI,CAACN,qBAAqB,KAAK,IAAI,EAAE;QACxD,IAAI,CAACvB,MAAM,CAACC,OAAO,CACf,sGAAsG,EACtGiB,kBAAkB,CAACnB,aAAa,CACnC;MACJ,OAAM,IAAI,IAAI,CAAC6B,MAAM,CAACC,IAAI,CAACN,qBAAqB,EAAE;QAC/C,IAAI,CAACvB,MAAM,CAACC,OAAO,CACf,iDAAiD,EACjDiB,kBAAkB,CAACnB,aAAa,CACnC;QACDmB,kBAAkB,CAACK,qBAAqB,GACpCC,SAAS,CAACC,cAAc,CACpB,IAAI,CAACG,MAAM,CAACC,IAAI,CAACN,qBAAqB,EACtCG,YAAY,CAACC,aAAa,EAAE,CAC/B;MACR,OAAM;QACH,IAAI,CAAC3B,MAAM,CAACC,OAAO,CACf,+CAA+C,EAC/CiB,kBAAkB,CAACnB,aAAa,CACnC;QACDmB,kBAAkB,CAACK,qBAAqB,GACpCC,SAAS,CAACC,cAAc,CACpBC,YAAY,CAACC,aAAa,EAAE,EAC5BD,YAAY,CAACC,aAAa,EAAE,CAC/B;MACR;IACJ,OAAM;MACH,IAAI,CAAC3B,MAAM,CAACC,OAAO,CACf,4EAA4E,EAC5EiB,kBAAkB,CAACnB,aAAa,CACnC;IACJ;IAED,OAAOmB,kBAAkB;;EAG7B;;;;AAIG;EACOI,8BAA8BA,CACpCD,OAAoB;IAEpB,MAAMS,aAAa,GAA8BT,OAAO,CAACS,aAAa;IACtE,IAAIA,aAAa,EAAE;MACf,IAAIA,aAAa,CAACC,UAAU,EAAE;QAC1B,OAAOD,aAAa,CAACC,UAAU;MAClC,OAAM;QACH,IAAI,CAAC/B,MAAM,CAACC,OAAO,CACf,oIAAoI,CACvI;MACJ;IACJ,OAAM;MACH,IAAI,CAACD,MAAM,CAACC,OAAO,CACf,uGAAuG,CAC1G;IACJ;IAED,OAAO,IAAI;;EAGf;;;;AAIG;EACO,MAAM+B,oBAAoBA,CAChCC,sBAA8C,EAC9CC,YAAqB,EACrBC,wBAA4C;IAE5C,IAAI,CAACxC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACuC,6CAA6C,EAC/D,IAAI,CAACrC,aAAa,CACrB;;IAED,IAAI,CAACJ,iBAAiB,CAAC0C,eAAe,CAClCxC,iBAAiB,CAACyC,+CAA+C,EACjE,IAAI,CAACvC,aAAa,CACrB;IACD,MAAMwC,YAAY,GAAG,MAAM,IAAI,CAACC,sBAAsB,CAClDP,sBAAsB,EACtBC,YAAY,EACZC,wBAAwB,CAC3B;IACD,OAAO,IAAIM,uBAAuB,CAC9BF,YAAY,EACZ,IAAI,CAAC5C,iBAAiB,CACzB;;EAGL;;;;;AAKG;EACO,MAAM6C,sBAAsBA,CAClCP,sBAA8C,EAC9CS,gBAAyB,EACzBP,wBAA4C;IAE5C,IAAI,CAACxC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACyC,+CAA+C,EACjE,IAAI,CAACvC,aAAa,CACrB;IACD,IAAI,CAACC,MAAM,CAACC,OAAO,CACf,+BAA+B,EAC/B,IAAI,CAACF,aAAa,CACrB;IACD,IAAI,CAACJ,iBAAiB,CAAC0C,eAAe,CAClCxC,iBAAiB,CAAC8C,+CAA+C,EACjE,IAAI,CAAC5C,aAAa,CACrB;IACD,MAAM6C,mBAAmB,GAAG,MAAM,IAAI,CAACC,sBAAsB,CACzDH,gBAAgB,EAChBP,wBAAwB,CAC3B;IACD,MAAMnC,MAAM,GAAG,IAAI,CAAC4B,MAAM,CAACkB,MAAM,CAACC,aAAa;IAE/C,OAAO;MACHC,WAAW,EAAE;QACTC,QAAQ,EAAE,IAAI,CAACrB,MAAM,CAACC,IAAI,CAACoB,QAAQ;QACnCC,SAAS,EAAEN,mBAAmB;QAC9BO,kBAAkB,EAAE,IAAI,CAACvB,MAAM,CAACC,IAAI,CAACsB;MACxC;MACDC,aAAa,EAAE;QACXC,yBAAyB,EACrB,IAAI,CAACzB,MAAM,CAACkB,MAAM,CAACO,yBAAyB;QAChDC,oBAAoB,EAAE;MACzB;MACDP,aAAa,EAAE;QACXQ,cAAc,EAAEvD,MAAM,CAACuD,cAAc;QACrCC,iBAAiB,EAAExD,MAAM,CAACwD,iBAAiB;QAC3CC,QAAQ,EAAEzD,MAAM,CAACyD,QAAQ;QACzB1D,aAAa,EAAE,IAAI,CAACA;MACvB;MACD2D,YAAY,EAAE;QACVC,yBAAyB,EACrB,IAAI,CAAC/B,MAAM,CAACgC,KAAK,CAACD;MACzB;MACDE,eAAe,EAAE,IAAI,CAAC1D,aAAa;MACnC2D,gBAAgB,EAAE,IAAI,CAACC,aAAa;MACpCC,gBAAgB,EAAE,IAAI,CAACC,cAAc;MACrChC,sBAAsB,EAAEA,sBAAsB;MAC9CiC,WAAW,EAAE;QACTC,GAAG,EAAEC,gBAAgB,CAACC,QAAQ;QAC9BC,OAAO,EAAEA,OAAO;QAChBC,GAAG,EAAE/D,SAAS,CAACC,YAAY;QAC3B+D,EAAE,EAAEhE,SAAS,CAACC;MACjB;MACDgE,SAAS,EAAE,IAAI,CAAC7C,MAAM,CAAC6C;KAC1B;;EAGL;;;AAGG;EACOC,+BAA+BA,CACrCC,YAA6C,EAC7CC,eAAgC,EAChCC,oBAA6B;IAE7B,IAAI,CAAC7E,MAAM,CAACC,OAAO,CACf,wCAAwC,EACxC4E,oBAAoB,CACvB;IACD,IAAI,CAACF,YAAY,CAACG,KAAK,EAAE;MACrB,MAAMC,gBAAgB,CAACC,kCAAkC,EAAE;IAC9D;IAED,MAAMC,gBAAgB,GAClBC,oBAAoB,CAACC,0BAA0B,CAC3C,IAAI,CAAChF,aAAa,EAClBwE,YAAY,CAACG,KAAK,CACrB;IACL,IAAI,CAACG,gBAAgB,EAAE;MACnB,MAAMF,gBAAgB,CAACK,6BAA6B,EAAE;IACzD;IAED,IAAIH,gBAAgB,CAACL,eAAe,KAAKA,eAAe,EAAE;MACtD,MAAMG,gBAAgB,CAACM,uCAAuC,EAAE;IACnE;IAED,IAAI,CAACrF,MAAM,CAACC,OAAO,CAAC,2BAA2B,EAAE4E,oBAAoB,CAAC;IACtE,OAAOF,YAAY,CAACG,KAAK;;EAG7B;;;;AAIG;EACO,MAAMjC,sBAAsBA,CAClCH,gBAAyB,EACzBP,wBAA4C;IAE5C,IAAI,CAACxC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAAC8C,+CAA+C,EACjE,IAAI,CAAC5C,aAAa,CACrB;IACD,IAAI,CAACC,MAAM,CAACC,OAAO,CACf,+BAA+B,EAC/B,IAAI,CAACF,aAAa,CACrB;IACD,MAAMuF,uBAAuB,GACzB,IAAI,CAAC3F,iBAAiB,EAAE4F,gBAAgB,CACpC1F,iBAAiB,CAAC8C,+CAA+C,EACjE,IAAI,CAAC5C,aAAa,CACrB;IACL,MAAMyF,gBAAgB,GAAqB;MACvCC,YAAY,EAAE,IAAI,CAAC7D,MAAM,CAACC,IAAI,CAAC4D,YAAY;MAC3CC,WAAW,EAAE,IAAI,CAAC9D,MAAM,CAACC,IAAI,CAAC6D,WAAW;MACzCC,gBAAgB,EAAE,IAAI,CAAC/D,MAAM,CAACC,IAAI,CAAC8D,gBAAgB;MACnDC,sBAAsB,EAAE,IAAI,CAAChE,MAAM,CAACC,IAAI,CAAC+D,sBAAsB;MAC/DC,iBAAiB,EAAE,IAAI,CAACjE,MAAM,CAACC,IAAI,CAACgE,iBAAiB;MACrDC,0BAA0B,EACtB,IAAI,CAAClE,MAAM,CAACC,IAAI,CAACiE;KACxB;;IAGD,MAAMC,aAAa,GAAGrD,gBAAgB,GAChCA,gBAAgB,GAChB,IAAI,CAACd,MAAM,CAACC,IAAI,CAACqB,SAAS;;IAGhC,MAAM8C,cAAc,GAAGC,SAAS,CAACC,iBAAiB,CAC9CH,aAAa,EACb5D,wBAAwB,IAAI,IAAI,CAACP,MAAM,CAACC,IAAI,CAACsE,iBAAiB,CACjE;IACD,IAAI,CAACnG,MAAM,CAACC,OAAO,CACf,yDAAyD,EACzD,IAAI,CAACF,aAAa,CACrB;IACD,IAAI,CAACJ,iBAAiB,CAAC0C,eAAe,CAClCxC,iBAAiB,CAACuG,wCAAwC,EAC1D,IAAI,CAACrG,aAAa,CACrB;IACD,OAAO,MAAMsG,gBAAgB,CAACC,wBAAwB,CAClDN,cAAc,EACd,IAAI,CAACpE,MAAM,CAACkB,MAAM,CAACiB,aAAa,EAChC,IAAI,CAACE,cAAc,EACnBuB,gBAAgB,EAChB,IAAI,CAACxF,MAAM,EACX,IAAI,CAACL,iBAAiB,EACtB,IAAI,CAACI,aAAa,CACrB,CACIwG,IAAI,CAAEC,MAAiB,IAAI;MACxBlB,uBAAuB,CAACmB,GAAG,CAAC;QACxBC,OAAO,EAAE;MACZ,EAAC;MAEF,OAAOF,MAAM;IACjB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAgB,IAAI;MACxBtB,uBAAuB,CAACmB,GAAG,CAAC;QACxBI,SAAS,EAAED,KAAK,CAACC,SAAS;QAC1BC,YAAY,EAAEF,KAAK,CAACG,QAAQ;QAC5BL,OAAO,EAAE;MACZ,EAAC;MAEF,MAAME,KAAK;IACf,CAAC,CAAC;;EAGV;;;;AAIG;EACO,MAAMI,8BAA8BA,CAC1CtH,OAA0D,EAC1DkF,eAAgC;IAEhC,IAAI,CAACjF,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACoH,uDAAuD,EACzE,IAAI,CAAClH,aAAa,CACrB;IACD,IAAI,CAACC,MAAM,CAACC,OAAO,CACf,uCAAuC,EACvC,IAAI,CAACF,aAAa,CACrB;IACD,MAAMO,WAAW,GAAG,IAAI,CAAC4G,cAAc,CAACxH,OAAO,CAACY,WAAW,CAAC;IAC5D,MAAM6G,YAAY,GAAuB;MACrCvC,eAAe,EAAEA;KACpB;IACD,MAAME,KAAK,GAAGsC,aAAa,CAACC,eAAe,CACvC,IAAI,CAAClH,aAAa,EACjBT,OAAO,IAAIA,OAAO,CAACoF,KAAK,IAAKtE,SAAS,CAACC,YAAY,EACpD0G,YAAY,CACf;IAED,IAAI,CAACxH,iBAAiB,CAAC0C,eAAe,CAClCxC,iBAAiB,CAACyH,qBAAqB,EACvC,IAAI,CAACvH,aAAa,CACrB;IAED,MAAMwH,gBAAgB,GAA4B;MAC9C,IAAI,MAAM,IAAI,CAACC,qBAAqB,CAAC9H,OAAO,CAAC,CAAC;MAC9CY,WAAW,EAAEA,WAAW;MACxBwE,KAAK,EAAEA,KAAK;MACZ2C,KAAK,EAAE/H,OAAO,CAAC+H,KAAK,IAAI,IAAI,CAACtH,aAAa,CAACgB,aAAa,EAAE;MAC1DuG,YAAY,EAAE,IAAI,CAAC9F,MAAM,CAACC,IAAI,CAAC6D,WAAW,CACrCiC;KACR;IAED,MAAMtG,OAAO,GACT3B,OAAO,CAAC2B,OAAO,IAAI,IAAI,CAAC4C,cAAc,CAAC2D,gBAAgB,EAAE;IAC7D,IAAIvG,OAAO,EAAE;MACT,IAAI,CAACrB,MAAM,CAACC,OAAO,CACf,mCAAmC,EACnC,IAAI,CAACF,aAAa,CACrB;MACD,IAAI,CAACC,MAAM,CAAC6H,UAAU,CACoB,sCAAAxG,OAAO,CAACyG,aAAa,EAAE,EAC7D,IAAI,CAAC/H,aAAa,CACrB;MACDwH,gBAAgB,CAAClG,OAAO,GAAGA,OAAO;IACrC;;IAGD,IAAI0G,WAAW,CAACC,OAAO,CAACT,gBAAgB,CAACU,SAAS,CAAC,IAAI,CAAC5G,OAAO,EAAE;MAC7D,MAAM6G,eAAe,GAAG,IAAI,CAACjE,cAAc,CAACkE,kBAAkB,EAAE;MAChE,IAAID,eAAe,EAAE;QACjBX,gBAAgB,CAACU,SAAS,GAAGC,eAAe;MAC/C;IACJ;IAED,OAAOX,gBAAgB;;AAE9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}