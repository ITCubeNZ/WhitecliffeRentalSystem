{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.mjs';\nimport { PerformanceEvents, AuthError, AuthenticationScheme } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.mjs';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NativeMessageHandler {\n  constructor(logger, handshakeTimeoutMs, performanceClient, crypto, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n    this.crypto = crypto;\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param body\r\n   */\n  async sendMessage(body) {\n    this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n    const req = {\n      channel: NativeConstants.CHANNEL_ID,\n      extensionId: this.extensionId,\n      responseId: this.crypto.createNewGuid(),\n      body: body\n    };\n    this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n    this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\n    this.messageChannel.port1.postMessage(req);\n    return new Promise((resolve, reject) => {\n      this.resolvers.set(req.responseId, {\n        resolve,\n        reject\n      });\n    });\n  }\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param {Logger} logger\r\n   * @param {number} handshakeTimeoutMs\r\n   * @param {IPerformanceClient} performanceClient\r\n   * @param {ICrypto} crypto\r\n   */\n  static async createProvider(logger, handshakeTimeoutMs, performanceClient, crypto) {\n    logger.trace(\"NativeMessageHandler - createProvider called.\");\n    try {\n      const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, crypto, NativeConstants.PREFERRED_EXTENSION_ID);\n      await preferredProvider.sendHandshakeRequest();\n      return preferredProvider;\n    } catch (e) {\n      // If preferred extension fails for whatever reason, fallback to using any installed extension\n      const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, crypto);\n      await backupProvider.sendHandshakeRequest();\n      return backupProvider;\n    }\n  }\n  /**\r\n   * Send handshake request helper.\r\n   */\n  async sendHandshakeRequest() {\n    this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n    // Register this event listener before sending handshake\n    window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n    const req = {\n      channel: NativeConstants.CHANNEL_ID,\n      extensionId: this.extensionId,\n      responseId: this.crypto.createNewGuid(),\n      body: {\n        method: NativeExtensionMethod.HandshakeRequest\n      }\n    };\n    this.handshakeEvent.add({\n      extensionId: this.extensionId,\n      extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n    });\n    this.messageChannel.port1.onmessage = event => {\n      this.onChannelMessage(event);\n    };\n    window.postMessage(req, window.origin, [this.messageChannel.port2]);\n    return new Promise((resolve, reject) => {\n      this.handshakeResolvers.set(req.responseId, {\n        resolve,\n        reject\n      });\n      this.timeoutId = window.setTimeout(() => {\n        /*\r\n         * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n         * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n         */\n        window.removeEventListener(\"message\", this.windowListener, false);\n        this.messageChannel.port1.close();\n        this.messageChannel.port2.close();\n        this.handshakeEvent.end({\n          extensionHandshakeTimedOut: true,\n          success: false\n        });\n        reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n        this.handshakeResolvers.delete(req.responseId);\n      }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n    });\n  }\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n  onWindowMessage(event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n    // We only accept messages from ourselves\n    if (event.source !== window) {\n      return;\n    }\n    const request = event.data;\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n      /*\r\n       * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\r\n       * the proper response.\r\n       */\n      if (!handshakeResolver) {\n        this.logger.trace(`NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`);\n        return;\n      }\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      this.handshakeEvent.end({\n        success: false,\n        extensionInstalled: false\n      });\n      handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n    }\n  }\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n  onChannelMessage(event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    const request = event.data;\n    const resolver = this.resolvers.get(request.responseId);\n    const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n    try {\n      const method = request.body.method;\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n        const response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          this.logger.trace(`NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`);\n          return;\n        }\n        clearTimeout(this.timeoutId); // Clear setTimeout\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\n        this.handshakeEvent.end({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      }\n      // Do nothing if method is not Response or HandshakeResponse\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);\n      this.logger.errorPii(`Unable to parse ${event}`);\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  }\n  /**\r\n   * Returns the Id for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  getExtensionId() {\n    return this.extensionId;\n  }\n  /**\r\n   * Returns the version for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  getExtensionVersion() {\n    return this.extensionVersion;\n  }\n  /**\r\n   * Returns boolean indicating whether or not the request should attempt to use native broker\r\n   * @param logger\r\n   * @param config\r\n   * @param nativeExtensionProvider\r\n   * @param authenticationScheme\r\n   */\n  static isNativeAvailable(config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n      // Developer disabled WAM\n      return false;\n    }\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n      // Extension is not available\n      return false;\n    }\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n    return true;\n  }\n}\nexport { NativeMessageHandler };","map":{"version":3,"names":["NativeMessageHandler","constructor","logger","handshakeTimeoutMs","performanceClient","crypto","extensionId","resolvers","Map","handshakeResolvers","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","handshakeEvent","startMeasurement","PerformanceEvents","NativeMessageHandlerHandshake","sendMessage","body","trace","req","channel","NativeConstants","CHANNEL_ID","responseId","createNewGuid","tracePii","JSON","stringify","port1","postMessage","Promise","resolve","reject","set","createProvider","preferredProvider","PREFERRED_EXTENSION_ID","sendHandshakeRequest","e","backupProvider","window","addEventListener","method","NativeExtensionMethod","HandshakeRequest","add","extensionHandshakeTimeoutMs","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","end","extensionHandshakeTimedOut","success","BrowserAuthError","createNativeHandshakeTimeoutError","delete","source","request","data","handshakeResolver","get","verbose","clearTimeout","extensionInstalled","createNativeExtensionNotInstalledError","resolver","Response","response","status","NativeAuthError","createError","code","description","ext","result","AuthError","createUnexpectedError","HandshakeResponse","extensionVersion","version","err","error","errorPii","getExtensionId","getExtensionVersion","isNativeAvailable","config","nativeExtensionProvider","authenticationScheme","system","allowNativeBroker","AuthenticationScheme","BEARER","POP"],"sources":["../../../src/broker/nativeBroker/NativeMessageHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}