{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { Base64Encode } from '../encode/Base64Encode.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\nclass PkceGenerator {\n  constructor(cryptoObj) {\n    this.base64Encode = new Base64Encode();\n    this.cryptoObj = cryptoObj;\n  }\n  /**\r\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n   */\n  async generateCodes() {\n    const codeVerifier = this.generateCodeVerifier();\n    const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\n    return {\n      verifier: codeVerifier,\n      challenge: codeChallenge\n    };\n  }\n  /**\r\n   * Generates a random 32 byte buffer and returns the base64\r\n   * encoded string to be used as a PKCE Code Verifier\r\n   */\n  generateCodeVerifier() {\n    try {\n      // Generate random values as utf-8\n      const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer);\n      // encode verifier as base64\n      const pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  }\n  /**\r\n   * Creates a base64 encoded PKCE Code Challenge string from the\r\n   * hash created from the PKCE Code Verifier supplied\r\n   */\n  async generateCodeChallengeFromVerifier(pkceCodeVerifier) {\n    try {\n      // hashed verifier\n      const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\n      // encode hash as base64\n      return this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  }\n}\nexport { PkceGenerator };","map":{"version":3,"names":["RANDOM_BYTE_ARR_LENGTH","PkceGenerator","constructor","cryptoObj","base64Encode","Base64Encode","generateCodes","codeVerifier","generateCodeVerifier","codeChallenge","generateCodeChallengeFromVerifier","verifier","challenge","buffer","Uint8Array","getRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","BrowserAuthError","createPkceNotGeneratedError","pkceCodeVerifier","pkceHashedCodeVerifier","sha256Digest"],"sources":["../../src/crypto/PkceGenerator.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;;;AAGG;AAOH;AACA,MAAMA,sBAAsB,GAAG,EAAE;AAEjC;;AAEG;MACUC,aAAa;EAItBC,YAAYC,SAAwB;IAChC,IAAI,CAACC,YAAY,GAAG,IAAIC,YAAY,EAAE;IACtC,IAAI,CAACF,SAAS,GAAGA,SAAS;;EAG9B;;AAEG;EACH,MAAMG,aAAaA,CAAA;IACf,MAAMC,YAAY,GAAG,IAAI,CAACC,oBAAoB,EAAE;IAChD,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACC,iCAAiC,CAC9DH,YAAY,CACf;IACD,OAAO;MACHI,QAAQ,EAAEJ,YAAY;MACtBK,SAAS,EAAEH;KACd;;EAGL;;;AAGG;EACKD,oBAAoBA,CAAA;IACxB,IAAI;;MAEA,MAAMK,MAAM,GAAe,IAAIC,UAAU,CAACd,sBAAsB,CAAC;MACjE,IAAI,CAACG,SAAS,CAACY,eAAe,CAACF,MAAM,CAAC;;MAEtC,MAAMG,mBAAmB,GACrB,IAAI,CAACZ,YAAY,CAACa,YAAY,CAACJ,MAAM,CAAC;MAC1C,OAAOG,mBAAmB;IAC7B,EAAC,OAAOE,CAAC,EAAE;MACR,MAAMC,gBAAgB,CAACC,2BAA2B,CAACF,CAAW,CAAC;IAClE;;EAGL;;;AAGG;EACK,MAAMR,iCAAiCA,CAC3CW,gBAAwB;IAExB,IAAI;;MAEA,MAAMC,sBAAsB,GAAG,MAAM,IAAI,CAACnB,SAAS,CAACoB,YAAY,CAC5DF,gBAAgB,CACnB;;MAED,OAAO,IAAI,CAACjB,YAAY,CAACa,YAAY,CACjC,IAAIH,UAAU,CAACQ,sBAAsB,CAAC,CACzC;IACJ,EAAC,OAAOJ,CAAC,EAAE;MACR,MAAMC,gBAAgB,CAACC,2BAA2B,CAACF,CAAW,CAAC;IAClE;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}