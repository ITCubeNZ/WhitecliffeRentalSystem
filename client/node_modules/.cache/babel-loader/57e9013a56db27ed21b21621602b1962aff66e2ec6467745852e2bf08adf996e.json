{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { BaseClient } from './BaseClient.mjs';\nimport { AuthToken } from '../account/AuthToken.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { RefreshTokenClient } from './RefreshTokenClient.mjs';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { CacheOutcome } from '../utils/Constants.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass SilentFlowClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    try {\n      return await this.acquireCachedToken(request);\n    } catch (e) {\n      if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n        const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n        return refreshTokenClient.acquireTokenByRefreshToken(request);\n      } else {\n        throw e;\n      }\n    }\n  }\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n  async acquireCachedToken(request) {\n    // Cannot renew token if no request object is given.\n    if (!request) {\n      throw ClientConfigurationError.createEmptyTokenRequestError();\n    }\n    if (request.forceRefresh) {\n      // Must refresh due to present force_refresh flag.\n      this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n      this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n      throw ClientAuthError.createRefreshRequiredError();\n    } else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\n      // Must refresh due to request parameters.\n      this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\n      throw ClientAuthError.createRefreshRequiredError();\n    }\n    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n    if (!request.account) {\n      throw ClientAuthError.createNoAccountInSilentRequestError();\n    }\n    const environment = request.authority || this.authority.getPreferredCache();\n    const cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n    if (!cacheRecord.accessToken) {\n      // Must refresh due to non-existent access_token.\n      this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n      this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n      throw ClientAuthError.createRefreshRequiredError();\n    } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n      // Must refresh due to expired access_token.\n      this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n      this.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n      throw ClientAuthError.createRefreshRequiredError();\n    } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n      // Must refresh due to the refresh_in value.\n      this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n      this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n      throw ClientAuthError.createRefreshRequiredError();\n    }\n    if (this.config.serverTelemetryManager) {\n      this.config.serverTelemetryManager.incrementCacheHits();\n    }\n    return await this.generateResultFromCacheRecord(cacheRecord, request);\n  }\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n  async generateResultFromCacheRecord(cacheRecord, request) {\n    let idTokenObj;\n    if (cacheRecord.idToken) {\n      idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n    }\n    // token max_age check\n    if (request.maxAge || request.maxAge === 0) {\n      const authTime = idTokenObj?.claims.auth_time;\n      if (!authTime) {\n        throw ClientAuthError.createAuthTimeNotFoundError();\n      }\n      AuthToken.checkMaxAge(authTime, request.maxAge);\n    }\n    return await ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj);\n  }\n}\nexport { SilentFlowClient };","map":{"version":3,"names":["SilentFlowClient","BaseClient","constructor","configuration","performanceClient","acquireToken","request","acquireCachedToken","e","ClientAuthError","errorCode","ClientAuthErrorMessage","tokenRefreshRequired","code","refreshTokenClient","RefreshTokenClient","config","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","forceRefresh","serverTelemetryManager","setCacheOutcome","CacheOutcome","FORCE_REFRESH","logger","info","createRefreshRequiredError","cacheOptions","claimsBasedCachingEnabled","StringUtils","isEmptyObj","claims","account","createNoAccountInSilentRequestError","environment","authority","getPreferredCache","cacheRecord","cacheManager","readCacheRecord","accessToken","NO_CACHED_ACCESS_TOKEN","TimeUtils","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","REFRESH_CACHED_ACCESS_TOKEN","incrementCacheHits","generateResultFromCacheRecord","idTokenObj","idToken","AuthToken","secret","cryptoInterface","maxAge","authTime","auth_time","createAuthTimeNotFoundError","checkMaxAge","ResponseHandler","generateAuthenticationResult","cryptoUtils"],"sources":["../../src/client/SilentFlowClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}