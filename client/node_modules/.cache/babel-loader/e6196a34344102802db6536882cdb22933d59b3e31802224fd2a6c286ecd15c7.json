{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nclass RefreshTokenClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  async acquireToken(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n    const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n    this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n    const reqTimestamp = TimeUtils.nowSeconds();\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n    const response = await this.executeTokenRequest(request, this.authority);\n    const httpVerToken = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\n    atsMeasurement?.add({\n      refreshTokenSize: response.body.refresh_token?.length || 0\n    });\n    if (httpVerToken) {\n      atsMeasurement?.add({\n        httpVerToken\n      });\n    }\n    // Retrieve requestId from response headers\n    const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n    responseHandler.validateTokenResponse(response.body);\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n    return responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(result => {\n      atsMeasurement?.end({\n        success: true\n      });\n      return result;\n    }).catch(error => {\n      this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n      atsMeasurement?.end({\n        errorCode: error.errorCode,\n        subErrorCode: error.subError,\n        success: false\n      });\n      throw error;\n    });\n  }\n  /**\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\n   * @param request\n   */\n  async acquireTokenByRefreshToken(request) {\n    // Cannot renew token if no request object is given.\n    if (!request) {\n      throw ClientConfigurationError.createEmptyTokenRequestError();\n    }\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n    if (!request.account) {\n      throw ClientAuthError.createNoAccountInSilentRequestError();\n    }\n    // try checking if FOCI is enabled for the given application\n    const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n    // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n    if (isFOCI) {\n      try {\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        return this.acquireTokenWithCachedRefreshToken(request, true);\n      } catch (e) {\n        const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n        const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n          this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n          return this.acquireTokenWithCachedRefreshToken(request, false);\n          // throw in all other cases\n        } else {\n          throw e;\n        }\n      }\n    }\n    // fall back to application refresh token acquisition\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n    return this.acquireTokenWithCachedRefreshToken(request, false);\n  }\n  /**\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n   * @param request\n   */\n  async acquireTokenWithCachedRefreshToken(request, foci) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n    // fetches family RT or application RT based on FOCI value\n    const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n    this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n    const refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\n    if (!refreshToken) {\n      atsMeasurement?.discard();\n      throw InteractionRequiredAuthError.createNoTokensFoundError();\n    }\n    // attach cached RT size to the current measurement\n    atsMeasurement?.end({\n      success: true\n    });\n    const refreshTokenRequest = {\n      ...request,\n      refreshToken: refreshToken.secret,\n      authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n      ccsCredential: {\n        credential: request.account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      }\n    };\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n    return this.acquireToken(refreshTokenRequest);\n  }\n  /**\n   * Constructs the network message and makes a NW call to the underlying secure token service\n   * @param request\n   * @param authority\n   */\n  async executeTokenRequest(request, authority) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n    const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n    const queryParametersString = this.createTokenQueryParameters(request);\n    const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n    const requestBody = await this.createTokenRequestBody(request);\n    const headers = this.createTokenRequestHeaders(request.ccsCredential);\n    const thumbprint = {\n      clientId: this.config.authOptions.clientId,\n      authority: authority.canonicalAuthority,\n      scopes: request.scopes,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(result => {\n      acquireTokenMeasurement?.end({\n        success: true\n      });\n      return result;\n    }).catch(error => {\n      acquireTokenMeasurement?.end({\n        success: false\n      });\n      throw error;\n    });\n  }\n  /**\n   * Helper function to create the token request body\n   * @param request\n   */\n  async createTokenRequestBody(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n    const correlationId = request.correlationId;\n    const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n    const parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n    parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRefreshToken(request.refreshToken);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      const clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n      this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n      const reqCnfData = await popTokenGenerator.generateCnf(request);\n      // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n      parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n    } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n      if (request.sshJwk) {\n        parameterBuilder.addSshJwk(request.sshJwk);\n      } else {\n        acquireTokenMeasurement?.end({\n          success: false\n        });\n        throw ClientConfigurationError.createMissingSshJwkError();\n      }\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n      switch (request.ccsCredential.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n          break;\n      }\n    }\n    acquireTokenMeasurement?.end({\n      success: true\n    });\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { RefreshTokenClient };","map":{"version":3,"names":["RefreshTokenClient","BaseClient","constructor","configuration","performanceClient","acquireToken","request","addQueueMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","atsMeasurement","startMeasurement","logger","verbose","reqTimestamp","TimeUtils","nowSeconds","setPreQueueTime","RefreshTokenClientExecuteTokenRequest","response","executeTokenRequest","authority","httpVerToken","headers","HeaderNames","X_MS_HTTP_VERSION","add","refreshTokenSize","body","refresh_token","length","requestId","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","HandleServerTokenResponse","handleServerTokenResponse","undefined","forceCache","then","result","end","success","catch","error","errorCode","subErrorCode","subError","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","RefreshTokenClientAcquireTokenByRefreshToken","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","RefreshTokenClientAcquireTokenWithCachedRefreshToken","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","refreshToken","getRefreshToken","discard","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireTokenMeasurement","RefreshTokenClientCreateTokenRequestBody","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","BaseClientCreateTokenRequestHeaders","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","options","OIDCOptions","defaultScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","isOidcProtocolMode","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","PopTokenGenerateCnf","reqCnfData","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","createQueryString"],"sources":["../../src/client/RefreshTokenClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}