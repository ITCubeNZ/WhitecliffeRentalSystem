{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.mjs';\nimport { Base64Encode } from '../encode/Base64Encode.mjs';\nimport { Base64Decode } from '../encode/Base64Decode.mjs';\nimport { PkceGenerator } from './PkceGenerator.mjs';\nimport { BrowserCrypto } from './BrowserCrypto.mjs';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nclass CryptoOps {\n  constructor(logger, performanceClient) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto(this.logger);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Creates a new random GUID - used to populate state and nonce.\n   * @returns string (GUID)\n   */\n  createNewGuid() {\n    return this.guidGenerator.generateGuid();\n  }\n  /**\n   * Encodes input string to base64.\n   * @param input\n   */\n  base64Encode(input) {\n    return this.b64Encode.encode(input);\n  }\n  /**\n   * Decodes input string from base64.\n   * @param input\n   */\n  base64Decode(input) {\n    return this.b64Decode.decode(input);\n  }\n  /**\n   * Generates PKCE codes used in Authorization Code Flow.\n   */\n  async generatePkceCodes() {\n    return this.pkceGenerator.generateCodes();\n  }\n  /**\n   * Generates a keypair, stores it and returns a thumbprint\n   * @param request\n   */\n  async getPublicKeyThumbprint(request) {\n    const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n    // Generate Keypair\n    const keyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n    // Generate Thumbprint for Public Key\n    const publicKeyJwk = await this.browserCrypto.exportJwk(keyPair.publicKey);\n    const pubKeyThumprintObj = {\n      e: publicKeyJwk.e,\n      kty: publicKeyJwk.kty,\n      n: publicKeyJwk.n\n    };\n    const publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n    const publicJwkHash = await this.hashString(publicJwkString);\n    // Generate Thumbprint for Private Key\n    const privateKeyJwk = await this.browserCrypto.exportJwk(keyPair.privateKey);\n    // Re-import private key to make it unextractable\n    const unextractablePrivateKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n    // Store Keypair data in keystore\n    await this.cache.asymmetricKeys.setItem(publicJwkHash, {\n      privateKey: unextractablePrivateKey,\n      publicKey: keyPair.publicKey,\n      requestMethod: request.resourceRequestMethod,\n      requestUri: request.resourceRequestUri\n    });\n    if (publicKeyThumbMeasurement) {\n      publicKeyThumbMeasurement.end({\n        success: true\n      });\n    }\n    return publicJwkHash;\n  }\n  /**\n   * Removes cryptographic keypair from key store matching the keyId passed in\n   * @param kid\n   */\n  async removeTokenBindingKey(kid) {\n    await this.cache.asymmetricKeys.removeItem(kid);\n    const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n    return !keyFound;\n  }\n  /**\n   * Removes all cryptographic keys from IndexedDB storage\n   */\n  async clearKeystore() {\n    return await this.cache.clear();\n  }\n  /**\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\n   * @param payload\n   * @param kid\n   */\n  async signJwt(payload, kid, correlationId) {\n    const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n    const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n    if (!cachedKeyPair) {\n      throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n    }\n    // Get public key as JWK\n    const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n    const publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n    // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n    const encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n      kid: kid\n    }));\n    // Generate header\n    const shrHeader = JoseHeader.getShrHeaderString({\n      kid: encodedKeyIdThumbprint,\n      alg: publicKeyJwk.alg\n    });\n    const encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n    // Generate payload\n    payload.cnf = {\n      jwk: JSON.parse(publicKeyJwkString)\n    };\n    const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n    // Form token string\n    const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n    // Sign token\n    const tokenBuffer = BrowserStringUtils.stringToUtf8Arr(tokenString);\n    const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n    const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n    const signedJwt = `${tokenString}.${encodedSignature}`;\n    if (signJwtMeasurement) {\n      signJwtMeasurement.end({\n        success: true\n      });\n    }\n    return signedJwt;\n  }\n  /**\n   * Returns the SHA-256 hash of an input string\n   * @param plainText\n   */\n  async hashString(plainText) {\n    const hashBuffer = await this.browserCrypto.sha256Digest(plainText);\n    const hashBytes = new Uint8Array(hashBuffer);\n    return this.b64Encode.urlEncodeArr(hashBytes);\n  }\n}\nCryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\nCryptoOps.EXTRACTABLE = true;\nexport { CryptoOps };","map":{"version":3,"names":["CryptoOps","constructor","logger","performanceClient","browserCrypto","BrowserCrypto","b64Encode","Base64Encode","b64Decode","Base64Decode","guidGenerator","GuidGenerator","pkceGenerator","PkceGenerator","cache","CryptoKeyStore","createNewGuid","generateGuid","base64Encode","input","encode","base64Decode","decode","generatePkceCodes","generateCodes","getPublicKeyThumbprint","request","publicKeyThumbMeasurement","startMeasurement","PerformanceEvents","CryptoOptsGetPublicKeyThumbprint","correlationId","keyPair","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","publicKeyJwk","exportJwk","publicKey","pubKeyThumprintObj","e","kty","n","publicJwkString","BrowserStringUtils","getSortedObjectString","publicJwkHash","hashString","privateKeyJwk","privateKey","unextractablePrivateKey","importJwk","asymmetricKeys","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","end","success","removeTokenBindingKey","kid","removeItem","keyFound","containsKey","clearKeystore","clear","signJwt","payload","signJwtMeasurement","CryptoOptsSignJwt","cachedKeyPair","getItem","BrowserAuthError","createSigningKeyNotFoundInStorageError","publicKeyJwkString","encodedKeyIdThumbprint","urlEncode","JSON","stringify","shrHeader","JoseHeader","getShrHeaderString","alg","encodedShrHeader","cnf","jwk","parse","encodedPayload","tokenString","tokenBuffer","stringToUtf8Arr","signatureBuffer","sign","encodedSignature","urlEncodeArr","Uint8Array","signedJwt","plainText","hashBuffer","sha256Digest","hashBytes"],"sources":["../../src/crypto/CryptoOps.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}