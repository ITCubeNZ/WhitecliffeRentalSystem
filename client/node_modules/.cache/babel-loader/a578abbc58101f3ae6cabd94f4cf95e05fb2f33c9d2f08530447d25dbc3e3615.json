{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { PerformanceEvents, StringUtils, Constants, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from '../config/Configuration.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentHandler extends InteractionHandler {\n  constructor(authCodeModule, storageImpl, authCodeRequest, logger, systemOptions, performanceClient) {\n    super(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient);\n    this.navigateFrameWait = systemOptions.navigateFrameWait;\n    this.pollIntervalMilliseconds = systemOptions.pollIntervalMilliseconds;\n  }\n  /**\n   * Creates a hidden iframe to given URL using user-requested scopes as an id.\n   * @param urlNavigate\n   * @param userRequestScopes\n   */\n  async initiateAuthRequest(requestUrl) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest, this.authCodeRequest.correlationId);\n    if (StringUtils.isEmpty(requestUrl)) {\n      // Throw error if request URL is empty.\n      this.logger.info(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n    if (this.navigateFrameWait) {\n      this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);\n      return await this.loadFrame(requestUrl);\n    }\n    return this.loadFrameSync(requestUrl);\n  }\n  /**\n   * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n   * @param iframe\n   * @param timeout\n   */\n  monitorIframeForHash(iframe, timeout) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash, this.authCodeRequest.correlationId);\n    return new Promise((resolve, reject) => {\n      if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n        this.logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n      }\n      /*\n       * Polling for iframes can be purely timing based,\n       * since we don't need to account for interaction.\n       */\n      const nowMark = window.performance.now();\n      const timeoutMark = nowMark + timeout;\n      const intervalId = setInterval(() => {\n        if (window.performance.now() > timeoutMark) {\n          this.removeHiddenIframe(iframe);\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorIframeTimeoutError());\n          return;\n        }\n        let href = Constants.EMPTY_STRING;\n        const contentWindow = iframe.contentWindow;\n        try {\n          /*\n           * Will throw if cross origin,\n           * which should be caught and ignored\n           * since we need the interval to keep running while on STS UI.\n           */\n          href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n        } catch (e) {}\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n        const contentHash = contentWindow ? contentWindow.location.hash : Constants.EMPTY_STRING;\n        if (contentHash) {\n          if (UrlString.hashContainsKnownProperties(contentHash)) {\n            // Success case\n            this.removeHiddenIframe(iframe);\n            clearInterval(intervalId);\n            resolve(contentHash);\n            return;\n          } else {\n            // Hash is present but incorrect\n            this.logger.error(\"SilentHandler:monitorIFrameForHash - a hash is present in the iframe but it does not contain known properties. It's likely that the hash has been replaced by code running on the redirectUri page.\");\n            this.logger.errorPii(`SilentHandler:monitorIFrameForHash - the url detected in the iframe is: ${href}`);\n            this.removeHiddenIframe(iframe);\n            clearInterval(intervalId);\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n            return;\n          }\n        } else {\n          // No hash is present\n          this.logger.error(\"SilentHandler:monitorIFrameForHash - the request has returned to the redirectUri but a hash is not present in the iframe. It's likely that the hash has been removed or the page has been redirected by code running on the redirectUri page.\");\n          this.logger.errorPii(`SilentHandler:monitorIFrameForHash - the url detected in the iframe is: ${href}`);\n          this.removeHiddenIframe(iframe);\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createEmptyHashError());\n          return;\n        }\n      }, this.pollIntervalMilliseconds);\n    });\n  }\n  /**\n   * @hidden\n   * Loads iframe with authorization endpoint URL\n   * @ignore\n   */\n  loadFrame(urlNavigate) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);\n    /*\n     * This trick overcomes iframe navigation in IE\n     * IE does not load the page consistently in iframe\n     */\n    return new Promise((resolve, reject) => {\n      const frameHandle = this.createHiddenIframe();\n      setTimeout(() => {\n        if (!frameHandle) {\n          reject(\"Unable to load iframe\");\n          return;\n        }\n        frameHandle.src = urlNavigate;\n        resolve(frameHandle);\n      }, this.navigateFrameWait);\n    });\n  }\n  /**\n   * @hidden\n   * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n   * @param urlNavigate\n   * @param frameName\n   * @param logger\n   */\n  loadFrameSync(urlNavigate) {\n    const frameHandle = this.createHiddenIframe();\n    frameHandle.src = urlNavigate;\n    return frameHandle;\n  }\n  /**\n   * @hidden\n   * Creates a new hidden iframe or gets an existing one for silent token renewal.\n   * @ignore\n   */\n  createHiddenIframe() {\n    const authFrame = document.createElement(\"iframe\");\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n    document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n    return authFrame;\n  }\n  /**\n   * @hidden\n   * Removes a hidden iframe from the page.\n   * @ignore\n   */\n  removeHiddenIframe(iframe) {\n    if (document.body === iframe.parentNode) {\n      document.body.removeChild(iframe);\n    }\n  }\n}\nexport { SilentHandler };","map":{"version":3,"names":["SilentHandler","InteractionHandler","constructor","authCodeModule","storageImpl","authCodeRequest","logger","systemOptions","performanceClient","navigateFrameWait","pollIntervalMilliseconds","initiateAuthRequest","requestUrl","addQueueMeasurement","PerformanceEvents","SilentHandlerInitiateAuthRequest","correlationId","StringUtils","isEmpty","info","BrowserAuthError","createEmptyNavigationUriError","setPreQueueTime","SilentHandlerLoadFrame","loadFrame","loadFrameSync","monitorIframeForHash","iframe","timeout","SilentHandlerMonitorIframeForHash","Promise","resolve","reject","DEFAULT_IFRAME_TIMEOUT_MS","warning","nowMark","window","performance","now","timeoutMark","intervalId","setInterval","removeHiddenIframe","clearInterval","createMonitorIframeTimeoutError","href","Constants","EMPTY_STRING","contentWindow","location","e","contentHash","hash","UrlString","hashContainsKnownProperties","error","errorPii","createHashDoesNotContainKnownPropertiesError","createEmptyHashError","urlNavigate","frameHandle","createHiddenIframe","setTimeout","src","authFrame","document","createElement","style","visibility","position","width","height","border","setAttribute","getElementsByTagName","appendChild","body","parentNode","removeChild"],"sources":["../../src/interaction_handler/SilentHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}