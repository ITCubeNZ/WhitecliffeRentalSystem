{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Creates default headers for requests to token endpoint\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\n   * Http post to token endpoint\n   * @param tokenEndpoint\n   * @param queryString\n   * @param headers\n   * @param thumbprint\n   */\n  async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint) {\n    const response = await this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n      body: queryString,\n      headers: headers\n    });\n    if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n      // Telemetry data successfully logged by server, clear Telemetry cache\n      this.config.serverTelemetryManager.clearTelemetryCache();\n    }\n    return response;\n  }\n  /**\n   * Updates the authority object of the client. Endpoint discovery must be completed.\n   * @param updatedAuthority\n   */\n  updateAuthority(updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n    this.authority = updatedAuthority;\n  }\n  /**\n   * Creates query string for the /token request\n   * @param request\n   */\n  createTokenQueryParameters(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { BaseClient };","map":{"version":3,"names":["BaseClient","constructor","configuration","performanceClient","config","buildClientConfiguration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","NetworkManager","serverTelemetryManager","authority","authOptions","createTokenRequestHeaders","ccsCred","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","CcsCredentialType","HOME_ACCOUNT_ID","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","response","sendPostRequest","body","status","clearTelemetryCache","updateAuthority","updatedAuthority","discoveryComplete","ClientAuthError","createEndpointDiscoveryIncompleteError","createTokenQueryParameters","request","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString"],"sources":["../../src/client/BaseClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}