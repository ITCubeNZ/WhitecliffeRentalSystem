{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.mjs';\nimport { ClientAuthError } from '../../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\n *\n * Key:Value Schema:\n *\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\n * }\n */\nclass CredentialEntity {\n  /**\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n   */\n  generateAccountId() {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  }\n  /**\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n   */\n  generateCredentialId() {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  }\n  /**\n   * Generate target key component as per schema: <target>\n   */\n  generateTarget() {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  }\n  /**\n   * generates credential key\n   */\n  generateCredentialKey() {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  }\n  /**\n   * returns the type of the cache (in this case credential)\n   */\n  generateType() {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  }\n  /**\n   * generates credential key\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\n   */\n  static generateCredentialCacheKey(homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    const credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * generates Account Id for keys\n   * @param homeAccountId\n   * @param environment\n   */\n  static generateAccountIdForCacheKey(homeAccountId, environment) {\n    const accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * Generates Credential Id for keys\n   * @param credentialType\n   * @param realm\n   * @param clientId\n   * @param familyId\n   */\n  static generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId) {\n    const clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    const credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * Generate target key component as per schema: <target>\n   */\n  static generateTargetForCacheKey(scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  }\n  /**\n   * Generate requested claims key component as per schema: <requestedClaims>\n   */\n  static generateClaimsHashForCacheKey(requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  }\n  /**\n   * Generate scheme key componenet as per schema: <scheme>\n   */\n  static generateSchemeForCacheKey(tokenType) {\n    /*\n     * PoP Tokens and SSH certs include scheme in cache key\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  }\n}\nexport { CredentialEntity };","map":{"version":3,"names":["CredentialEntity","generateAccountId","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialId","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTarget","generateTargetForCacheKey","target","generateCredentialKey","generateCredentialCacheKey","tokenType","requestedClaimsHash","generateType","CredentialType","ID_TOKEN","CacheType","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","ClientAuthError","createUnexpectedCredentialTypeError","credentialKey","generateClaimsHashForCacheKey","generateSchemeForCacheKey","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","accountId","clientOrFamilyId","credentialId","Constants","EMPTY_STRING","scopes","AuthenticationScheme","BEARER"],"sources":["../../../src/cache/entities/CredentialEntity.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}