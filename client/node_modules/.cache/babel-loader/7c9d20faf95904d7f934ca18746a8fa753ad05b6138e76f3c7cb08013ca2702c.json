{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { CredentialEntity } from './CredentialEntity.mjs';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.mjs';\nimport { TimeUtils } from '../../utils/TimeUtils.mjs';\nimport { StringUtils } from '../../utils/StringUtils.mjs';\nimport { AuthToken } from '../../account/AuthToken.mjs';\nimport { ClientAuthError } from '../../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ACCESS_TOKEN Credential Type\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      cachedAt: Absolute device time when entry was created in the cache.\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\n *      keyId: used for POP and SSH tokenTypes\n *      tokenType: Type of the token issued. Usually \"Bearer\"\n * }\n */\nclass AccessTokenEntity extends CredentialEntity {\n  /**\n   * Create AccessTokenEntity\n   * @param homeAccountId\n   * @param environment\n   * @param accessToken\n   * @param clientId\n   * @param tenantId\n   * @param scopes\n   * @param expiresOn\n   * @param extExpiresOn\n   */\n  static createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    const atEntity = new AccessTokenEntity();\n    atEntity.homeAccountId = homeAccountId;\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n    atEntity.secret = accessToken;\n    const currentTime = TimeUtils.nowSeconds();\n    atEntity.cachedAt = currentTime.toString();\n    /*\n     * Token expiry time.\n     * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\n     */\n    atEntity.expiresOn = expiresOn.toString();\n    atEntity.extendedExpiresOn = extExpiresOn.toString();\n    if (refreshOn) {\n      atEntity.refreshOn = refreshOn.toString();\n    }\n    atEntity.environment = environment;\n    atEntity.clientId = clientId;\n    atEntity.realm = tenantId;\n    atEntity.target = scopes;\n    atEntity.userAssertionHash = userAssertionHash;\n    atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\n    if (requestedClaims) {\n      atEntity.requestedClaims = requestedClaims;\n      atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\n     * Create Access Token With Auth Scheme instead of regular access token\n     * Cast to lower to handle \"bearer\" from ADFS\n     */\n    if (atEntity.tokenType?.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) {\n      atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n      switch (atEntity.tokenType) {\n        case AuthenticationScheme.POP:\n          // Make sure keyId is present and add it to credential\n          const tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n          if (!tokenClaims?.cnf?.kid) {\n            throw ClientAuthError.createTokenClaimsRequiredError();\n          }\n          atEntity.keyId = tokenClaims.cnf.kid;\n          break;\n        case AuthenticationScheme.SSH:\n          atEntity.keyId = keyId;\n      }\n    }\n    return atEntity;\n  }\n  /**\n   * Validates an entity: checks for all expected params\n   * @param entity\n   */\n  static isAccessTokenEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n  }\n}\nexport { AccessTokenEntity };","map":{"version":3,"names":["AccessTokenEntity","CredentialEntity","createAccessTokenEntity","homeAccountId","environment","accessToken","clientId","tenantId","scopes","expiresOn","extExpiresOn","cryptoUtils","refreshOn","tokenType","userAssertionHash","keyId","requestedClaims","requestedClaimsHash","atEntity","credentialType","CredentialType","ACCESS_TOKEN","secret","currentTime","TimeUtils","nowSeconds","cachedAt","toString","extendedExpiresOn","realm","target","StringUtils","isEmpty","AuthenticationScheme","BEARER","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","POP","tokenClaims","AuthToken","extractTokenClaims","cnf","kid","ClientAuthError","createTokenClaimsRequiredError","SSH","isAccessTokenEntity","entity","hasOwnProperty"],"sources":["../../../src/cache/entities/AccessTokenEntity.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}