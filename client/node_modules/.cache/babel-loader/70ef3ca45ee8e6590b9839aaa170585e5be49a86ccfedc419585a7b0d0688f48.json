{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n  constructor() {\n    this.parameters = new Map();\n  }\n  /**\n   * add response_type = code\n   */\n  addResponseTypeCode() {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  }\n  /**\n   * add response_type = token id_token\n   */\n  addResponseTypeForTokenAndIdToken() {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n  }\n  /**\n   * add response_mode. defaults to query.\n   * @param responseMode\n   */\n  addResponseMode(responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  }\n  /**\n   * Add flag to indicate STS should attempt to use WAM if available\n   */\n  addNativeBroker() {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  }\n  /**\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n   * @param scopeSet\n   * @param addOidcScopes\n   */\n  addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n    // Always add openid to the scopes when adding OIDC scopes\n    if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n      defaultScopes.push(\"openid\");\n    }\n    const requestScopes = addOidcScopes ? [...(scopes || []), ...defaultScopes] : scopes || [];\n    const scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  }\n  /**\n   * add clientId\n   * @param clientId\n   */\n  addClientId(clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  }\n  /**\n   * add redirect_uri\n   * @param redirectUri\n   */\n  addRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add post logout redirectUri\n   * @param redirectUri\n   */\n  addPostLogoutRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add id_token_hint to logout request\n   * @param idTokenHint\n   */\n  addIdTokenHint(idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  }\n  /**\n   * add domain_hint\n   * @param domainHint\n   */\n  addDomainHint(domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  }\n  /**\n   * add login_hint\n   * @param loginHint\n   */\n  addLoginHint(loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\n   * @param loginHint\n   */\n  addCcsUpn(loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for account object\n   * @param loginHint\n   */\n  addCcsOid(clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n  }\n  /**\n   * add sid\n   * @param sid\n   */\n  addSid(sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  }\n  /**\n   * add claims\n   * @param claims\n   */\n  addClaims(claims, clientCapabilities) {\n    const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  }\n  /**\n   * add correlationId\n   * @param correlationId\n   */\n  addCorrelationId(correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  }\n  /**\n   * add library info query params\n   * @param libraryInfo\n   */\n  addLibraryInfo(libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  }\n  /**\n   * Add client telemetry parameters\n   * @param appTelemetry\n   */\n  addApplicationTelemetry(appTelemetry) {\n    if (appTelemetry?.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry?.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  }\n  /**\n   * add prompt\n   * @param prompt\n   */\n  addPrompt(prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n  }\n  /**\n   * add state\n   * @param state\n   */\n  addState(state) {\n    if (!StringUtils.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  }\n  /**\n   * add nonce\n   * @param nonce\n   */\n  addNonce(nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  }\n  /**\n   * add code_challenge and code_challenge_method\n   * - throw if either of them are not passed\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addAuthorizationCode(code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addDeviceCode(code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `refreshToken` passed by the user\n   * @param refreshToken\n   */\n  addRefreshToken(refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  }\n  /**\n   * add the `code_verifier` passed by the user to exchange for a token\n   * @param codeVerifier\n   */\n  addCodeVerifier(codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  }\n  /**\n   * add client_secret\n   * @param clientSecret\n   */\n  addClientSecret(clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  }\n  /**\n   * add clientAssertion for confidential client flows\n   * @param clientAssertion\n   */\n  addClientAssertion(clientAssertion) {\n    if (!StringUtils.isEmpty(clientAssertion)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  }\n  /**\n   * add clientAssertionType for confidential client flows\n   * @param clientAssertionType\n   */\n  addClientAssertionType(clientAssertionType) {\n    if (!StringUtils.isEmpty(clientAssertionType)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  }\n  /**\n   * add OBO assertion for confidential client flows\n   * @param clientAssertion\n   */\n  addOboAssertion(oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addRequestTokenUse(tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addGrantType(grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  }\n  /**\n   * add client info\n   *\n   */\n  addClientInfo() {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  }\n  /**\n   * add extraQueryParams\n   * @param eQParams\n   */\n  addExtraQueryParameters(eQParams) {\n    const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(key => {\n      this.parameters.set(key, eQParams[key]);\n    });\n  }\n  addClientCapabilitiesToClaims(claims, clientCapabilities) {\n    let mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  }\n  /**\n   * adds `username` for Password Grant flow\n   * @param username\n   */\n  addUsername(username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  }\n  /**\n   * adds `password` for Password Grant flow\n   * @param password\n   */\n  addPassword(password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  }\n  /**\n   * add pop_jwk to query params\n   * @param cnfString\n   */\n  addPopToken(cnfString) {\n    if (!StringUtils.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  }\n  /**\n   * add SSH JWK and key ID to query params\n   */\n  addSshJwk(sshJwkString) {\n    if (!StringUtils.isEmpty(sshJwkString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  }\n  /**\n   * add server telemetry fields\n   * @param serverTelemetryManager\n   */\n  addServerTelemetry(serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  }\n  /**\n   * Adds parameter that indicates to the server that throttling is supported\n   */\n  addThrottling() {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  }\n  /**\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n   */\n  addLogoutHint(logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  }\n  /**\n   * Utility to create a URL from the params map\n   */\n  createQueryString() {\n    const queryParameterArray = new Array();\n    this.parameters.forEach((value, key) => {\n      queryParameterArray.push(`${key}=${value}`);\n    });\n    return queryParameterArray.join(\"&\");\n  }\n}\nexport { RequestParameterBuilder };","map":{"version":3,"names":["RequestParameterBuilder","constructor","parameters","Map","addResponseTypeCode","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","addResponseTypeForTokenAndIdToken","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","ResponseMode","QUERY","addNativeBroker","NATIVE_BROKER","addScopes","scopes","addOidcScopes","defaultScopes","OIDC_DEFAULT_SCOPES","includes","push","requestScopes","scopeSet","ScopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","SSOTypes","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","HeaderNames","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","validatePrompt","PROMPT","addState","state","StringUtils","isEmpty","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","ClientConfigurationError","createInvalidCodeChallengeParamsError","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","CLIENT_INFO","addExtraQueryParameters","eQParams","sanitizedEQParams","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","PasswordGrantConstants","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","createQueryString","queryParameterArray","Array","value","join"],"sources":["../../src/request/RequestParameterBuilder.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}