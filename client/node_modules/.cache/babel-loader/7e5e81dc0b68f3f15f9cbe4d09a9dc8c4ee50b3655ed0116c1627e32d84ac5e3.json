{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { Separators, AADServerParamKeys, GrantType, AuthenticationScheme, PromptValue, HeaderNames } from '../utils/Constants.mjs';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from '../request/RequestValidator.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Oauth2.0 Authorization Code client\n * @internal\n */\nclass AuthorizationCodeClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    this.includeRedirectUri = true;\n    this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n  }\n  /**\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\n   * application. The URL target the /authorize endpoint of the authority configured in the\n   * application object.\n   *\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n   * acquireToken(AuthorizationCodeRequest)\n   * @param request\n   */\n  async getAuthCodeUrl(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n    const queryString = await this.createAuthCodeUrlQueryString(request);\n    return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n  }\n  /**\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n   * authorization_code_grant\n   * @param request\n   */\n  async acquireToken(request, authCodePayload) {\n    if (!request || !request.code) {\n      throw ClientAuthError.createTokenRequestCannotBeMadeError();\n    }\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n    const atsMeasurement = this.performanceClient?.startMeasurement(\n    // @ts-ignore\n    \"AuthCodeClientAcquireToken\", request.correlationId);\n    this.logger.info(\"in acquireToken call in auth-code client\");\n    const reqTimestamp = TimeUtils.nowSeconds();\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n    const response = await this.executeTokenRequest(this.authority, request);\n    // Retrieve requestId from response headers\n    const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n    const httpVerAuthority = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\n    if (httpVerAuthority) {\n      atsMeasurement?.add({\n        httpVerAuthority\n      });\n    }\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n    // Validate response. This function throws a server error if an error is returned by the server.\n    responseHandler.validateTokenResponse(response.body);\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n    return responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(result => {\n      atsMeasurement?.end({\n        success: true\n      });\n      return result;\n    }).catch(error => {\n      this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\n      atsMeasurement?.end({\n        errorCode: error.errorCode,\n        subErrorCode: error.subError,\n        success: false\n      });\n      throw error;\n    });\n  }\n  /**\n   * Handles the hash fragment response from public client code request. Returns a code response used by\n   * the client to exchange for a token in acquireToken.\n   * @param hashFragment\n   */\n  handleFragmentResponse(hashFragment, cachedState) {\n    // Handle responses.\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    const serverParams = UrlString.getDeserializedCodeResponse(this.config.authOptions.authority.options.OIDCOptions?.serverResponseType, hashFragment);\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return {\n      ...serverParams,\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    };\n  }\n  /**\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n   * Default behaviour is to redirect the user to `window.location.href`.\n   * @param authorityUri\n   */\n  getLogoutUri(logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    const queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  }\n  /**\n   * Executes POST request to token endpoint\n   * @param authority\n   * @param request\n   */\n  async executeTokenRequest(authority, request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n    const queryParametersString = this.createTokenQueryParameters(request);\n    const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n    const requestBody = await this.createTokenRequestBody(request);\n    let ccsCredential = undefined;\n    if (request.clientInfo) {\n      try {\n        const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n        ccsCredential = {\n          credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n          type: CcsCredentialType.HOME_ACCOUNT_ID\n        };\n      } catch (e) {\n        this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n      }\n    }\n    const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n    const thumbprint = {\n      clientId: this.config.authOptions.clientId,\n      authority: authority.canonicalAuthority,\n      scopes: request.scopes,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n  }\n  /**\n   * Generates a map for all the params to be sent to the service\n   * @param request\n   */\n  async createTokenRequestBody(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n    const parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] || this.config.authOptions.clientId);\n    /*\n     * For hybrid spa flow, there will be a code but no verifier\n     * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n     */\n    if (!this.includeRedirectUri) {\n      // Just validate\n      RequestValidator.validateRedirectUri(request.redirectUri);\n    } else {\n      // Validate and include redirect uri\n      parameterBuilder.addRedirectUri(request.redirectUri);\n    }\n    // Add scope array, parameter builder will add default scopes and dedupe\n    parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n    // add code: user set, not validated\n    parameterBuilder.addAuthorizationCode(request.code);\n    // Add library metadata\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    // add code_verifier if passed\n    if (request.codeVerifier) {\n      parameterBuilder.addCodeVerifier(request.codeVerifier);\n    }\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      const clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n    parameterBuilder.addClientInfo();\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n      this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n      const reqCnfData = await popTokenGenerator.generateCnf(request);\n      // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n      parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n    } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n      if (request.sshJwk) {\n        parameterBuilder.addSshJwk(request.sshJwk);\n      } else {\n        throw ClientConfigurationError.createMissingSshJwkError();\n      }\n    }\n    const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    let ccsCred = undefined;\n    if (request.clientInfo) {\n      try {\n        const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n        ccsCred = {\n          credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n          type: CcsCredentialType.HOME_ACCOUNT_ID\n        };\n      } catch (e) {\n        this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n      }\n    } else {\n      ccsCred = request.ccsCredential;\n    }\n    // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n    if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          parameterBuilder.addCcsUpn(ccsCred.credential);\n          break;\n      }\n    }\n    if (request.tokenBodyParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n    }\n    // Add hybrid spa parameters if not already provided\n    if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n      parameterBuilder.addExtraQueryParameters({\n        [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\n      });\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n   * @param request\n   */\n  async createAuthCodeUrlQueryString(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n    const parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(request.extraQueryParameters?.[AADServerParamKeys.CLIENT_ID] || this.config.authOptions.clientId);\n    const requestScopes = [...(request.scopes || []), ...(request.extraScopesToConsent || [])];\n    parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n    // validate the redirectUri (to be a non null value)\n    parameterBuilder.addRedirectUri(request.redirectUri);\n    // generate the correlationId if not set by the user and add\n    const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    // add response_mode. If not passed in it defaults to query.\n    parameterBuilder.addResponseMode(request.responseMode);\n    // add response_type = code\n    parameterBuilder.addResponseTypeCode();\n    // add library info parameters\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    if (!isOidcProtocolMode(this.config)) {\n      parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    }\n    // add client_info=1\n    parameterBuilder.addClientInfo();\n    if (request.codeChallenge && request.codeChallengeMethod) {\n      parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n    }\n    if (request.prompt) {\n      parameterBuilder.addPrompt(request.prompt);\n    }\n    if (request.domainHint) {\n      parameterBuilder.addDomainHint(request.domainHint);\n    }\n    // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n      // AAD will throw if prompt=select_account is passed with an account hint\n      if (request.sid && request.prompt === PromptValue.NONE) {\n        // SessionID is only used in silent calls\n        this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n        parameterBuilder.addSid(request.sid);\n      } else if (request.account) {\n        const accountSid = this.extractAccountSid(request.account);\n        const accountLoginHintClaim = this.extractLoginHint(request.account);\n        // If login_hint claim is present, use it over sid/username\n        if (accountLoginHintClaim) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n          parameterBuilder.addLoginHint(accountLoginHintClaim);\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n          }\n        } else if (accountSid && request.prompt === PromptValue.NONE) {\n          /*\n           * If account and loginHint are provided, we will check account first for sid before adding loginHint\n           * SessionId is only used in silent calls\n           */\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n          parameterBuilder.addSid(accountSid);\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n          }\n        } else if (request.loginHint) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n          parameterBuilder.addLoginHint(request.loginHint);\n          parameterBuilder.addCcsUpn(request.loginHint);\n        } else if (request.account.username) {\n          // Fallback to account username if provided\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n          parameterBuilder.addLoginHint(request.account.username);\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n          }\n        }\n      } else if (request.loginHint) {\n        this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n        parameterBuilder.addLoginHint(request.loginHint);\n        parameterBuilder.addCcsUpn(request.loginHint);\n      }\n    } else {\n      this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n    }\n    if (request.nonce) {\n      parameterBuilder.addNonce(request.nonce);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    if (request.nativeBroker) {\n      // signal ests that this is a WAM call\n      parameterBuilder.addNativeBroker();\n      // pass the req_cnf for POP\n      if (request.authenticationScheme === AuthenticationScheme.POP) {\n        const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n        // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n        const reqCnfData = await popTokenGenerator.generateCnf(request);\n        parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n      }\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\n   * This API validates the `EndSessionRequest` and creates a URL\n   * @param request\n   */\n  createLogoutUrlQueryString(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n   * @param account\n   */\n  extractAccountSid(account) {\n    return account.idTokenClaims?.sid || null;\n  }\n  extractLoginHint(account) {\n    return account.idTokenClaims?.login_hint || null;\n  }\n}\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["AuthorizationCodeClient","BaseClient","constructor","configuration","performanceClient","includeRedirectUri","oidcDefaultScopes","config","authOptions","authority","options","OIDCOptions","defaultScopes","getAuthCodeUrl","request","addQueueMeasurement","PerformanceEvents","GetAuthCodeUrl","correlationId","setPreQueueTime","AuthClientCreateQueryString","queryString","createAuthCodeUrlQueryString","UrlString","appendQueryString","authorizationEndpoint","acquireToken","authCodePayload","code","ClientAuthError","createTokenRequestCannotBeMadeError","AuthClientAcquireToken","atsMeasurement","startMeasurement","logger","info","reqTimestamp","TimeUtils","nowSeconds","AuthClientExecuteTokenRequest","response","executeTokenRequest","requestId","headers","HeaderNames","X_MS_REQUEST_ID","httpVerAuthority","X_MS_HTTP_VERSION","add","responseHandler","ResponseHandler","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","HandleServerTokenResponse","handleServerTokenResponse","undefined","then","result","end","success","catch","error","verbose","errorCode","subErrorCode","subError","handleFragmentResponse","hashFragment","cachedState","serverParams","getDeserializedCodeResponse","serverResponseType","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","AuthClientCreateTokenRequestBody","queryParametersString","createTokenQueryParameters","endpoint","tokenEndpoint","requestBody","createTokenRequestBody","ccsCredential","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","tokenBodyParameters","AADServerParamKeys","CLIENT_ID","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","isOidcProtocolMode","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","PopTokenGenerateCnf","reqCnfData","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","addExtraQueryParameters","enableSpaAuthorizationCode","RETURN_SPA_CODE","createQueryString","extraQueryParameters","requestScopes","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","isEmpty","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint"],"sources":["../../src/client/AuthorizationCodeClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}