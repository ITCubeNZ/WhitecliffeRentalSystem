{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { AccountEntity, PerformanceEvents, AuthenticationScheme, ClientConfigurationError, StringUtils, UrlString, ServerTelemetryManager, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass BaseInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n  async clearCacheOnLogout(account) {\n    if (account) {\n      if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n        this.logger.verbose(\"Setting active account to null\");\n        this.browserStorage.setActiveAccount(null);\n      }\n      // Clear given account.\n      try {\n        await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n        this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n      } catch (error) {\n        this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n      }\n    } else {\n      try {\n        this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n        // Clear all accounts and tokens\n        await this.browserStorage.clear();\n        // Clear any stray keys from IndexedDB\n        await this.browserCrypto.clearKeystore();\n      } catch (e) {\n        this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n      }\n    }\n  }\n  /**\r\n   * Initializer function for all request APIs\r\n   * @param request\r\n   */\n  async initializeBaseRequest(request, account) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n    this.logger.verbose(\"Initializing BaseAuthRequest\");\n    const authority = request.authority || this.config.auth.authority;\n    if (account) {\n      await this.validateRequestAuthority(authority, account);\n    }\n    const scopes = [...(request && request.scopes || [])];\n    const validatedRequest = {\n      ...request,\n      correlationId: this.correlationId,\n      authority,\n      scopes\n    };\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n      validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n      this.logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n    } else {\n      if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n        if (!request.sshJwk) {\n          throw ClientConfigurationError.createMissingSshJwkError();\n        }\n        if (!request.sshKid) {\n          throw ClientConfigurationError.createMissingSshKidError();\n        }\n      }\n      this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n    }\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (this.config.cache.claimsBasedCachingEnabled && request.claims &&\n    // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n    !StringUtils.isEmptyObj(request.claims)) {\n      validatedRequest.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\n    }\n    return validatedRequest;\n  }\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n  getRedirectUri(requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  }\n  /*\r\n   * If authority provided in the request does not match environment/authority specified\r\n   * in the account or MSAL config, we throw an error.\r\n   */\n  async validateRequestAuthority(authority, account) {\n    const discoveredAuthority = await this.getDiscoveredAuthority(authority);\n    if (!discoveredAuthority.isAlias(account.environment)) {\n      throw ClientConfigurationError.createAuthorityMismatchError();\n    }\n  }\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n  initializeServerTelemetryManager(apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    const telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  }\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  async getDiscoveredAuthority(requestAuthority) {\n    this.logger.verbose(\"getDiscoveredAuthority called\");\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      OIDCOptions: this.config.auth.OIDCOptions,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata\n    };\n    if (requestAuthority) {\n      this.logger.verbose(\"Creating discovered authority with request authority\");\n      return await AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\n    }\n    this.logger.verbose(\"Creating discovered authority with configured authority\");\n    return await AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\n  }\n}\nexport { BaseInteractionClient };","map":{"version":3,"names":["BaseInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeMessageHandler","correlationId","browserStorage","networkClient","system","createNewGuid","clone","BrowserConstants","MSAL_SKU","version","clearCacheOnLogout","account","AccountEntity","accountInfoIsEqual","getActiveAccount","verbose","setActiveAccount","removeAccount","generateAccountCacheKey","error","clear","clearKeystore","e","initializeBaseRequest","request","addQueueMeasurement","PerformanceEvents","InitializeBaseRequest","authority","auth","validateRequestAuthority","scopes","validatedRequest","authenticationScheme","AuthenticationScheme","BEARER","SSH","sshJwk","ClientConfigurationError","createMissingSshJwkError","sshKid","createMissingSshKidError","cache","claimsBasedCachingEnabled","claims","StringUtils","isEmptyObj","requestedClaimsHash","hashString","getRedirectUri","requestRedirectUri","redirectUri","BrowserUtils","getCurrentUri","UrlString","getAbsoluteUrl","discoveredAuthority","getDiscoveredAuthority","isAlias","environment","createAuthorityMismatchError","initializeServerTelemetryManager","apiId","forceRefresh","telemetryPayload","clientId","wrapperSKU","getWrapperMetadata","wrapperVer","ServerTelemetryManager","requestAuthority","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","AuthorityFactory","createDiscoveredInstance"],"sources":["../../src/interaction_client/BaseInteractionClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}