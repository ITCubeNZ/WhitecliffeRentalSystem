{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { AuthToken, AccountEntity, CacheRecord, Authority, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Token cache manager\r\n */\nclass TokenCache {\n  constructor(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  }\n  // Move getAllAccounts here and cache utility APIs\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n  loadExternalTokens(request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n    const idToken = new AuthToken(response.id_token, this.cryptoObj);\n    let cacheRecord;\n    let authority;\n    let cacheRecordAccount;\n    if (request.account) {\n      cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      const authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\n      // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        cacheRecordAccount = this.loadAccount(idToken, authority, options.clientInfo);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        cacheRecordAccount = this.loadAccount(idToken, authority, response.client_info);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, cacheRecordAccount, authority);\n  }\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n  loadAccount(idToken, authority, clientInfo, requestHomeAccountId) {\n    let homeAccountId;\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authority.authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idToken.claims);\n    }\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n    const accountEntity = AccountEntity.createAccount({\n      homeAccountId,\n      idTokenClaims: idToken.claims,\n      clientInfo,\n      environment: authority.hostnameAndPort\n    }, authority);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  }\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n  loadIdToken(idToken, homeAccountId, environment, tenantId) {\n    const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  }\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n  loadAccessToken(request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n    const scopes = new ScopeSet(request.scopes).printScopes();\n    const expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    const extendedExpiresOn = options.extendedExpiresOn;\n    const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  }\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n  loadRefreshToken(request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n    const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  }\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n  generateAuthenticationResult(request, idTokenObj, cacheRecord, accountEntity, authority) {\n    let accessToken = Constants.EMPTY_STRING;\n    let responseScopes = [];\n    let expiresOn = null;\n    let extExpiresOn;\n    if (cacheRecord?.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n    const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: accountEntity.getAccountInfo(),\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\n      msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  }\n}\nexport { TokenCache };","map":{"version":3,"names":["TokenCache","constructor","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","loadExternalTokens","request","response","options","info","id_token","BrowserAuthError","createUnableToLoadTokenError","idToken","AuthToken","cacheRecord","authority","cacheRecordAccount","account","AccountEntity","createFromAccountInfo","CacheRecord","loadIdToken","homeAccountId","environment","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","Authority","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","loadAccount","hostnameAndPort","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","authorityType","undefined","generateHomeAccountId","claims","accountEntity","createAccount","idTokenClaims","verbose","setAccount","idTokenEntity","IdTokenEntity","createIdTokenEntity","rawToken","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","ScopeSet","printScopes","expiresOn","Date","getTime","accessTokenEntity","AccessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","RefreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","idTokenObj","accessToken","Constants","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","fromCache","correlationId","requestId","familyId","tokenType","state","cloudGraphHostName","msGraphHost","code","fromNativeBroker"],"sources":["../../src/cache/TokenCache.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}