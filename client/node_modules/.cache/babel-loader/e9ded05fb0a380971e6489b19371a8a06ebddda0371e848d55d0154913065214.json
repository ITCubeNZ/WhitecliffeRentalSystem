{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { CacheManager, CredentialType, RefreshTokenEntity, AccessTokenEntity, IdTokenEntity, AccountEntity, ClientAuthError, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, Constants, PersistentCacheKeys, ThrottlingEntity, StringUtils, ProtocolUtils, IdToken, CacheRecord, CcsCredentialType, DEFAULT_CRYPTO_IMPLEMENTATION } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserCacheLocation, StaticCacheKeys, InMemoryCacheKeys, TemporaryCacheKeys } from '../utils/BrowserConstants.mjs';\nimport { BrowserStorage } from './BrowserStorage.mjs';\nimport { MemoryStorage } from './MemoryStorage.mjs';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nclass BrowserCacheManager extends CacheManager {\n  constructor(clientId, cacheConfig, cryptoImpl, logger) {\n    super(clientId, cryptoImpl, logger);\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    this.cacheConfig = cacheConfig;\n    this.logger = logger;\n    this.internalStorage = new MemoryStorage();\n    this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n    this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.temporaryCacheLocation, this.cacheConfig.cacheLocation);\n    // Migrate cache entries from older versions of MSAL.\n    if (cacheConfig.cacheMigrationEnabled) {\n      this.migrateCacheEntries();\n      this.createKeyMaps();\n    }\n  }\n  /**\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n   * @param cacheLocation\n   */\n  setupBrowserStorage(cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n    }\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  }\n  /**\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\n   * @param temporaryCacheLocation\n   * @param cacheLocation\n   */\n  setupTemporaryCacheStorage(temporaryCacheLocation, cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(temporaryCacheLocation || BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  }\n  /**\n   * Migrate all old cache entries to new schema. No rollback supported.\n   * @param storeAuthStateInCookie\n   */\n  migrateCacheEntries() {\n    const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n    const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n    const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n    const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n    const idTokenValue = this.browserStorage.getItem(idTokenKey);\n    const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    const errorValue = this.browserStorage.getItem(errorKey);\n    const errorDescValue = this.browserStorage.getItem(errorDescKey);\n    const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach((cacheKey, index) => this.migrateCacheEntry(cacheKey, values[index]));\n  }\n  /**\n   * Utility function to help with migration.\n   * @param newKey\n   * @param value\n   * @param storeAuthStateInCookie\n   */\n  migrateCacheEntry(newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  }\n  /**\n   * Searches all cache entries for MSAL accounts and creates the account key map\n   * This is used to migrate users from older versions of MSAL which did not create the map.\n   * @returns\n   */\n  createKeyMaps() {\n    this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n    const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    const tokenKeys = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n    if (accountKeys && tokenKeys) {\n      this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\n      // Key maps already exist, no need to iterate through cache\n      return;\n    }\n    const allKeys = this.browserStorage.getKeys();\n    allKeys.forEach(key => {\n      if (this.isCredentialKey(key)) {\n        // Get item, parse, validate and write key to map\n        const value = this.getItem(key);\n        if (value) {\n          const credObj = this.validateAndParseJson(value);\n          if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n            switch (credObj[\"credentialType\"]) {\n              case CredentialType.ID_TOKEN:\n                if (IdTokenEntity.isIdTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\n                  const idTokenEntity = CacheManager.toObject(new IdTokenEntity(), credObj);\n                  const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.ID_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\n                }\n                break;\n              case CredentialType.ACCESS_TOKEN:\n              case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                if (AccessTokenEntity.isAccessTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\n                  const accessTokenEntity = CacheManager.toObject(new AccessTokenEntity(), credObj);\n                  const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\n                }\n                break;\n              case CredentialType.REFRESH_TOKEN:\n                if (RefreshTokenEntity.isRefreshTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\n                  const refreshTokenEntity = CacheManager.toObject(new RefreshTokenEntity(), credObj);\n                  const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\n                }\n                break;\n              // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n            }\n          }\n        }\n      }\n\n      if (this.isAccountKey(key)) {\n        const value = this.getItem(key);\n        if (value) {\n          const accountObj = this.validateAndParseJson(value);\n          if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\n            this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n            this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\n            this.addAccountKeyToMap(key);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\n   * @param input\n   */\n  validateAndParseJson(jsonValue) {\n    try {\n      const parsedJson = JSON.parse(jsonValue);\n      /**\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n       *\n       */\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  }\n  /**\n   * fetches the entry from the browser storage based off the key\n   * @param key\n   */\n  getItem(key) {\n    return this.browserStorage.getItem(key);\n  }\n  /**\n   * sets the entry in the browser storage\n   * @param key\n   * @param value\n   */\n  setItem(key, value) {\n    this.browserStorage.setItem(key, value);\n  }\n  /**\n   * fetch the account entity from the platform cache\n   * @param accountKey\n   */\n  getAccount(accountKey) {\n    this.logger.trace(\"BrowserCacheManager.getAccount called\");\n    const account = this.getItem(accountKey);\n    if (!account) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    const parsedAccount = this.validateAndParseJson(account);\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  }\n  /**\n   * set account entity in the platform cache\n   * @param account\n   */\n  setAccount(account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    const key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n    this.addAccountKeyToMap(key);\n  }\n  /**\n   * Returns the array of account keys currently cached\n   * @returns\n   */\n  getAccountKeys() {\n    this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n    const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    if (accountKeys) {\n      return JSON.parse(accountKeys);\n    }\n    this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n    return [];\n  }\n  /**\n   * Add a new account to the key map\n   * @param key\n   */\n  addAccountKeyToMap(key) {\n    this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n    this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\n    const accountKeys = this.getAccountKeys();\n    if (accountKeys.indexOf(key) === -1) {\n      // Only add key if it does not already exist in the map\n      accountKeys.push(key);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n    }\n  }\n  /**\n   * Remove an account from the key map\n   * @param key\n   */\n  removeAccountKeyFromMap(key) {\n    this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n    this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\n    const accountKeys = this.getAccountKeys();\n    const removalIndex = accountKeys.indexOf(key);\n    if (removalIndex > -1) {\n      accountKeys.splice(removalIndex, 1);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n    } else {\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n    }\n  }\n  /**\n   * Extends inherited removeAccount function to include removal of the account key from the map\n   * @param key\n   */\n  async removeAccount(key) {\n    super.removeAccount(key);\n    this.removeAccountKeyFromMap(key);\n  }\n  /**\n   * Removes given idToken from the cache and from the key map\n   * @param key\n   */\n  removeIdToken(key) {\n    super.removeIdToken(key);\n    this.removeTokenKey(key, CredentialType.ID_TOKEN);\n  }\n  /**\n   * Removes given accessToken from the cache and from the key map\n   * @param key\n   */\n  async removeAccessToken(key) {\n    super.removeAccessToken(key);\n    this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n  }\n  /**\n   * Removes given refreshToken from the cache and from the key map\n   * @param key\n   */\n  removeRefreshToken(key) {\n    super.removeRefreshToken(key);\n    this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n  }\n  /**\n   * Gets the keys for the cached tokens associated with this clientId\n   * @returns\n   */\n  getTokenKeys() {\n    this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n    const item = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n    if (item) {\n      const tokenKeys = this.validateAndParseJson(item);\n      if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n        return tokenKeys;\n      } else {\n        this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n      }\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n    }\n    return {\n      idToken: [],\n      accessToken: [],\n      refreshToken: []\n    };\n  }\n  /**\n   * Adds the given key to the token key map\n   * @param key\n   * @param type\n   */\n  addTokenKey(key, type) {\n    this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n    const tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        if (tokenKeys.idToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n          tokenKeys.idToken.push(key);\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        if (tokenKeys.accessToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n          tokenKeys.accessToken.push(key);\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        if (tokenKeys.refreshToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n          tokenKeys.refreshToken.push(key);\n        }\n        break;\n      default:\n        this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n        ClientAuthError.createUnexpectedCredentialTypeError();\n    }\n    this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n  }\n  /**\n   * Removes the given key from the token key map\n   * @param key\n   * @param type\n   */\n  removeTokenKey(key, type) {\n    this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n    const tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\n        const idRemoval = tokenKeys.idToken.indexOf(key);\n        if (idRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n          tokenKeys.idToken.splice(idRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\n        const accessRemoval = tokenKeys.accessToken.indexOf(key);\n        if (accessRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n          tokenKeys.accessToken.splice(accessRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\n        const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n        if (refreshRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n          tokenKeys.refreshToken.splice(refreshRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      default:\n        this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n        ClientAuthError.createUnexpectedCredentialTypeError();\n    }\n    this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n  }\n  /**\n   * generates idToken entity from a string\n   * @param idTokenKey\n   */\n  getIdTokenCredential(idTokenKey) {\n    const value = this.getItem(idTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    const parsedIdToken = this.validateAndParseJson(value);\n    if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n  }\n  /**\n   * set IdToken credential to the platform cache\n   * @param idToken\n   */\n  setIdTokenCredential(idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    const idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n    this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n  }\n  /**\n   * generates accessToken entity from a string\n   * @param key\n   */\n  getAccessTokenCredential(accessTokenKey) {\n    const value = this.getItem(accessTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    const parsedAccessToken = this.validateAndParseJson(value);\n    if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n  }\n  /**\n   * set accessToken credential to the platform cache\n   * @param accessToken\n   */\n  setAccessTokenCredential(accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    const accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n  }\n  /**\n   * generates refreshToken entity from a string\n   * @param refreshTokenKey\n   */\n  getRefreshTokenCredential(refreshTokenKey) {\n    const value = this.getItem(refreshTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    const parsedRefreshToken = this.validateAndParseJson(value);\n    if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n  }\n  /**\n   * set refreshToken credential to the platform cache\n   * @param refreshToken\n   */\n  setRefreshTokenCredential(refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    const refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n  }\n  /**\n   * fetch appMetadata entity from the platform cache\n   * @param appMetadataKey\n   */\n  getAppMetadata(appMetadataKey) {\n    const value = this.getItem(appMetadataKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n  }\n  /**\n   * set appMetadata entity to the platform cache\n   * @param appMetadata\n   */\n  setAppMetadata(appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    const appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  }\n  /**\n   * fetch server telemetry entity from the platform cache\n   * @param serverTelemetryKey\n   */\n  getServerTelemetry(serverTelemetryKey) {\n    const value = this.getItem(serverTelemetryKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n  }\n  /**\n   * set server telemetry entity to the platform cache\n   * @param serverTelemetryKey\n   * @param serverTelemetry\n   */\n  setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  }\n  /**\n   *\n   */\n  getAuthorityMetadata(key) {\n    const value = this.internalStorage.getItem(key);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n    }\n    return null;\n  }\n  /**\n   *\n   */\n  getAuthorityMetadataKeys() {\n    const allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(key => {\n      return this.isAuthorityMetadata(key);\n    });\n  }\n  /**\n   * Sets wrapper metadata in memory\n   * @param wrapperSKU\n   * @param wrapperVersion\n   */\n  setWrapperMetadata(wrapperSKU, wrapperVersion) {\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n  }\n  /**\n   * Returns wrapper metadata from in-memory storage\n   */\n  getWrapperMetadata() {\n    const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n    const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n    return [sku, version];\n  }\n  /**\n   *\n   * @param entity\n   */\n  setAuthorityMetadata(key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  }\n  /**\n   * Gets the active account\n   */\n  getActiveAccount() {\n    const activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n    if (!activeAccountValueFilters) {\n      // if new active account cache type isn't found, it's an old version, so look for that instead\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n      const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n      const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n      if (!activeAccountValueLocal) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n      }\n      const activeAccount = this.getAccountInfoByFilter({\n        localAccountId: activeAccountValueLocal\n      })[0] || null;\n      if (activeAccount) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n        this.setActiveAccount(activeAccount);\n        return activeAccount;\n      }\n      return null;\n    }\n    const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n    if (activeAccountValueObj) {\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n      return this.getAccountInfoByFilter({\n        homeAccountId: activeAccountValueObj.homeAccountId,\n        localAccountId: activeAccountValueObj.localAccountId\n      })[0] || null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n    return null;\n  }\n  /**\n   * Sets the active account's localAccountId in cache\n   * @param account\n   */\n  setActiveAccount(account) {\n    const activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      const activeAccountValue = {\n        homeAccountId: account.homeAccountId,\n        localAccountId: account.localAccountId\n      };\n      this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n      this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountKey);\n      this.browserStorage.removeItem(activeAccountKeyLocal);\n    }\n  }\n  /**\n   * Gets a list of accounts that match all of the filters provided\n   * @param account\n   */\n  getAccountInfoByFilter(accountFilter) {\n    const allAccounts = this.getAllAccounts();\n    this.logger.trace(`BrowserCacheManager.getAccountInfoByFilter: total ${allAccounts.length} accounts found`);\n    return allAccounts.filter(accountObj => {\n      if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n      if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n        return false;\n      }\n      if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n        return false;\n      }\n      if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n        return false;\n      }\n      if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n        return false;\n      }\n      return true;\n    });\n  }\n  /**\n   * Checks the cache for accounts matching loginHint or SID\n   * @param loginHint\n   * @param sid\n   */\n  getAccountInfoByHints(loginHint, sid) {\n    const matchingAccounts = this.getAllAccounts().filter(accountInfo => {\n      if (sid) {\n        const accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\n        return sid === accountSid;\n      }\n      if (loginHint) {\n        return loginHint === accountInfo.username;\n      }\n      return false;\n    });\n    if (matchingAccounts.length === 1) {\n      return matchingAccounts[0];\n    } else if (matchingAccounts.length > 1) {\n      throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n    }\n    return null;\n  }\n  /**\n   * fetch throttling entity from the platform cache\n   * @param throttlingCacheKey\n   */\n  getThrottlingCache(throttlingCacheKey) {\n    const value = this.getItem(throttlingCacheKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    const parsedThrottlingCache = this.validateAndParseJson(value);\n    if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n  }\n  /**\n   * set throttling entity to the platform cache\n   * @param throttlingCacheKey\n   * @param throttlingCache\n   */\n  setThrottlingCache(throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  }\n  /**\n   * Gets cache item with given key.\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n   * @param key\n   */\n  getTemporaryCache(cacheKey, generateKey) {\n    const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      const itemCookie = this.getItemCookie(key);\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n    const value = this.temporaryCacheStorage.getItem(key);\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        const item = this.browserStorage.getItem(key);\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  }\n  /**\n   * Sets the cache item with the key and value given.\n   * Stores in cookie if storeAuthStateInCookie is set to true.\n   * This can cause cookie overflow if used incorrectly.\n   * @param key\n   * @param value\n   */\n  setTemporaryCache(cacheKey, value, generateKey) {\n    const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  }\n  /**\n   * Removes the cache item with the given key.\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n   * @param key\n   */\n  removeItem(key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n  }\n  /**\n   * Checks whether key is in cache.\n   * @param key\n   */\n  containsKey(key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  }\n  /**\n   * Gets all keys in window.\n   */\n  getKeys() {\n    return [...this.browserStorage.getKeys(), ...this.temporaryCacheStorage.getKeys()];\n  }\n  /**\n   * Clears all cache entries created by MSAL.\n   */\n  async clear() {\n    // Removes all accounts and their credentials\n    await this.removeAllAccounts();\n    this.removeAppMetadata();\n    // Removes all remaining MSAL cache items\n    this.getKeys().forEach(cacheKey => {\n      // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n      if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1)) {\n        this.removeItem(cacheKey);\n      }\n    });\n    this.internalStorage.clear();\n  }\n  /**\n   * Add value to cookies\n   * @param cookieName\n   * @param cookieValue\n   * @param expires\n   */\n  setItemCookie(cookieName, cookieValue, expires) {\n    let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;SameSite=Lax;`;\n    if (expires) {\n      const expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += `expires=${expireTime};`;\n    }\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n    document.cookie = cookieStr;\n  }\n  /**\n   * Get one item by key from cookies\n   * @param cookieName\n   */\n  getItemCookie(cookieName) {\n    const name = `${encodeURIComponent(cookieName)}=`;\n    const cookieList = document.cookie.split(\";\");\n    for (let i = 0; i < cookieList.length; i++) {\n      let cookie = cookieList[i];\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n   */\n  clearMsalCookies() {\n    const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n    const cookieList = document.cookie.split(\";\");\n    cookieList.forEach(cookie => {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        const cookieKey = cookie.split(\"=\")[0];\n        this.clearItemCookie(cookieKey);\n      }\n    });\n  }\n  /**\n   * Clear an item in the cookies by key\n   * @param cookieName\n   */\n  clearItemCookie(cookieName) {\n    this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n  }\n  /**\n   * Get cookie expiration time\n   * @param cookieLifeDays\n   */\n  getCookieExpirationTime(cookieLifeDays) {\n    const today = new Date();\n    const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  }\n  /**\n   * Gets the cache object referenced by the browser\n   */\n  getCache() {\n    return this.browserStorage;\n  }\n  /**\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\n   */\n  setCache() {\n    // sets nothing\n  }\n  /**\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n   * @param key\n   * @param addInstanceId\n   */\n  generateCacheKey(key) {\n    const generatedKey = this.validateAndParseJson(key);\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n      return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n    }\n    return JSON.stringify(key);\n  }\n  /**\n   * Create authorityKey to cache authority\n   * @param state\n   */\n  generateAuthorityKey(stateString) {\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n  }\n  /**\n   * Create Nonce key to cache nonce\n   * @param state\n   */\n  generateNonceKey(stateString) {\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n  }\n  /**\n   * Creates full cache key for the request state\n   * @param stateString State string for the request\n   */\n  generateStateKey(stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n  }\n  /**\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n   */\n  getCachedAuthority(cachedState) {\n    const stateCacheKey = this.generateStateKey(cachedState);\n    const state = this.getTemporaryCache(stateCacheKey);\n    if (!state) {\n      return null;\n    }\n    const authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  }\n  /**\n   * Updates account, authority, and state in cache\n   * @param serverAuthenticationRequest\n   * @param account\n   */\n  updateCacheEntries(state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n    // Cache the request state\n    const stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false);\n    // Cache the nonce\n    const nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false);\n    // Cache authorityKey\n    const authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n    if (account) {\n      const ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (!StringUtils.isEmpty(loginHint)) {\n      const ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  }\n  /**\n   * Reset all temporary cache items\n   * @param state\n   */\n  resetRequestCache(state) {\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n    // check state and remove associated cache items\n    if (!StringUtils.isEmpty(state)) {\n      this.getKeys().forEach(key => {\n        if (key.indexOf(state) !== -1) {\n          this.removeItem(key);\n        }\n      });\n    }\n    // delete generic interactive request parameters\n    if (state) {\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n    this.setInteractionInProgress(false);\n  }\n  /**\n   * Removes temporary cache for the provided state\n   * @param stateString\n   */\n  cleanRequestByState(stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n    // Interaction is completed - remove interaction status.\n    if (stateString) {\n      const stateKey = this.generateStateKey(stateString);\n      const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n      this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n    }\n    this.clearMsalCookies();\n  }\n  /**\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n   * @param interactionType\n   */\n  cleanRequestByInteractionType(interactionType) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n    // Loop through all keys to find state key\n    this.getKeys().forEach(key => {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      }\n      // Retrieve state value, return if not a valid value\n      const stateValue = this.temporaryCacheStorage.getItem(key);\n      if (!stateValue) {\n        return;\n      }\n      // Extract state and ensure it matches given InteractionType, then clean request cache\n      const parsedState = BrowserProtocolUtils.extractBrowserRequestState(this.cryptoImpl, stateValue);\n      if (parsedState && parsedState.interactionType === interactionType) {\n        this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n        this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n    this.setInteractionInProgress(false);\n  }\n  cacheCodeRequest(authCodeRequest, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    const encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  }\n  /**\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n   */\n  getCachedRequest(state, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n    // Get token request from cache and parse as TokenExchangeParameters.\n    const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n    if (!encodedTokenRequest) {\n      throw BrowserAuthError.createNoTokenRequestCacheError();\n    }\n    const parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\n    if (!parsedRequest) {\n      throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    // Get cached authority and use if no authority is cached with request.\n    if (StringUtils.isEmpty(parsedRequest.authority)) {\n      const authorityCacheKey = this.generateAuthorityKey(state);\n      const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n      if (!cachedAuthority) {\n        throw BrowserAuthError.createNoCachedAuthorityError();\n      }\n      parsedRequest.authority = cachedAuthority;\n    }\n    return parsedRequest;\n  }\n  /**\n   * Gets cached native request for redirect flows\n   */\n  getCachedNativeRequest() {\n    this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n    const cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n    if (!cachedRequest) {\n      this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n      return null;\n    }\n    const parsedRequest = this.validateAndParseJson(cachedRequest);\n    if (!parsedRequest) {\n      this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n      return null;\n    }\n    return parsedRequest;\n  }\n  isInteractionInProgress(matchClientId) {\n    const clientId = this.getInteractionInProgress();\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  }\n  getInteractionInProgress() {\n    const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n    return this.getTemporaryCache(key, false);\n  }\n  setInteractionInProgress(inProgress) {\n    // Ensure we don't overwrite interaction in progress for a different clientId\n    const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n    if (inProgress) {\n      if (this.getInteractionInProgress()) {\n        throw BrowserAuthError.createInteractionInProgressError();\n      } else {\n        // No interaction is in progress\n        this.setTemporaryCache(key, this.clientId, false);\n      }\n    } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n      this.removeItem(key);\n    }\n  }\n  /**\n   * Returns username retrieved from ADAL or MSAL v1 idToken\n   */\n  getLegacyLoginHint() {\n    // Only check for adal/msal token if no SSO params are being used\n    const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n    if (adalIdTokenString) {\n      this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n      this.logger.verbose(\"Cached ADAL id token retrieved.\");\n    }\n    // Check for cached MSAL v1 id token\n    const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n    if (msalIdTokenString) {\n      this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n      this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n    }\n    const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n    if (cachedIdTokenString) {\n      const cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\n      if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n        return cachedIdToken.claims.preferred_username;\n      } else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n        return cachedIdToken.claims.upn;\n      } else {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n      }\n    }\n    return null;\n  }\n  /**\n   * Updates a credential's cache key if the current cache key is outdated\n   */\n  updateCredentialCacheKey(currentCacheKey, credential) {\n    const updatedCacheKey = credential.generateCredentialKey();\n    if (currentCacheKey !== updatedCacheKey) {\n      const cacheItem = this.getItem(currentCacheKey);\n      if (cacheItem) {\n        this.removeItem(currentCacheKey);\n        this.setItem(updatedCacheKey, cacheItem);\n        this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n        return updatedCacheKey;\n      } else {\n        this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n      }\n    }\n    return currentCacheKey;\n  }\n  /**\n   * Returns application id as redirect context during AcquireTokenRedirect flow.\n   */\n  getRedirectRequestContext() {\n    return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);\n  }\n  /**\n   * Sets application id as the redirect context during AcquireTokenRedirect flow.\n   * @param value\n   */\n  setRedirectRequestContext(value) {\n    this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);\n  }\n  /**\n   * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\n   * @param result\n   * @param request\n   */\n  async hydrateCache(result, request) {\n    const idTokenEntity = IdTokenEntity.createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);\n    let claimsHash;\n    if (request.claims) {\n      claimsHash = await this.cryptoImpl.hashString(request.claims);\n    }\n    const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(\" \"), result.expiresOn?.getTime() || 0, result.extExpiresOn?.getTime() || 0, this.cryptoImpl, undefined,\n    // refreshOn\n    result.tokenType, undefined,\n    // userAssertionHash\n    request.sshKid, request.claims, claimsHash);\n    const cacheRecord = new CacheRecord(undefined, idTokenEntity, accessTokenEntity);\n    return this.saveCacheRecord(cacheRecord);\n  }\n}\nconst DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger) => {\n  const cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false,\n    cacheMigrationEnabled: false,\n    claimsBasedCachingEnabled: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"names":["BrowserCacheManager","CacheManager","constructor","clientId","cacheConfig","cryptoImpl","logger","COOKIE_LIFE_MULTIPLIER","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","temporaryCacheLocation","cacheMigrationEnabled","migrateCacheEntries","createKeyMaps","BrowserCacheLocation","LocalStorage","SessionStorage","BrowserStorage","e","verbose","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","trace","accountKeys","StaticCacheKeys","ACCOUNT_KEYS","tokenKeys","TOKEN_KEYS","allKeys","getKeys","key","isCredentialKey","credObj","validateAndParseJson","hasOwnProperty","CredentialType","IdTokenEntity","isIdTokenEntity","tracePii","idTokenEntity","toObject","updateCredentialCacheKey","addTokenKey","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","AccessTokenEntity","isAccessTokenEntity","accessTokenEntity","REFRESH_TOKEN","RefreshTokenEntity","isRefreshTokenEntity","refreshTokenEntity","isAccountKey","accountObj","AccountEntity","isAccountEntity","addAccountKeyToMap","jsonValue","parsedJson","JSON","parse","error","setItem","getAccount","accountKey","account","removeAccountKeyFromMap","parsedAccount","setAccount","generateAccountKey","stringify","getAccountKeys","indexOf","push","removalIndex","splice","removeAccount","removeIdToken","removeTokenKey","removeAccessToken","removeRefreshToken","getTokenKeys","item","idToken","accessToken","refreshToken","type","info","ClientAuthError","createUnexpectedCredentialTypeError","infoPii","idRemoval","accessRemoval","refreshRemoval","getIdTokenCredential","parsedIdToken","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","parsedAccessToken","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","parsedRefreshToken","setRefreshTokenCredential","getAppMetadata","appMetadataKey","parsedMetadata","AppMetadataEntity","isAppMetadataEntity","setAppMetadata","appMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetryKey","ServerTelemetryEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetry","getAuthorityMetadata","AuthorityMetadataEntity","isAuthorityMetadataEntity","getAuthorityMetadataKeys","filter","isAuthorityMetadata","setWrapperMetadata","wrapperSKU","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","getWrapperMetadata","sku","EMPTY_STRING","version","setAuthorityMetadata","entity","getActiveAccount","activeAccountKeyFilters","generateCacheKey","ACTIVE_ACCOUNT_FILTERS","activeAccountValueFilters","activeAccountKeyLocal","ACTIVE_ACCOUNT","activeAccountValueLocal","activeAccount","getAccountInfoByFilter","localAccountId","setActiveAccount","activeAccountValueObj","homeAccountId","activeAccountKey","activeAccountValue","removeItem","accountFilter","allAccounts","getAllAccounts","length","username","toLowerCase","tenantId","environment","getAccountInfoByHints","loginHint","sid","matchingAccounts","accountInfo","accountSid","idTokenClaims","createMultipleMatchingAccountsInCacheError","getThrottlingCache","throttlingCacheKey","parsedThrottlingCache","ThrottlingEntity","isThrottlingEntity","setThrottlingCache","throttlingCache","getTemporaryCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","setItemCookie","clearItemCookie","containsKey","clear","removeAllAccounts","removeAppMetadata","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","charAt","substring","decodeURIComponent","clearMsalCookies","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","toUTCString","getCache","setCache","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","generateAuthorityKey","stateString","libraryState","id","stateId","ProtocolUtils","parseRequestState","TemporaryCacheKeys","AUTHORITY","generateNonceKey","NONCE_IDTOKEN","generateStateKey","REQUEST_STATE","getCachedAuthority","cachedState","stateCacheKey","state","authorityCacheKey","updateCacheEntries","nonce","authorityInstance","nonceCacheKey","ccsCredential","credential","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","isEmpty","UPN","resetRequestCache","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","CORRELATION_ID","NATIVE_REQUEST","setInteractionInProgress","cleanRequestByState","stateKey","cleanRequestByInteractionType","interactionType","stateValue","parsedState","BrowserProtocolUtils","extractBrowserRequestState","cacheCodeRequest","authCodeRequest","browserCrypto","encodedValue","base64Encode","getCachedRequest","encodedTokenRequest","BrowserAuthError","createNoTokenRequestCacheError","parsedRequest","base64Decode","createUnableToParseTokenRequestCacheError","authority","cachedAuthority","createNoCachedAuthorityError","getCachedNativeRequest","cachedRequest","isInteractionInProgress","matchClientId","getInteractionInProgress","INTERACTION_STATUS_KEY","inProgress","createInteractionInProgressError","getLegacyLoginHint","adalIdTokenString","msalIdTokenString","cachedIdTokenString","cachedIdToken","IdToken","claims","preferred_username","upn","currentCacheKey","updatedCacheKey","cacheItem","credentialType","getRedirectRequestContext","REDIRECT_CONTEXT","setRedirectRequestContext","hydrateCache","result","request","createIdTokenEntity","claimsHash","hashString","createAccessTokenEntity","scopes","join","expiresOn","extExpiresOn","undefined","tokenType","sshKid","cacheRecord","CacheRecord","saveCacheRecord","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","claimsBasedCachingEnabled","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["../../src/cache/BrowserCacheManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}