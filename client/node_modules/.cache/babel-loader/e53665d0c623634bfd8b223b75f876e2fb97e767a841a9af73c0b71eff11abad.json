{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Validates server consumable params from the \"request\" objects\n */\nclass RequestValidator {\n  /**\n   * Utility to check if the `redirectUri` in the request is a non-null value\n   * @param redirectUri\n   */\n  static validateRedirectUri(redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  }\n  /**\n   * Utility to validate prompt sent by the user in the request\n   * @param prompt\n   */\n  static validatePrompt(prompt) {\n    const promptValues = [];\n    for (const value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  }\n  static validateClaims(claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  }\n  /**\n   * Utility to validate code_challenge and code_challenge_method\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  }\n  /**\n   * Utility to validate code_challenge_method\n   * @param codeChallengeMethod\n   */\n  static validateCodeChallengeMethod(codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  }\n  /**\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\n   * @param request\n   */\n  static sanitizeEQParams(eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    }\n    // Remove any query parameters already included in SSO params\n    queryParams.forEach((value, key) => {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    // remove empty string parameters\n    return Object.fromEntries(Object.entries(eQParams).filter(kv => kv[1] !== \"\"));\n  }\n}\nexport { RequestValidator };","map":{"version":3,"names":["RequestValidator","validateRedirectUri","redirectUri","StringUtils","isEmpty","ClientConfigurationError","createRedirectUriEmptyError","validatePrompt","prompt","promptValues","value","PromptValue","push","indexOf","createInvalidPromptError","validateClaims","claims","JSON","parse","e","createInvalidClaimsRequestError","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","CodeChallengeMethodValues","PLAIN","S256","createInvalidCodeChallengeMethodError","sanitizeEQParams","eQParams","queryParams","forEach","key","Object","fromEntries","entries","filter","kv"],"sources":["../../src/request/RequestValidator.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAAA;;;AAGG;AAOH;;AAEG;MACUA,gBAAgB;EACzB;;;AAGG;EACH,OAAOC,mBAAmBA,CAACC,WAAmB;IAC1C,IAAIC,WAAW,CAACC,OAAO,CAACF,WAAW,CAAC,EAAE;MAClC,MAAMG,wBAAwB,CAACC,2BAA2B,EAAE;IAC/D;;EAGL;;;AAGG;EACH,OAAOC,cAAcA,CAACC,MAAc;IAChC,MAAMC,YAAY,GAAG,EAAE;IAEvB,KAAK,MAAMC,KAAK,IAAIC,WAAW,EAAE;MAC7BF,YAAY,CAACG,IAAI,CAACD,WAAW,CAACD,KAAK,CAAC,CAAC;IACxC;IAED,IAAID,YAAY,CAACI,OAAO,CAACL,MAAM,CAAC,GAAG,CAAC,EAAE;MAClC,MAAMH,wBAAwB,CAACS,wBAAwB,CAACN,MAAM,CAAC;IAClE;;EAGL,OAAOO,cAAcA,CAACC,MAAc;IAChC,IAAI;MACAC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;IACrB,EAAC,OAAOG,CAAC,EAAE;MACR,MAAMd,wBAAwB,CAACe,+BAA+B,EAAE;IACnE;;EAGL;;;;AAIG;EACH,OAAOC,2BAA2BA,CAC9BC,aAAqB,EACrBC,mBAA2B;IAE3B,IACIpB,WAAW,CAACC,OAAO,CAACkB,aAAa,CAAC,IAClCnB,WAAW,CAACC,OAAO,CAACmB,mBAAmB,CAAC,EAC1C;MACE,MAAMlB,wBAAwB,CAACmB,qCAAqC,EAAE;IACzE,OAAM;MACH,IAAI,CAACC,2BAA2B,CAACF,mBAAmB,CAAC;IACxD;;EAGL;;;AAGG;EACH,OAAOE,2BAA2BA,CAACF,mBAA2B;IAC1D,IACI,CACIG,yBAAyB,CAACC,KAAK,EAC/BD,yBAAyB,CAACE,IAAI,CACjC,CAACf,OAAO,CAACU,mBAAmB,CAAC,GAAG,CAAC,EACpC;MACE,MAAMlB,wBAAwB,CAACwB,qCAAqC,EAAE;IACzE;;EAGL;;;AAGG;EACH,OAAOC,gBAAgBA,CACnBC,QAAoB,EACpBC,WAAgC;IAEhC,IAAI,CAACD,QAAQ,EAAE;MACX,OAAO,EAAE;IACZ;;IAGDC,WAAW,CAACC,OAAO,CAAC,CAACvB,KAAK,EAAEwB,GAAG,KAAI;MAC/B,IAAIH,QAAQ,CAACG,GAAG,CAAC,EAAE;QACf,OAAOH,QAAQ,CAACG,GAAG,CAAC;MACvB;IACL,CAAC,CAAC;;IAGF,OAAOC,MAAM,CAACC,WAAW,CACrBD,MAAM,CAACE,OAAO,CAACN,QAAQ,CAAC,CAACO,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CACxD;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}