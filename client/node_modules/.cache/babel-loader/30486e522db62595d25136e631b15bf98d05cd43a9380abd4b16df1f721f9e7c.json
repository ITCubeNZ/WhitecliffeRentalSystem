{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst KeyLocation = {\n  SW: \"sw\",\n  UHW: \"uhw\"\n};\n/** @internal */\nclass PopTokenGenerator {\n  constructor(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n   * @param request\n   * @returns\n   */\n  async generateCnf(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n    this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n    const reqCnf = await this.generateKid(request);\n    const reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n    return {\n      kid: reqCnf.kid,\n      reqCnfString,\n      reqCnfHash: await this.cryptoUtils.hashString(reqCnfString)\n    };\n  }\n  /**\n   * Generates key_id for a SHR token request\n   * @param request\n   * @returns\n   */\n  async generateKid(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n    const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n    return {\n      kid: kidThumbprint,\n      xms_ksl: KeyLocation.SW\n    };\n  }\n  /**\n   * Signs the POP access_token with the local generated key-pair\n   * @param accessToken\n   * @param request\n   * @returns\n   */\n  async signPopToken(accessToken, keyId, request) {\n    return this.signPayload(accessToken, keyId, request);\n  }\n  /**\n   * Utility function to generate the signed JWT for an access_token\n   * @param payload\n   * @param kid\n   * @param request\n   * @param claims\n   * @returns\n   */\n  async signPayload(payload, keyId, request, claims) {\n    // Deconstruct request to extract SHR parameters\n    const {\n      resourceRequestMethod,\n      resourceRequestUri,\n      shrClaims,\n      shrNonce\n    } = request;\n    const resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n    const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n    return await this.cryptoUtils.signJwt({\n      at: payload,\n      ts: TimeUtils.nowSeconds(),\n      m: resourceRequestMethod?.toUpperCase(),\n      u: resourceUrlComponents?.HostNameAndPort,\n      nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n      p: resourceUrlComponents?.AbsolutePath,\n      q: resourceUrlComponents?.QueryString ? [[], resourceUrlComponents.QueryString] : undefined,\n      client_claims: shrClaims || undefined,\n      ...claims\n    }, keyId, request.correlationId);\n  }\n}\nexport { PopTokenGenerator };","map":{"version":3,"names":["KeyLocation","SW","UHW","PopTokenGenerator","constructor","cryptoUtils","performanceClient","generateCnf","request","addQueueMeasurement","PerformanceEvents","PopTokenGenerateCnf","correlationId","setPreQueueTime","PopTokenGenerateKid","reqCnf","generateKid","reqCnfString","base64Encode","JSON","stringify","kid","reqCnfHash","hashString","kidThumbprint","getPublicKeyThumbprint","xms_ksl","signPopToken","accessToken","keyId","signPayload","payload","claims","resourceRequestMethod","resourceRequestUri","shrClaims","shrNonce","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","signJwt","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims"],"sources":["../../src/crypto/PopTokenGenerator.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAAA;;;AAGG;AA0BH,MAAMA,WAAW,GAAG;EAChBC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE;CACC;AAGV;MACaC,iBAAiB;EAI1BC,WAAYA,CAAAC,WAAoB,EAAEC,iBAAsC;IACpE,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;;EAG9C;;;;;AAKG;EACH,MAAMC,WAAWA,CACbC,OAAoC;IAEpC,IAAI,CAACF,iBAAiB,EAAEG,mBAAmB,CACvCC,iBAAiB,CAACC,mBAAmB,EACrCH,OAAO,CAACI,aAAa,CACxB;IAED,IAAI,CAACN,iBAAiB,EAAEO,eAAe,CACnCH,iBAAiB,CAACI,mBAAmB,EACrCN,OAAO,CAACI,aAAa,CACxB;IACD,MAAMG,MAAM,GAAG,MAAM,IAAI,CAACC,WAAW,CAACR,OAAO,CAAC;IAC9C,MAAMS,YAAY,GAAW,IAAI,CAACZ,WAAW,CAACa,YAAY,CACtDC,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,CACzB;IAED,OAAO;MACHM,GAAG,EAAEN,MAAM,CAACM,GAAG;MACfJ,YAAY;MACZK,UAAU,EAAE,MAAM,IAAI,CAACjB,WAAW,CAACkB,UAAU,CAACN,YAAY;KAC7D;;EAGL;;;;AAIG;EACH,MAAMD,WAAWA,CAACR,OAAoC;IAClD,IAAI,CAACF,iBAAiB,EAAEG,mBAAmB,CACvCC,iBAAiB,CAACI,mBAAmB,EACrCN,OAAO,CAACI,aAAa,CACxB;IAED,MAAMY,aAAa,GAAG,MAAM,IAAI,CAACnB,WAAW,CAACoB,sBAAsB,CAC/DjB,OAAO,CACV;IAED,OAAO;MACHa,GAAG,EAAEG,aAAa;MAClBE,OAAO,EAAE1B,WAAW,CAACC;KACxB;;EAGL;;;;;AAKG;EACH,MAAM0B,YAAYA,CACdC,WAAmB,EACnBC,KAAa,EACbrB,OAAoC;IAEpC,OAAO,IAAI,CAACsB,WAAW,CAACF,WAAW,EAAEC,KAAK,EAAErB,OAAO,CAAC;;EAGxD;;;;;;;AAOG;EACH,MAAMsB,WAAWA,CACbC,OAAe,EACfF,KAAa,EACbrB,OAAoC,EACpCwB,MAAe;;IAGf,MAAM;MACFC,qBAAqB;MACrBC,kBAAkB;MAClBC,SAAS;MACTC;IAAQ,CACX,GAAG5B,OAAO;IAEX,MAAM6B,iBAAiB,GAAGH,kBAAkB,GACtC,IAAII,SAAS,CAACJ,kBAAkB,CAAC,GACjCK,SAAS;IACf,MAAMC,qBAAqB,GAAGH,iBAAiB,EAAEI,gBAAgB,EAAE;IACnE,OAAO,MAAM,IAAI,CAACpC,WAAW,CAACqC,OAAO,CACjC;MACIC,EAAE,EAAEZ,OAAO;MACXa,EAAE,EAAEC,SAAS,CAACC,UAAU,EAAE;MAC1BC,CAAC,EAAEd,qBAAqB,EAAEe,WAAW,EAAE;MACvCC,CAAC,EAAET,qBAAqB,EAAEU,eAAe;MACzCC,KAAK,EAAEf,QAAQ,IAAI,IAAI,CAAC/B,WAAW,CAAC+C,aAAa,EAAE;MACnDC,CAAC,EAAEb,qBAAqB,EAAEc,YAAY;MACtCC,CAAC,EAAEf,qBAAqB,EAAEgB,WAAW,GAC/B,CAAC,EAAE,EAAEhB,qBAAqB,CAACgB,WAAW,CAAC,GACvCjB,SAAS;MACfkB,aAAa,EAAEtB,SAAS,IAAII,SAAS;MACrC,GAAGP;IACN,GACDH,KAAK,EACLrB,OAAO,CAACI,aAAa,CACxB;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}