{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nclass BrowserCrypto {\n  constructor(logger) {\n    this.logger = logger;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else {\n      this.logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto interface is not available.\");\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\n   * Check whether browser crypto is available.\n   */\n  hasBrowserCrypto() {\n    return \"crypto\" in window;\n  }\n  /**\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n   * @param dataString\n   */\n  async sha256Digest(dataString) {\n    const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n    // MSR Crypto wants object with name property, instead of string\n    return this.subtleCrypto.digest({\n      name: S256_HASH_ALG\n    }, data);\n  }\n  /**\n   * Populates buffer with cryptographically random values.\n   * @param dataBuffer\n   */\n  getRandomValues(dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  }\n  /**\n   * Generates a keypair based on current keygen algorithm config.\n   * @param extractable\n   * @param usages\n   */\n  async generateKeyPair(extractable, usages) {\n    return this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages);\n  }\n  /**\n   * Export key as Json Web Key (JWK)\n   * @param key\n   */\n  async exportJwk(key) {\n    return this.subtleCrypto.exportKey(key);\n  }\n  /**\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\n   * @param key\n   * @param extractable\n   * @param usages\n   */\n  async importJwk(key, extractable, usages) {\n    return this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages);\n  }\n  /**\n   * Signs given data with given key\n   * @param key\n   * @param data\n   */\n  async sign(key, data) {\n    return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\n  }\n}\nexport { BrowserCrypto };","map":{"version":3,"names":["PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","BrowserCrypto","constructor","logger","hasBrowserCrypto","verbose","subtleCrypto","ModernBrowserCrypto","error","BrowserAuthError","createCryptoNotAvailableError","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","window","sha256Digest","dataString","data","BrowserStringUtils","stringToUtf8Arr","digest","getRandomValues","dataBuffer","generateKeyPair","extractable","usages","generateKey","exportJwk","key","exportKey","importJwk","importKey","sign"],"sources":["../../src/crypto/BrowserCrypto.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAAA;;;AAGG;AAOH;;AAEG;AACH;AACA,MAAMA,oBAAoB,GAAG,mBAAmB;AAChD;AACA,MAAMC,aAAa,GAAG,SAAS;AAC/B;AACA,MAAMC,cAAc,GAAG,IAAI;AAC3B;AACA,MAAMC,eAAe,GAAe,IAAIC,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAEtE;;;AAGG;MACUC,aAAa;EAKtBC,YAAYC,MAAc;IACtB,IAAI,CAACA,MAAM,GAAGA,MAAM;IAEpB,IAAI,IAAI,CAACC,gBAAgB,EAAE,EAAE;;MAEzB,IAAI,CAACD,MAAM,CAACE,OAAO,CACf,kDAAkD,CACrD;MACD,IAAI,CAACC,YAAY,GAAG,IAAIC,mBAAmB,EAAE;IAChD,OAAM;MACH,IAAI,CAACJ,MAAM,CAACK,KAAK,CAAC,gDAAgD,CAAC;MACnE,MAAMC,gBAAgB,CAACC,6BAA6B,CAChD,4CAA4C,CAC/C;IACJ;IAED,IAAI,CAACC,sBAAsB,GAAG;MAC1BC,IAAI,EAAEhB,oBAAoB;MAC1BiB,IAAI,EAAEhB,aAAa;MACnBiB,aAAa,EAAEhB,cAAc;MAC7BiB,cAAc,EAAEhB;KACnB;;EAGL;;AAEG;EACKK,gBAAgBA,CAAA;IACpB,OAAO,QAAQ,IAAIY,MAAM;;EAG7B;;;AAGG;EACH,MAAMC,YAAYA,CAACC,UAAkB;IACjC,MAAMC,IAAI,GAAGC,kBAAkB,CAACC,eAAe,CAACH,UAAU,CAAC;;IAE3D,OAAO,IAAI,CAACZ,YAAY,CAACgB,MAAM,CAAC;MAAEV,IAAI,EAAEf;IAAa,CAAE,EAAEsB,IAAI,CAAC;;EAGlE;;;AAGG;EACHI,eAAeA,CAACC,UAAsB;IAClC,OAAO,IAAI,CAAClB,YAAY,CAACiB,eAAe,CAACC,UAAU,CAAC;;EAGxD;;;;AAIG;EACH,MAAMC,eAAeA,CACjBC,WAAoB,EACpBC,MAAuB;IAEvB,OAAO,IAAI,CAACrB,YAAY,CAACsB,WAAW,CAChC,IAAI,CAACjB,sBAAsB,EAC3Be,WAAW,EACXC,MAAM,CACT;;EAGL;;;AAGG;EACH,MAAME,SAASA,CAACC,GAAc;IAC1B,OAAO,IAAI,CAACxB,YAAY,CAACyB,SAAS,CAACD,GAAG,CAAC;;EAG3C;;;;;AAKG;EACH,MAAME,SAASA,CACXF,GAAe,EACfJ,WAAoB,EACpBC,MAAuB;IAEvB,OAAO,IAAI,CAACrB,YAAY,CAAC2B,SAAS,CAC9BH,GAAG,EACH,IAAI,CAACnB,sBAAsB,EAC3Be,WAAW,EACXC,MAAM,CACT;;EAGL;;;;AAIG;EACH,MAAMO,IAAIA,CAACJ,GAAc,EAAEX,IAAiB;IACxC,OAAO,IAAI,CAACb,YAAY,CAAC4B,IAAI,CAAC,IAAI,CAACvB,sBAAsB,EAAEmB,GAAG,EAAEX,IAAI,CAAC;;AAE5E"},"metadata":{},"sourceType":"module","externalDependencies":[]}