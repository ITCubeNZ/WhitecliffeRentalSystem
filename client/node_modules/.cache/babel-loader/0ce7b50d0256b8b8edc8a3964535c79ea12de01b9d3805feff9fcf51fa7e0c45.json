{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { Constants, ResponseCodes, RegionDiscoverySources } from '../utils/Constants.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass RegionDiscovery {\n  constructor(networkInterface, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\n   * Detect the region from the application's environment.\n   *\n   * @returns Promise<string | null>\n   */\n  async detectRegion(environmentRegion, regionDiscoveryMetadata) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n    // Initialize auto detected region with the region from the envrionment\n    let autodetectedRegionName = environmentRegion;\n    // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n    if (!autodetectedRegionName) {\n      const options = RegionDiscovery.IMDS_OPTIONS;\n      try {\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION, options);\n        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n          autodetectedRegionName = localIMDSVersionResponse.body;\n          regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n        }\n        // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n        if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\n          this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n          const currentIMDSVersion = await this.getCurrentVersion(options);\n          if (!currentIMDSVersion) {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return null;\n          }\n          this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n          const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion, options);\n          if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n            autodetectedRegionName = currentIMDSVersionResponse.body;\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n          }\n        }\n      } catch (e) {\n        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        return null;\n      }\n    } else {\n      regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n    }\n    // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n    if (!autodetectedRegionName) {\n      regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n    }\n    return autodetectedRegionName || null;\n  }\n  /**\n   * Make the call to the IMDS endpoint\n   *\n   * @param imdsEndpointUrl\n   * @returns Promise<NetworkResponse<string>>\n   */\n  async getRegionFromIMDS(version, options) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n    return this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\n  }\n  /**\n   * Get the most recent version of the IMDS endpoint available\n   *\n   * @returns Promise<string | null>\n   */\n  async getCurrentVersion(options) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n    try {\n      const response = await this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?format=json`, options);\n      // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n      if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n        return response.body[\"newest-versions\"][0];\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n// Options for the IMDS endpoint request\nRegionDiscovery.IMDS_OPTIONS = {\n  headers: {\n    Metadata: \"true\"\n  }\n};\nexport { RegionDiscovery };","map":{"version":3,"names":["RegionDiscovery","constructor","networkInterface","performanceClient","correlationId","detectRegion","environmentRegion","regionDiscoveryMetadata","addQueueMeasurement","PerformanceEvents","RegionDiscoveryDetectRegion","autodetectedRegionName","options","IMDS_OPTIONS","setPreQueueTime","RegionDiscoveryGetRegionFromIMDS","localIMDSVersionResponse","getRegionFromIMDS","Constants","IMDS_VERSION","status","ResponseCodes","httpSuccess","body","region_source","RegionDiscoverySources","IMDS","httpBadRequest","RegionDiscoveryGetCurrentVersion","currentIMDSVersion","getCurrentVersion","FAILED_AUTO_DETECTION","currentIMDSVersionResponse","e","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","length","headers","Metadata"],"sources":["../../src/authority/RegionDiscovery.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}