{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { buildClientInfo } from '../account/ClientInfo.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { AuthToken } from '../account/AuthToken.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from '../cache/entities/AccountEntity.mjs';\nimport { IdTokenEntity } from '../cache/entities/IdTokenEntity.mjs';\nimport { AccessTokenEntity } from '../cache/entities/AccessTokenEntity.mjs';\nimport { RefreshTokenEntity } from '../cache/entities/RefreshTokenEntity.mjs';\nimport { InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { CacheRecord } from '../cache/entities/CacheRecord.mjs';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.mjs';\nimport { Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { AppMetadataEntity } from '../cache/entities/AppMetadataEntity.mjs';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class that handles response parsing.\n * @internal\n */\nclass ResponseHandler {\n  constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Function which validates server authorization code response.\n   * @param serverResponseHash\n   * @param cachedState\n   * @param cryptoObj\n   */\n  validateServerAuthorizationCodeResponse(serverResponseHash, cachedState, cryptoObj) {\n    if (!serverResponseHash.state || !cachedState) {\n      throw serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Cached State\") : ClientAuthError.createStateNotFoundError(\"Server State\");\n    }\n    let decodedServerResponseHash;\n    let decodedCachedState;\n    try {\n      decodedServerResponseHash = decodeURIComponent(serverResponseHash.state);\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(serverResponseHash.state, `Server response hash URI could not be decoded`);\n    }\n    try {\n      decodedCachedState = decodeURIComponent(cachedState);\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(serverResponseHash.state, `Cached state URI could not be decoded`);\n    }\n    if (decodedServerResponseHash !== decodedCachedState) {\n      throw ClientAuthError.createStateMismatchError();\n    }\n    // Check for error\n    if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror, serverResponseHash.timestamp || Constants.EMPTY_STRING, serverResponseHash.trace_id || Constants.EMPTY_STRING, serverResponseHash.correlation_id || Constants.EMPTY_STRING, serverResponseHash.claims || Constants.EMPTY_STRING);\n      }\n      throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n    }\n    if (serverResponseHash.client_info) {\n      buildClientInfo(serverResponseHash.client_info, cryptoObj);\n    }\n  }\n  /**\n   * Function which validates server authorization token response.\n   * @param serverResponse\n   */\n  validateTokenResponse(serverResponse) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING);\n      }\n      const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n      throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n    }\n  }\n  /**\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n   * @param serverTokenResponse\n   * @param authority\n   */\n  async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n    // create an idToken object (not entity)\n    let idTokenObj;\n    if (serverTokenResponse.id_token) {\n      idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n      // token nonce check (TODO: Add a warning if no nonce is given?)\n      if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n        if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n          throw ClientAuthError.createNonceMismatchError();\n        }\n      }\n      // token max_age check\n      if (request.maxAge || request.maxAge === 0) {\n        const authTime = idTokenObj.claims.auth_time;\n        if (!authTime) {\n          throw ClientAuthError.createAuthTimeNotFoundError();\n        }\n        AuthToken.checkMaxAge(authTime, request.maxAge);\n      }\n    }\n    // generate homeAccountId\n    this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj?.claims);\n    // save the response tokens\n    let requestStateObj;\n    if (!!authCodePayload && !!authCodePayload.state) {\n      requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n    }\n    // Add keyId from request to serverTokenResponse if defined\n    serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n    const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload);\n    let cacheContext;\n    try {\n      if (this.persistencePlugin && this.serializableCache) {\n        this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n        cacheContext = new TokenCacheContext(this.serializableCache, true);\n        await this.persistencePlugin.beforeCacheAccess(cacheContext);\n      }\n      /*\n       * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n       * If not present, we should return null, as it's the case that another application called removeAccount in between\n       * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\n       * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\n       */\n      if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n        const key = cacheRecord.account.generateAccountKey();\n        const account = this.cacheStorage.getAccount(key);\n        if (!account) {\n          this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n          return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, undefined, serverRequestId);\n        }\n      }\n      await this.cacheStorage.saveCacheRecord(cacheRecord, request.storeInCache);\n    } finally {\n      if (this.persistencePlugin && this.serializableCache && cacheContext) {\n        this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n        await this.persistencePlugin.afterCacheAccess(cacheContext);\n      }\n    }\n    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse, serverRequestId);\n  }\n  /**\n   * Generates CacheRecord\n   * @param serverTokenResponse\n   * @param idTokenObj\n   * @param authority\n   */\n  generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload) {\n    const env = authority.getPreferredCache();\n    if (StringUtils.isEmpty(env)) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    // IdToken: non AAD scenarios can have empty realm\n    let cachedIdToken;\n    let cachedAccount;\n    if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n      cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING);\n      cachedAccount = AccountEntity.createAccount({\n        homeAccountId: this.homeAccountIdentifier,\n        idTokenClaims: idTokenObj.claims,\n        clientInfo: serverTokenResponse.client_info,\n        cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n        msGraphHost: authCodePayload?.msgraph_host\n      }, authority);\n    }\n    // AccessToken\n    let cachedAccessToken = null;\n    if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n      // If scopes not returned in server response, use request scopes\n      const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n      /*\n       * Use timestamp calculated before request\n       * Server may return timestamps as strings, parse to numbers if so.\n       */\n      const expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      const tokenExpirationSeconds = reqTimestamp + expiresIn;\n      const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n      // non AAD scenarios can have empty realm\n      cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n    }\n    // refreshToken\n    let cachedRefreshToken = null;\n    if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n      cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, userAssertionHash);\n    }\n    // appMetadata\n    let cachedAppMetadata = null;\n    if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n      cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n    }\n    return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n  }\n  /**\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n   *\n   * Optionally takes a state string that is set as-is in the response.\n   *\n   * @param cacheRecord\n   * @param idTokenObj\n   * @param fromTokenCache\n   * @param stateString\n   */\n  static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, serverTokenResponse, requestId) {\n    let accessToken = Constants.EMPTY_STRING;\n    let responseScopes = [];\n    let expiresOn = null;\n    let extExpiresOn;\n    let familyId = Constants.EMPTY_STRING;\n    if (cacheRecord.accessToken) {\n      if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n        const popTokenGenerator = new PopTokenGenerator(cryptoObj);\n        const {\n          secret,\n          keyId\n        } = cacheRecord.accessToken;\n        if (!keyId) {\n          throw ClientAuthError.createKeyIdMissingError();\n        }\n        accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n      } else {\n        accessToken = cacheRecord.accessToken.secret;\n      }\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    if (cacheRecord.appMetadata) {\n      familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n    }\n    const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n    const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n    // for hybrid + native bridge enablement, send back the native account Id\n    if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n      cacheRecord.account.nativeAccountId = serverTokenResponse?.spa_accountid;\n    }\n    return {\n      authority: authority.canonicalAuthority,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: fromTokenCache,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId,\n      requestId: requestId || Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: familyId,\n      tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n      state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n      cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n      msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n      code: serverTokenResponse?.spa_code,\n      fromNativeBroker: false\n    };\n  }\n}\nexport { ResponseHandler };","map":{"version":3,"names":["ResponseHandler","constructor","clientId","cacheStorage","cryptoObj","logger","serializableCache","persistencePlugin","performanceClient","validateServerAuthorizationCodeResponse","serverResponseHash","cachedState","state","ClientAuthError","createStateNotFoundError","decodedServerResponseHash","decodedCachedState","decodeURIComponent","e","createInvalidStateError","createStateMismatchError","error","error_description","suberror","InteractionRequiredAuthError","isInteractionRequiredError","Constants","EMPTY_STRING","timestamp","trace_id","correlation_id","claims","ServerError","client_info","buildClientInfo","validateTokenResponse","serverResponse","errString","error_codes","handleServerTokenResponse","serverTokenResponse","authority","reqTimestamp","request","authCodePayload","userAssertionHash","handlingRefreshTokenResponse","forceCacheRefreshTokenResponse","serverRequestId","addQueueMeasurement","PerformanceEvents","HandleServerTokenResponse","idTokenObj","id_token","AuthToken","StringUtils","isEmpty","nonce","createNonceMismatchError","maxAge","authTime","auth_time","createAuthTimeNotFoundError","checkMaxAge","homeAccountIdentifier","AccountEntity","generateHomeAccountId","authorityType","requestStateObj","ProtocolUtils","parseRequestState","key_id","sshKid","undefined","cacheRecord","generateCacheRecord","cacheContext","verbose","TokenCacheContext","beforeCacheAccess","account","key","generateAccountKey","getAccount","warning","generateAuthenticationResult","saveCacheRecord","storeInCache","afterCacheAccess","env","getPreferredCache","createInvalidCacheEnvironmentError","cachedIdToken","cachedAccount","IdTokenEntity","createIdTokenEntity","tid","createAccount","homeAccountId","idTokenClaims","clientInfo","cloudGraphHostName","cloud_graph_host_name","msGraphHost","msgraph_host","cachedAccessToken","access_token","responseScopes","scope","ScopeSet","fromString","scopes","expiresIn","expires_in","parseInt","extExpiresIn","ext_expires_in","refreshIn","refresh_in","tokenExpirationSeconds","extendedTokenExpirationSeconds","refreshOnSeconds","AccessTokenEntity","createAccessTokenEntity","tenant","printScopes","token_type","requestedClaimsHash","cachedRefreshToken","refresh_token","RefreshTokenEntity","createRefreshTokenEntity","foci","cachedAppMetadata","AppMetadataEntity","createAppMetadataEntity","CacheRecord","fromTokenCache","requestState","requestId","accessToken","expiresOn","extExpiresOn","familyId","tokenType","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","secret","keyId","createKeyIdMissingError","signPopToken","target","asArray","Date","Number","extendedExpiresOn","appMetadata","THE_FAMILY_ID","uid","oid","sub","spa_accountid","nativeAccountId","canonicalAuthority","uniqueId","tenantId","getAccountInfo","idToken","rawToken","fromCache","correlationId","userRequestState","code","spa_code","fromNativeBroker"],"sources":["../../src/response/ResponseHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}