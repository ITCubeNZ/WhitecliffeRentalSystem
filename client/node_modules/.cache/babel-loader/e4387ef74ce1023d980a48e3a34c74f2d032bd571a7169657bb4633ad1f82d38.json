{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.mjs';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\nclass InteractionHandler {\n  constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n  async handleCodeResponseFromHash(locationHash, state, authority, networkModule) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\n    this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n    // Check that location hash isn't empty.\n    if (StringUtils.isEmpty(locationHash)) {\n      throw BrowserAuthError.createEmptyHashError();\n    }\n    // Handle code response.\n    const stateKey = this.browserStorage.generateStateKey(state);\n    const requestState = this.browserStorage.getTemporaryCache(stateKey);\n    if (!requestState) {\n      throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n    }\n    let authCodeResponse;\n    try {\n      authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n    } catch (e) {\n      if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n        // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n        throw BrowserAuthError.createUserCancelledError();\n      } else {\n        throw e;\n      }\n    }\n    this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n    return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\n  }\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n  async handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule, validateNonce = true) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n    this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n    // Handle code response.\n    const stateKey = this.browserStorage.generateStateKey(state);\n    const requestState = this.browserStorage.getTemporaryCache(stateKey);\n    if (!requestState) {\n      throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n    }\n    // Get cached items\n    const nonceKey = this.browserStorage.generateNonceKey(requestState);\n    const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n    // Assign code to request\n    this.authCodeRequest.code = authCodeResponse.code;\n    // Check for new cloud instance\n    if (authCodeResponse.cloud_instance_host_name) {\n      this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n      await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n    }\n    // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n    if (validateNonce) {\n      authCodeResponse.nonce = cachedNonce || undefined;\n    }\n    authCodeResponse.state = requestState;\n    // Add CCS parameters if available\n    if (authCodeResponse.client_info) {\n      this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n    } else {\n      const cachedCcsCred = this.checkCcsCredentials();\n      if (cachedCcsCred) {\n        this.authCodeRequest.ccsCredential = cachedCcsCred;\n      }\n    }\n    // Acquire token with retrieved code.\n    this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\n    const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n    this.browserStorage.cleanRequestByState(state);\n    return tokenResponse;\n  }\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n  async updateTokenEndpointAuthority(cloudInstanceHostname, authority, networkModule) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n    const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\n    const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId);\n    this.authModule.updateAuthority(cloudInstanceAuthority);\n  }\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n  checkCcsCredentials() {\n    // Look up ccs credential in temp cache\n    const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n      }\n    }\n    return null;\n  }\n}\nexport { InteractionHandler };","map":{"version":3,"names":["InteractionHandler","constructor","authCodeModule","storageImpl","authCodeRequest","logger","performanceClient","authModule","browserStorage","handleCodeResponseFromHash","locationHash","state","authority","networkModule","addQueueMeasurement","PerformanceEvents","HandleCodeResponseFromHash","correlationId","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","setPreQueueTime","HandleCodeResponseFromServer","handleCodeResponseFromServer","validateNonce","trace","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","UpdateTokenEndpointAuthority","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","AuthClientAcquireToken","tokenResponse","acquireToken","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","cloudInstanceAuthority","AuthorityFactory","createDiscoveredInstance","options","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["../../src/interaction_handler/InteractionHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}