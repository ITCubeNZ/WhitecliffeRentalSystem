{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { PerformanceClient, Constants, Logger } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.mjs';\nimport { GuidGenerator } from '../crypto/GuidGenerator.mjs';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserPerformanceClient extends PerformanceClient {\n  constructor(configuration, intFields) {\n    super(configuration.auth.clientId, configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`, new Logger(configuration.system?.loggerOptions || {}, name, version), name, version, configuration.telemetry?.application || {\n      appName: \"\",\n      appVersion: \"\"\n    }, intFields);\n    this.browserCrypto = new BrowserCrypto(this.logger);\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n  }\n  startPerformanceMeasurement(measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  }\n  generateId() {\n    return this.guidGenerator.generateGuid();\n  }\n  getPageVisibility() {\n    return document.visibilityState?.toString() || null;\n  }\n  deleteIncompleteSubMeasurements(inProgressEvent) {\n    const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    const incompleteMeasurements = [];\n    if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n      rootEvent.incompleteSubMeasurements.forEach(subMeasurement => {\n        incompleteMeasurements.push({\n          ...subMeasurement\n        });\n      });\n    }\n    // Clean up remaining marks for incomplete sub-measurements\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  }\n  supportsBrowserPerformanceNow() {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  }\n  /**\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n   * Also captures browser page visibilityState.\n   *\n   * @param {PerformanceEvents} measureName\n   * @param {?string} [correlationId]\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n   */\n  startMeasurement(measureName, correlationId) {\n    // Capture page visibilityState and then invoke start/end measurement\n    const startPageVisibility = this.getPageVisibility();\n    const inProgressEvent = super.startMeasurement(measureName, correlationId);\n    return {\n      ...inProgressEvent,\n      end: event => {\n        const res = inProgressEvent.end({\n          startPageVisibility,\n          endPageVisibility: this.getPageVisibility(),\n          ...event\n        });\n        this.deleteIncompleteSubMeasurements(inProgressEvent);\n        return res;\n      },\n      discard: () => {\n        inProgressEvent.discard();\n        this.deleteIncompleteSubMeasurements(inProgressEvent);\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    };\n  }\n  /**\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @returns\n   */\n  setPreQueueTime(eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\n      return;\n    }\n    const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n     */\n    if (preQueueEvent) {\n      this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  }\n  /**\n   * Calculates and adds queue time measurement for given performance event.\n   *\n   * @param {PerformanceEvents} eventName\n   * @param {?string} correlationId\n   * @param {?number} queueTime\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n   * @returns\n   */\n  addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\n      return;\n    }\n    const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n    if (!preQueueTime) {\n      return;\n    }\n    const currentTime = window.performance.now();\n    const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n    return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\n  }\n}\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["BrowserPerformanceClient","PerformanceClient","constructor","configuration","intFields","auth","clientId","authority","Constants","DEFAULT_AUTHORITY","Logger","system","loggerOptions","name","version","telemetry","application","appName","appVersion","browserCrypto","BrowserCrypto","logger","guidGenerator","GuidGenerator","startPerformanceMeasurement","measureName","correlationId","BrowserPerformanceMeasurement","generateId","generateGuid","getPageVisibility","document","visibilityState","toString","deleteIncompleteSubMeasurements","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","length","flushMeasurements","supportsBrowserPerformanceNow","window","performance","now","startMeasurement","startPageVisibility","end","res","endPageVisibility","discard","measurement","flushMeasurement","setPreQueueTime","eventName","trace","preQueueEvent","preQueueTimeByCorrelationId","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime"],"sources":["../../src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}