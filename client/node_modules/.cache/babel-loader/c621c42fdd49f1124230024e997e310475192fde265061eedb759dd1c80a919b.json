{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nclass StringUtils {\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n  static decodeAuthToken(authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n    }\n    const crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  }\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n  static isEmpty(str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  }\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  static isEmptyObj(strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        const obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  }\n  static startsWith(str, search) {\n    return str.indexOf(search) === 0;\n  }\n  static endsWith(str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  }\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  static queryStringToObject(query) {\n    const obj = {};\n    const params = query.split(\"&\");\n    const decode = s => decodeURIComponent(s.replace(/\\+/g, \" \"));\n    params.forEach(pair => {\n      if (pair.trim()) {\n        const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  }\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  static trimArrayEntries(arr) {\n    return arr.map(entry => entry.trim());\n  }\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  static removeEmptyStringsFromArray(arr) {\n    return arr.filter(entry => {\n      return !StringUtils.isEmpty(entry);\n    });\n  }\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  static jsonParseHelper(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  static matchPattern(pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n    return regex.test(input);\n  }\n}\nexport { StringUtils };","map":{"version":3,"names":["StringUtils","decodeAuthToken","authToken","isEmpty","ClientAuthError","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","isEmptyObj","strObj","obj","parse","Object","keys","e","startsWith","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","params","split","decode","s","decodeURIComponent","replace","forEach","pair","trim","key","value","trimArrayEntries","arr","map","entry","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"sources":["../../src/utils/StringUtils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}