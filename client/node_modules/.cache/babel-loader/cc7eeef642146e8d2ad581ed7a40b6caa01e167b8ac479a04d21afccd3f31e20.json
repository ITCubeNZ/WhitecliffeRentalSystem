{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\nclass FetchClient {\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  async sendGetRequestAsync(url, options) {\n    let response;\n    try {\n      response = await fetch(url, {\n        method: HTTP_REQUEST_TYPE.GET,\n        headers: this.getFetchHeaders(options)\n      });\n    } catch (e) {\n      if (window.navigator.onLine) {\n        throw BrowserAuthError.createGetRequestFailedError(e, url);\n      } else {\n        throw BrowserAuthError.createNoNetworkConnectivityError();\n      }\n    }\n    try {\n      return {\n        headers: this.getHeaderDict(response.headers),\n        body: await response.json(),\n        status: response.status\n      };\n    } catch (e) {\n      throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n    }\n  }\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  async sendPostRequestAsync(url, options) {\n    const reqBody = options && options.body || Constants.EMPTY_STRING;\n    let response;\n    try {\n      response = await fetch(url, {\n        method: HTTP_REQUEST_TYPE.POST,\n        headers: this.getFetchHeaders(options),\n        body: reqBody\n      });\n    } catch (e) {\n      if (window.navigator.onLine) {\n        throw BrowserAuthError.createPostRequestFailedError(e, url);\n      } else {\n        throw BrowserAuthError.createNoNetworkConnectivityError();\n      }\n    }\n    try {\n      return {\n        headers: this.getHeaderDict(response.headers),\n        body: await response.json(),\n        status: response.status\n      };\n    } catch (e) {\n      throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n    }\n  }\n  /**\r\n   * Get Fetch API Headers object from string map\r\n   * @param inputHeaders\r\n   */\n  getFetchHeaders(options) {\n    const headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    const optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(key => {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  }\n  getHeaderDict(headers) {\n    const headerDict = {};\n    headers.forEach((value, key) => {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  }\n}\nexport { FetchClient };","map":{"version":3,"names":["FetchClient","sendGetRequestAsync","url","options","response","fetch","method","HTTP_REQUEST_TYPE","GET","headers","getFetchHeaders","e","window","navigator","onLine","BrowserAuthError","createGetRequestFailedError","createNoNetworkConnectivityError","getHeaderDict","body","json","status","createFailedToParseNetworkResponseError","sendPostRequestAsync","reqBody","Constants","EMPTY_STRING","POST","createPostRequestFailedError","Headers","optionsHeaders","Object","keys","forEach","key","append","headerDict","value"],"sources":["../../src/network/FetchClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAAA;;;AAGG;AAWH;;AAEG;MACUA,WAAW;EACpB;;;;;AAKG;EACH,MAAMC,mBAAmBA,CACrBC,GAAW,EACXC,OAA+B;IAE/B,IAAIC,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;QACxBI,MAAM,EAAEC,iBAAiB,CAACC,GAAG;QAC7BC,OAAO,EAAE,IAAI,CAACC,eAAe,CAACP,OAAO;MACxC,EAAC;IACL,EAAC,OAAOQ,CAAC,EAAE;MACR,IAAIC,MAAM,CAACC,SAAS,CAACC,MAAM,EAAE;QACzB,MAAMC,gBAAgB,CAACC,2BAA2B,CAC9CL,CAAW,EACXT,GAAG,CACN;MACJ,OAAM;QACH,MAAMa,gBAAgB,CAACE,gCAAgC,EAAE;MAC5D;IACJ;IAED,IAAI;MACA,OAAO;QACHR,OAAO,EAAE,IAAI,CAACS,aAAa,CAACd,QAAQ,CAACK,OAAO,CAAC;QAC7CU,IAAI,EAAG,MAAMf,QAAQ,CAACgB,IAAI,EAAQ;QAClCC,MAAM,EAAEjB,QAAQ,CAACiB;OACpB;IACJ,EAAC,OAAOV,CAAC,EAAE;MACR,MAAMI,gBAAgB,CAACO,uCAAuC,CAACpB,GAAG,CAAC;IACtE;;EAGL;;;;;AAKG;EACH,MAAMqB,oBAAoBA,CACtBrB,GAAW,EACXC,OAA+B;IAE/B,MAAMqB,OAAO,GAAIrB,OAAO,IAAIA,OAAO,CAACgB,IAAI,IAAKM,SAAS,CAACC,YAAY;IAEnE,IAAItB,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;QACxBI,MAAM,EAAEC,iBAAiB,CAACoB,IAAI;QAC9BlB,OAAO,EAAE,IAAI,CAACC,eAAe,CAACP,OAAO,CAAC;QACtCgB,IAAI,EAAEK;MACT,EAAC;IACL,EAAC,OAAOb,CAAC,EAAE;MACR,IAAIC,MAAM,CAACC,SAAS,CAACC,MAAM,EAAE;QACzB,MAAMC,gBAAgB,CAACa,4BAA4B,CAC/CjB,CAAW,EACXT,GAAG,CACN;MACJ,OAAM;QACH,MAAMa,gBAAgB,CAACE,gCAAgC,EAAE;MAC5D;IACJ;IAED,IAAI;MACA,OAAO;QACHR,OAAO,EAAE,IAAI,CAACS,aAAa,CAACd,QAAQ,CAACK,OAAO,CAAC;QAC7CU,IAAI,EAAG,MAAMf,QAAQ,CAACgB,IAAI,EAAQ;QAClCC,MAAM,EAAEjB,QAAQ,CAACiB;OACpB;IACJ,EAAC,OAAOV,CAAC,EAAE;MACR,MAAMI,gBAAgB,CAACO,uCAAuC,CAACpB,GAAG,CAAC;IACtE;;EAGL;;;AAGG;EACKQ,eAAeA,CAACP,OAA+B;IACnD,MAAMM,OAAO,GAAG,IAAIoB,OAAO,EAAE;IAC7B,IAAI,EAAE1B,OAAO,IAAIA,OAAO,CAACM,OAAO,CAAC,EAAE;MAC/B,OAAOA,OAAO;IACjB;IACD,MAAMqB,cAAc,GAAG3B,OAAO,CAACM,OAAO;IACtCsB,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,OAAO,CAAEC,GAAG,IAAI;MACxCzB,OAAO,CAAC0B,MAAM,CAACD,GAAG,EAAEJ,cAAc,CAACI,GAAG,CAAC,CAAC;IAC5C,CAAC,CAAC;IACF,OAAOzB,OAAO;;EAGVS,aAAaA,CAACT,OAAgB;IAClC,MAAM2B,UAAU,GAA2B,EAAE;IAC7C3B,OAAO,CAACwB,OAAO,CAAC,CAACI,KAAa,EAAEH,GAAW,KAAI;MAC3CE,UAAU,CAACF,GAAG,CAAC,GAAGG,KAAK;IAC3B,CAAC,CAAC;IACF,OAAOD,UAAU;;AAExB"},"metadata":{},"sourceType":"module","externalDependencies":[]}