{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { PerformanceEvents, Constants, AuthError, UrlString, ProtocolUtils, ThrottlingUtils, ProtocolMode } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { InteractionType, ApiId, TemporaryCacheKeys } from '../utils/BrowserConstants.mjs';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.mjs';\nimport { BrowserUtils } from '../utils/BrowserUtils.mjs';\nimport { EventType } from '../event/EventType.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass RedirectClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n    const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\n    this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n    const handleBackButton = event => {\n      // Clear temporary cache if the back button is clicked during the redirect flow.\n      if (event.persisted) {\n        this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n        this.browserStorage.cleanRequestByState(validRequest.state);\n        this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\n      }\n    };\n    try {\n      // Create auth code request and generate PKCE params\n      this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n      const authCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n      // Initialize the client\n      this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n      const authClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n      this.logger.verbose(\"Auth code client created\");\n      // Create redirect interaction handler.\n      const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\n      // Create acquire token url.\n      const navigateUrl = await authClient.getAuthCodeUrl({\n        ...validRequest,\n        nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n      });\n      const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n      this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n      // Clear temporary cache if the back button is clicked during the redirect flow.\n      window.addEventListener(\"pageshow\", handleBackButton);\n      // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n      return await interactionHandler.initiateAuthRequest(navigateUrl, {\n        navigationClient: this.navigationClient,\n        redirectTimeout: this.config.system.redirectNavigationTimeout,\n        redirectStartPage: redirectStartPage,\n        onRedirectNavigate: request.onRedirectNavigate\n      });\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      window.removeEventListener(\"pageshow\", handleBackButton);\n      this.browserStorage.cleanRequestByState(validRequest.state);\n      throw e;\n    }\n  }\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n  async handleRedirectPromise(hash) {\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n    try {\n      if (!this.browserStorage.isInteractionInProgress(true)) {\n        this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n        return null;\n      }\n      const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n      if (!responseHash) {\n        // Not a recognized server response hash or hash not associated with a redirect request\n        this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n        return null;\n      }\n      let state;\n      try {\n        // Deserialize hash fragment response parameters.\n        const serverParams = UrlString.getDeserializedHash(responseHash);\n        state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n        this.logger.verbose(\"State extracted from hash\");\n      } catch (e) {\n        this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n        return null;\n      }\n      // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n      const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n      const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n      const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n      if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n        // We are on the page we need to navigate to - handle hash\n        this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n        const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\n        if (loginRequestUrl.indexOf(\"#\") > -1) {\n          // Replace current hash with non-msal hash, if present\n          BrowserUtils.replaceHash(loginRequestUrl);\n        }\n        return handleHashResult;\n      } else if (!this.config.auth.navigateToLoginRequestUrl) {\n        this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n        return this.handleHash(responseHash, state, serverTelemetryManager);\n      } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\n        /*\r\n         * Returned from authority using redirect - need to perform navigation before processing response\r\n         * Cache the hash to be retrieved after the next redirect\r\n         */\n        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n        const navigationOptions = {\n          apiId: ApiId.handleRedirectPromise,\n          timeout: this.config.system.redirectNavigationTimeout,\n          noHistory: true\n        };\n        /**\r\n         * Default behavior is to redirect to the start page and not process the hash now.\r\n         * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\r\n         */\n        let processHashOnRedirect = true;\n        if (!loginRequestUrl || loginRequestUrl === \"null\") {\n          // Redirect to home page if login request url is null (real null or the string null)\n          const homepage = BrowserUtils.getHomepage();\n          // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n          this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n          this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n          processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n        } else {\n          // Navigate to page that initiated the redirect request\n          this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n          processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n        }\n        // If navigateInternal implementation returns false, handle the hash now\n        if (!processHashOnRedirect) {\n          return this.handleHash(responseHash, state, serverTelemetryManager);\n        }\n      }\n      return null;\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n      throw e;\n    }\n  }\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n  getRedirectResponseHash(hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\");\n    // Get current location hash from window or cache.\n    const isResponseHash = UrlString.hashContainsKnownProperties(hash);\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n    const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  }\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n  async handleHash(hash, state, serverTelemetryManager) {\n    const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n    this.logger.verbose(\"handleHash called, retrieved cached request\");\n    const serverParams = UrlString.getDeserializedHash(hash);\n    if (serverParams.accountId) {\n      this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n      if (!this.nativeMessageHandler) {\n        throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n      }\n      const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n      const {\n        userRequestState\n      } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n      return nativeInteractionClient.acquireToken({\n        ...cachedRequest,\n        state: userRequestState,\n        prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n      }).finally(() => {\n        this.browserStorage.cleanRequestByState(state);\n      });\n    }\n    // Hash contains known properties - handle and return in callback\n    const currentAuthority = this.browserStorage.getCachedAuthority(state);\n    if (!currentAuthority) {\n      throw BrowserAuthError.createNoCachedAuthorityError();\n    }\n    this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\n    const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\n    this.logger.verbose(\"Auth code client created\");\n    ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n    const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\n    return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n  }\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n  async logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n    try {\n      this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n      // Clear cache on logout\n      await this.clearCacheOnLogout(validLogoutRequest.account);\n      const navigationOptions = {\n        apiId: ApiId.logout,\n        timeout: this.config.system.redirectNavigationTimeout,\n        noHistory: false\n      };\n      this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\n      const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\n      this.logger.verbose(\"Auth code client created\");\n      if (authClient.authority.protocolMode === ProtocolMode.OIDC) {\n        try {\n          authClient.authority.endSessionEndpoint;\n        } catch {\n          if (validLogoutRequest.account?.homeAccountId) {\n            this.browserStorage.removeAccount(validLogoutRequest.account?.homeAccountId);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            return;\n          }\n        }\n      }\n      // Create logout string and navigate user window to logout.\n      const logoutUri = authClient.getLogoutUri(validLogoutRequest);\n      this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n      // Check if onRedirectNavigate is implemented, and invoke it if so\n      if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n        const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n        if (navigate !== false) {\n          this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n          // Ensure interaction is in progress\n          if (!this.browserStorage.getInteractionInProgress()) {\n            this.browserStorage.setInteractionInProgress(true);\n          }\n          await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n          return;\n        } else {\n          // Ensure interaction is not in progress\n          this.browserStorage.setInteractionInProgress(false);\n          this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n        }\n      } else {\n        // Ensure interaction is in progress\n        if (!this.browserStorage.getInteractionInProgress()) {\n          this.browserStorage.setInteractionInProgress(true);\n        }\n        await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n        return;\n      }\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\n      this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n      throw e;\n    }\n    this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n  }\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n  getRedirectStartPage(requestStartPage) {\n    const redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  }\n}\nexport { RedirectClient };","map":{"version":3,"names":["RedirectClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","acquireToken","request","setPreQueueTime","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","validRequest","initializeAuthorizationRequest","InteractionType","Redirect","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenRedirect","handleBackButton","event","persisted","verbose","cleanRequestByState","emitEvent","EventType","RESTORE_FROM_BFCACHE","StandardInteractionClientInitializeAuthorizationCodeRequest","authCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientCreateAuthCodeClient","authClient","createAuthCodeClient","azureCloudOptions","interactionHandler","RedirectHandler","navigateUrl","getAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","redirectStartPage","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","e","AuthError","setCorrelationId","cacheFailedRequest","removeEventListener","handleRedirectPromise","hash","isInteractionInProgress","info","responseHash","getRedirectResponseHash","location","cleanRequestByInteractionType","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","loginRequestUrl","getTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","loginRequestUrlNormalized","removeHashFromUrl","currentUrlNormalized","href","auth","navigateToLoginRequestUrl","handleHashResult","handleHash","indexOf","BrowserUtils","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","navigationOptions","apiId","timeout","noHistory","processHashOnRedirect","homepage","getHomepage","warning","navigateInternal","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","getCachedRequest","accountId","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","acquireTokenPopup","userRequestState","ProtocolUtils","parseRequestState","prompt","undefined","finally","currentAuthority","getCachedAuthority","createNoCachedAuthorityError","ThrottlingUtils","removeThrottle","clientId","handleCodeResponseFromHash","networkClient","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","LOGOUT_START","clearCacheOnLogout","protocolMode","ProtocolMode","OIDC","endSessionEndpoint","homeAccountId","removeAccount","LOGOUT_SUCCESS","logoutUri","getLogoutUri","navigate","getInteractionInProgress","setInteractionInProgress","navigateExternal","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri"],"sources":["../../src/interaction_client/RedirectClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;AAAA;;;AAGG;AAwCG,MAAOA,cAAe,SAAQC,yBAAyB;EAGzDC,YACIC,MAA4B,EAC5BC,WAAgC,EAChCC,aAAsB,EACtBC,MAAc,EACdC,YAA0B,EAC1BC,gBAAmC,EACnCC,iBAAqC,EACrCC,iBAAsC,EACtCC,oBAA2C,EAC3CC,aAAsB;IAEtB,KAAK,CACDT,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,MAAM,EACNC,YAAY,EACZC,gBAAgB,EAChBC,iBAAiB,EACjBE,oBAAoB,EACpBC,aAAa,CAChB;IACD,IAAI,CAACC,aAAa,GAAGH,iBAAiB;;EAG1C;;;AAGG;EACH,MAAMI,YAAYA,CAACC,OAAwB;IACvC,IAAI,CAACN,iBAAiB,CAACO,eAAe,CAClCC,iBAAiB,CAACC,uDAAuD,EACzEH,OAAO,CAACH,aAAa,CACxB;IACD,MAAMO,YAAY,GAAG,MAAM,IAAI,CAACC,8BAA8B,CAC1DL,OAAO,EACPM,eAAe,CAACC,QAAQ,CAC3B;IACD,IAAI,CAACC,cAAc,CAACC,kBAAkB,CAClCL,YAAY,CAACM,KAAK,EAClBN,YAAY,CAACO,KAAK,EAClBP,YAAY,CAACQ,SAAS,EACtBR,YAAY,CAACS,SAAS,IAAIC,SAAS,CAACC,YAAY,EAChDX,YAAY,CAACY,OAAO,IAAI,IAAI,CAC/B;IACD,MAAMC,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAACC,oBAAoB,CAC7B;IAED,MAAMC,gBAAgB,GAAIC,KAA0B,IAAI;;MAEpD,IAAIA,KAAK,CAACC,SAAS,EAAE;QACjB,IAAI,CAAChC,MAAM,CAACiC,OAAO,CACf,sEAAsE,CACzE;QACD,IAAI,CAAChB,cAAc,CAACiB,mBAAmB,CAACrB,YAAY,CAACM,KAAK,CAAC;QAC3D,IAAI,CAAClB,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACC,oBAAoB,EAC9BtB,eAAe,CAACC,QAAQ,CAC3B;MACJ;IACL,CAAC;IAED,IAAI;;MAEA,IAAI,CAACb,iBAAiB,CAACO,eAAe,CAClCC,iBAAiB,CAAC2B,2DAA2D,EAC7E7B,OAAO,CAACH,aAAa,CACxB;MACD,MAAMiC,eAAe,GACjB,MAAM,IAAI,CAACC,kCAAkC,CAAC3B,YAAY,CAAC;;MAG/D,IAAI,CAACV,iBAAiB,CAACO,eAAe,CAClCC,iBAAiB,CAAC8B,6CAA6C,EAC/DhC,OAAO,CAACH,aAAa,CACxB;MACD,MAAMoC,UAAU,GACZ,MAAM,IAAI,CAACC,oBAAoB,CAC3BjB,sBAAsB,EACtBb,YAAY,CAACQ,SAAS,EACtBR,YAAY,CAAC+B,iBAAiB,CACjC;MACL,IAAI,CAAC5C,MAAM,CAACiC,OAAO,CAAC,0BAA0B,CAAC;;MAG/C,MAAMY,kBAAkB,GAAG,IAAIC,eAAe,CAC1CJ,UAAU,EACV,IAAI,CAACzB,cAAc,EACnBsB,eAAe,EACf,IAAI,CAACvC,MAAM,EACX,IAAI,CAACD,aAAa,EAClB,IAAI,CAACI,iBAAiB,CACzB;;MAGD,MAAM4C,WAAW,GAAG,MAAML,UAAU,CAACM,cAAc,CAAC;QAChD,GAAGnC,YAAY;QACfoC,YAAY,EAAEC,oBAAoB,CAACC,iBAAiB,CAChD,IAAI,CAACtD,MAAM,EACX,IAAI,CAACG,MAAM,EACX,IAAI,CAACK,oBAAoB,EACzBI,OAAO,CAAC2C,oBAAoB;MAEnC,EAAC;MAEF,MAAMC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAC/C7C,OAAO,CAAC4C,iBAAiB,CAC5B;MACD,IAAI,CAACrD,MAAM,CAACuD,UAAU,CAAyB,wBAAAF,iBAAmB,GAAC;;MAGnEG,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAE3B,gBAAgB,CAAC;;MAGrD,OAAO,MAAMe,kBAAkB,CAACa,mBAAmB,CAACX,WAAW,EAAE;QAC7D7C,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvCyD,eAAe,EAAE,IAAI,CAAC9D,MAAM,CAAC+D,MAAM,CAACC,yBAAyB;QAC7DR,iBAAiB,EAAEA,iBAAiB;QACpCS,kBAAkB,EAAErD,OAAO,CAACqD;MAC/B,EAAC;IACL,EAAC,OAAOC,CAAC,EAAE;MACR,IAAIA,CAAC,YAAYC,SAAS,EAAE;QACxBD,CAAC,CAACE,gBAAgB,CAAC,IAAI,CAAC3D,aAAa,CAAC;QACtCoB,sBAAsB,CAACwC,kBAAkB,CAACH,CAAC,CAAC;MAC/C;MACDP,MAAM,CAACW,mBAAmB,CAAC,UAAU,EAAErC,gBAAgB,CAAC;MACxD,IAAI,CAACb,cAAc,CAACiB,mBAAmB,CAACrB,YAAY,CAACM,KAAK,CAAC;MAC3D,MAAM4C,CAAC;IACV;;EAGL;;;;;AAKG;EACH,MAAMK,qBAAqBA,CACvBC,IAAa;IAEb,MAAM3C,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAACwC,qBAAqB,CAC9B;IACD,IAAI;MACA,IAAI,CAAC,IAAI,CAACnD,cAAc,CAACqD,uBAAuB,CAAC,IAAI,CAAC,EAAE;QACpD,IAAI,CAACtE,MAAM,CAACuE,IAAI,CACZ,uFAAuF,CAC1F;QACD,OAAO,IAAI;MACd;MACD,MAAMC,YAAY,GAAG,IAAI,CAACC,uBAAuB,CAC7CJ,IAAI,IAAIb,MAAM,CAACkB,QAAQ,CAACL,IAAI,CAC/B;MACD,IAAI,CAACG,YAAY,EAAE;;QAEf,IAAI,CAACxE,MAAM,CAACuE,IAAI,CACZ,2GAA2G,CAC9G;QACD,IAAI,CAACtD,cAAc,CAAC0D,6BAA6B,CAC7C5D,eAAe,CAACC,QAAQ,CAC3B;QACD,OAAO,IAAI;MACd;MAED,IAAIG,KAAa;MACjB,IAAI;;QAEA,MAAMyD,YAAY,GACdC,SAAS,CAACC,mBAAmB,CAACN,YAAY,CAAC;QAC/CrD,KAAK,GAAG,IAAI,CAAC4D,+BAA+B,CACxCH,YAAY,EACZ7D,eAAe,CAACC,QAAQ,CAC3B;QACD,IAAI,CAAChB,MAAM,CAACiC,OAAO,CAAC,2BAA2B,CAAC;MACnD,EAAC,OAAO8B,CAAC,EAAE;QACR,IAAI,CAAC/D,MAAM,CAACuE,IAAI,CACiD,6DAAAR,CAAG,GACnE;QACD,IAAI,CAAC9C,cAAc,CAAC0D,6BAA6B,CAC7C5D,eAAe,CAACC,QAAQ,CAC3B;QACD,OAAO,IAAI;MACd;;MAGD,MAAMgE,eAAe,GACjB,IAAI,CAAC/D,cAAc,CAACgE,iBAAiB,CACjCC,kBAAkB,CAACC,UAAU,EAC7B,IAAI,CACP,IAAI5D,SAAS,CAACC,YAAY;MAC/B,MAAM4D,yBAAyB,GAC3BP,SAAS,CAACQ,iBAAiB,CAACL,eAAe,CAAC;MAChD,MAAMM,oBAAoB,GAAGT,SAAS,CAACQ,iBAAiB,CACpD7B,MAAM,CAACkB,QAAQ,CAACa,IAAI,CACvB;MAED,IACIH,yBAAyB,KAAKE,oBAAoB,IAClD,IAAI,CAACzF,MAAM,CAAC2F,IAAI,CAACC,yBAAyB,EAC5C;;QAEE,IAAI,CAACzF,MAAM,CAACiC,OAAO,CACf,gDAAgD,CACnD;QACD,MAAMyD,gBAAgB,GAAG,MAAM,IAAI,CAACC,UAAU,CAC1CnB,YAAY,EACZrD,KAAK,EACLO,sBAAsB,CACzB;QAED,IAAIsD,eAAe,CAACY,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;;UAEnCC,YAAY,CAACC,WAAW,CAACd,eAAe,CAAC;QAC5C;QAED,OAAOU,gBAAgB;MAC1B,OAAM,IAAI,CAAC,IAAI,CAAC7F,MAAM,CAAC2F,IAAI,CAACC,yBAAyB,EAAE;QACpD,IAAI,CAACzF,MAAM,CAACiC,OAAO,CACf,uDAAuD,CAC1D;QACD,OAAO,IAAI,CAAC0D,UAAU,CAClBnB,YAAY,EACZrD,KAAK,EACLO,sBAAsB,CACzB;MACJ,OAAM,IACH,CAACmE,YAAY,CAACE,UAAU,EAAE,IAC1B,IAAI,CAAClG,MAAM,CAAC+D,MAAM,CAACoC,qBAAqB,EAC1C;QACE;;;AAGG;QACH,IAAI,CAAC/E,cAAc,CAACgF,iBAAiB,CACjCf,kBAAkB,CAACgB,QAAQ,EAC3B1B,YAAY,EACZ,IAAI,CACP;QACD,MAAM2B,iBAAiB,GAAsB;UACzCC,KAAK,EAAExE,KAAK,CAACwC,qBAAqB;UAClCiC,OAAO,EAAE,IAAI,CAACxG,MAAM,CAAC+D,MAAM,CAACC,yBAAyB;UACrDyC,SAAS,EAAE;SACd;QAED;;;AAGG;QACH,IAAIC,qBAAqB,GAAY,IAAI;QACzC,IAAI,CAACvB,eAAe,IAAIA,eAAe,KAAK,MAAM,EAAE;;UAEhD,MAAMwB,QAAQ,GAAGX,YAAY,CAACY,WAAW,EAAE;;UAE3C,IAAI,CAACxF,cAAc,CAACgF,iBAAiB,CACjCf,kBAAkB,CAACC,UAAU,EAC7BqB,QAAQ,EACR,IAAI,CACP;UACD,IAAI,CAACxG,MAAM,CAAC0G,OAAO,CACf,4EAA4E,CAC/E;UACDH,qBAAqB,GACjB,MAAM,IAAI,CAACrG,gBAAgB,CAACyG,gBAAgB,CACxCH,QAAQ,EACRL,iBAAiB,CACpB;QACR,OAAM;;UAEH,IAAI,CAACnG,MAAM,CAACiC,OAAO,CACmB,kCAAA+C,eAAiB,GACtD;UACDuB,qBAAqB,GACjB,MAAM,IAAI,CAACrG,gBAAgB,CAACyG,gBAAgB,CACxC3B,eAAe,EACfmB,iBAAiB,CACpB;QACR;;QAGD,IAAI,CAACI,qBAAqB,EAAE;UACxB,OAAO,IAAI,CAACZ,UAAU,CAClBnB,YAAY,EACZrD,KAAK,EACLO,sBAAsB,CACzB;QACJ;MACJ;MAED,OAAO,IAAI;IACd,EAAC,OAAOqC,CAAC,EAAE;MACR,IAAIA,CAAC,YAAYC,SAAS,EAAE;QACvBD,CAAe,CAACE,gBAAgB,CAAC,IAAI,CAAC3D,aAAa,CAAC;QACrDoB,sBAAsB,CAACwC,kBAAkB,CAACH,CAAC,CAAC;MAC/C;MACD,IAAI,CAAC9C,cAAc,CAAC0D,6BAA6B,CAC7C5D,eAAe,CAACC,QAAQ,CAC3B;MACD,MAAM+C,CAAC;IACV;;EAGL;;;;AAIG;EACOU,uBAAuBA,CAACJ,IAAY;IAC1C,IAAI,CAACrE,MAAM,CAACiC,OAAO,CAAC,gCAAgC,CAAC;;IAErD,MAAM2E,cAAc,GAChB/B,SAAS,CAACgC,2BAA2B,CAACxC,IAAI,CAAC;IAE/C,IAAIuC,cAAc,EAAE;MAChBf,YAAY,CAACiB,SAAS,CAACtD,MAAM,CAAC;MAC9B,IAAI,CAACxD,MAAM,CAACiC,OAAO,CACf,yDAAyD,CAC5D;MACD,OAAOoC,IAAI;IACd;IAED,MAAM0C,UAAU,GAAG,IAAI,CAAC9F,cAAc,CAACgE,iBAAiB,CACpDC,kBAAkB,CAACgB,QAAQ,EAC3B,IAAI,CACP;IACD,IAAI,CAACjF,cAAc,CAAC+F,UAAU,CAC1B,IAAI,CAAC/F,cAAc,CAACgG,gBAAgB,CAAC/B,kBAAkB,CAACgB,QAAQ,CAAC,CACpE;IAED,IAAI,CAAClG,MAAM,CAACiC,OAAO,CACf,+DAA+D,CAClE;IACD,OAAO8E,UAAU;;EAGrB;;;;AAIG;EACO,MAAMpB,UAAUA,CACtBtB,IAAY,EACZlD,KAAa,EACbO,sBAA8C;IAE9C,MAAMwF,aAAa,GAAG,IAAI,CAACjG,cAAc,CAACkG,gBAAgB,CACtDhG,KAAK,EACL,IAAI,CAACpB,aAAa,CACrB;IACD,IAAI,CAACC,MAAM,CAACiC,OAAO,CAAC,6CAA6C,CAAC;IAElE,MAAM2C,YAAY,GACdC,SAAS,CAACC,mBAAmB,CAACT,IAAI,CAAC;IAEvC,IAAIO,YAAY,CAACwC,SAAS,EAAE;MACxB,IAAI,CAACpH,MAAM,CAACiC,OAAO,CACf,iDAAiD,CACpD;MACD,IAAI,CAAC,IAAI,CAAC5B,oBAAoB,EAAE;QAC5B,MAAMgH,gBAAgB,CAACC,yCAAyC,EAAE;MACrE;MACD,MAAMC,uBAAuB,GAAG,IAAIC,uBAAuB,CACvD,IAAI,CAAC3H,MAAM,EACX,IAAI,CAACoB,cAAc,EACnB,IAAI,CAAClB,aAAa,EAClB,IAAI,CAACC,MAAM,EACX,IAAI,CAACC,YAAY,EACjB,IAAI,CAACC,gBAAgB,EACrB0B,KAAK,CAAC6F,iBAAiB,EACvB,IAAI,CAACtH,iBAAiB,EACtB,IAAI,CAACE,oBAAoB,EACzBuE,YAAY,CAACwC,SAAS,EACtB,IAAI,CAAC7G,aAAa,EAClB2G,aAAa,CAAC5G,aAAa,CAC9B;MACD,MAAM;QAAEoH;MAAgB,CAAE,GAAGC,aAAa,CAACC,iBAAiB,CACxD,IAAI,CAAC7H,aAAa,EAClBoB,KAAK,CACR;MACD,OAAOoG,uBAAuB,CACzB/G,YAAY,CAAC;QACV,GAAG0G,aAAa;QAChB/F,KAAK,EAAEuG,gBAAgB;QACvBG,MAAM,EAAEC,SAAS;OACpB,CAAC,CACDC,OAAO,CAAC,MAAK;QACV,IAAI,CAAC9G,cAAc,CAACiB,mBAAmB,CAACf,KAAK,CAAC;MAClD,CAAC,CAAC;IACT;;IAGD,MAAM6G,gBAAgB,GAAG,IAAI,CAAC/G,cAAc,CAACgH,kBAAkB,CAAC9G,KAAK,CAAC;IACtE,IAAI,CAAC6G,gBAAgB,EAAE;MACnB,MAAMX,gBAAgB,CAACa,4BAA4B,EAAE;IACxD;IACD,IAAI,CAAC/H,iBAAiB,CAACO,eAAe,CAClCC,iBAAiB,CAAC8B,6CAA6C,EAC/DyE,aAAa,CAAC5G,aAAa,CAC9B;IACD,MAAMoC,UAAU,GAAG,MAAM,IAAI,CAACC,oBAAoB,CAC9CjB,sBAAsB,EACtBsG,gBAAgB,CACnB;IACD,IAAI,CAAChI,MAAM,CAACiC,OAAO,CAAC,0BAA0B,CAAC;IAC/CkG,eAAe,CAACC,cAAc,CAC1B,IAAI,CAACnH,cAAc,EACnB,IAAI,CAACpB,MAAM,CAAC2F,IAAI,CAAC6C,QAAQ,EACzBnB,aAAa,CAChB;IACD,MAAMrE,kBAAkB,GAAG,IAAIC,eAAe,CAC1CJ,UAAU,EACV,IAAI,CAACzB,cAAc,EACnBiG,aAAa,EACb,IAAI,CAAClH,MAAM,EACX,IAAI,CAACD,aAAa,EAClB,IAAI,CAACI,iBAAiB,CACzB;IACD,OAAO,MAAM0C,kBAAkB,CAACyF,0BAA0B,CACtDjE,IAAI,EACJlD,KAAK,EACLuB,UAAU,CAACrB,SAAS,EACpB,IAAI,CAACkH,aAAa,CACrB;;EAGL;;;;AAIG;EACH,MAAMC,MAAMA,CAACC,aAAiC;IAC1C,IAAI,CAACzI,MAAM,CAACiC,OAAO,CAAC,uBAAuB,CAAC;IAC5C,MAAMyG,kBAAkB,GAAG,IAAI,CAACC,uBAAuB,CAACF,aAAa,CAAC;IACtE,MAAM/G,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAAC4G,MAAM,CACf;IAED,IAAI;MACA,IAAI,CAACvI,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACwG,YAAY,EACtB7H,eAAe,CAACC,QAAQ,EACxByH,aAAa,CAChB;;MAGD,MAAM,IAAI,CAACI,kBAAkB,CAACH,kBAAkB,CAACjH,OAAO,CAAC;MAEzD,MAAM0E,iBAAiB,GAAsB;QACzCC,KAAK,EAAExE,KAAK,CAAC4G,MAAM;QACnBnC,OAAO,EAAE,IAAI,CAACxG,MAAM,CAAC+D,MAAM,CAACC,yBAAyB;QACrDyC,SAAS,EAAE;OACd;MACD,IAAI,CAACnG,iBAAiB,CAACO,eAAe,CAClCC,iBAAiB,CAAC8B,6CAA6C,EAC/DiG,kBAAkB,CAACpI,aAAa,CACnC;MACD,MAAMoC,UAAU,GAAG,MAAM,IAAI,CAACC,oBAAoB,CAC9CjB,sBAAsB,EACtB+G,aAAa,IAAIA,aAAa,CAACpH,SAAS,CAC3C;MACD,IAAI,CAACrB,MAAM,CAACiC,OAAO,CAAC,0BAA0B,CAAC;MAE/C,IAAIS,UAAU,CAACrB,SAAS,CAACyH,YAAY,KAAKC,YAAY,CAACC,IAAI,EAAE;QACzD,IAAI;UACAtG,UAAU,CAACrB,SAAS,CAAC4H,kBAAkB;QAC1C,EAAC,MAAM;UACJ,IAAIP,kBAAkB,CAACjH,OAAO,EAAEyH,aAAa,EAAE;YAC3C,IAAI,CAACjI,cAAc,CAACkI,aAAa,CAC7BT,kBAAkB,CAACjH,OAAO,EAAEyH,aAAa,CAC5C;YAED,IAAI,CAACjJ,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACgH,cAAc,EACxBrI,eAAe,CAACC,QAAQ,EACxB0H,kBAAkB,CACrB;YAED;UACH;QACJ;MACJ;;MAGD,MAAMW,SAAS,GACX3G,UAAU,CAAC4G,YAAY,CAACZ,kBAAkB,CAAC;MAE/C,IAAI,CAACzI,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACgH,cAAc,EACxBrI,eAAe,CAACC,QAAQ,EACxB0H,kBAAkB,CACrB;;MAED,IACID,aAAa,IACb,OAAOA,aAAa,CAAC3E,kBAAkB,KAAK,UAAU,EACxD;QACE,MAAMyF,QAAQ,GAAGd,aAAa,CAAC3E,kBAAkB,CAACuF,SAAS,CAAC;QAE5D,IAAIE,QAAQ,KAAK,KAAK,EAAE;UACpB,IAAI,CAACvJ,MAAM,CAACiC,OAAO,CACf,4DAA4D,CAC/D;;UAED,IAAI,CAAC,IAAI,CAAChB,cAAc,CAACuI,wBAAwB,EAAE,EAAE;YACjD,IAAI,CAACvI,cAAc,CAACwI,wBAAwB,CAAC,IAAI,CAAC;UACrD;UACD,MAAM,IAAI,CAACvJ,gBAAgB,CAACwJ,gBAAgB,CACxCL,SAAS,EACTlD,iBAAiB,CACpB;UACD;QACH,OAAM;;UAEH,IAAI,CAAClF,cAAc,CAACwI,wBAAwB,CAAC,KAAK,CAAC;UACnD,IAAI,CAACzJ,MAAM,CAACiC,OAAO,CACf,+DAA+D,CAClE;QACJ;MACJ,OAAM;;QAEH,IAAI,CAAC,IAAI,CAAChB,cAAc,CAACuI,wBAAwB,EAAE,EAAE;UACjD,IAAI,CAACvI,cAAc,CAACwI,wBAAwB,CAAC,IAAI,CAAC;QACrD;QACD,MAAM,IAAI,CAACvJ,gBAAgB,CAACwJ,gBAAgB,CACxCL,SAAS,EACTlD,iBAAiB,CACpB;QACD;MACH;IACJ,EAAC,OAAOpC,CAAC,EAAE;MACR,IAAIA,CAAC,YAAYC,SAAS,EAAE;QACvBD,CAAe,CAACE,gBAAgB,CAAC,IAAI,CAAC3D,aAAa,CAAC;QACrDoB,sBAAsB,CAACwC,kBAAkB,CAACH,CAAC,CAAC;MAC/C;MACD,IAAI,CAAC9D,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACuH,cAAc,EACxB5I,eAAe,CAACC,QAAQ,EACxB,IAAI,EACJ+C,CAAe,CAClB;MACD,IAAI,CAAC9D,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACwH,UAAU,EACpB7I,eAAe,CAACC,QAAQ,CAC3B;MACD,MAAM+C,CAAC;IACV;IAED,IAAI,CAAC9D,YAAY,CAACkC,SAAS,CACvBC,SAAS,CAACwH,UAAU,EACpB7I,eAAe,CAACC,QAAQ,CAC3B;;EAGL;;;AAGG;EACOsC,oBAAoBA,CAACuG,gBAAyB;IACpD,MAAMxG,iBAAiB,GAAGwG,gBAAgB,IAAIrG,MAAM,CAACkB,QAAQ,CAACa,IAAI;IAClE,OAAOV,SAAS,CAACiF,cAAc,CAC3BzG,iBAAiB,EACjBwC,YAAY,CAACkE,aAAa,EAAE,CAC/B;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}