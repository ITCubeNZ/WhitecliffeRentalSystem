{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { AADAuthorityConstants, Constants, ServerResponseType } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Url object class which can perform various transformations on url strings.\n */\nclass UrlString {\n  get urlString() {\n    return this._urlString;\n  }\n  constructor(url) {\n    this._urlString = url;\n    if (StringUtils.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    if (StringUtils.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n  /**\n   * Ensure urls are lower case and end with a / character.\n   * @param url\n   */\n  static canonicalizeUri(url) {\n    if (url) {\n      let lowerCaseUrl = url.toLowerCase();\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n      return lowerCaseUrl;\n    }\n    return url;\n  }\n  /**\n   * Throws if urlString passed is not a valid authority URI string.\n   */\n  validateAsUri() {\n    // Attempts to parse url for uri components\n    let components;\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    }\n    // Throw error if URI or path segments are not parseable.\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n    }\n    // Throw error if uri is insecure.\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  }\n  /**\n   * Given a url and a query string return the url with provided query string appended\n   * @param url\n   * @param queryString\n   */\n  static appendQueryString(url, queryString) {\n    if (StringUtils.isEmpty(queryString)) {\n      return url;\n    }\n    return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n  }\n  /**\n   * Returns a url with the hash removed\n   * @param url\n   */\n  static removeHashFromUrl(url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  }\n  /**\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n   * @param href The url\n   * @param tenantId The tenant id to replace\n   */\n  replaceTenantPath(tenantId) {\n    const urlObject = this.getUrlComponents();\n    const pathArray = urlObject.PathSegments;\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  }\n  /**\n   * Returns the anchor part(#) of the URL\n   */\n  getHash() {\n    return UrlString.parseHash(this.urlString);\n  }\n  /**\n   * Parses out the components from a url string.\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n   */\n  getUrlComponents() {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    // If url string does not match regEx, we throw an error\n    const match = this.urlString.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n    }\n    // Url component object\n    const urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(val => val && val.length > 0); // remove empty elements\n    urlComponents.PathSegments = pathSegments;\n    if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n    return urlComponents;\n  }\n  static getDomainFromUrl(url) {\n    const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    const match = url.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\n    }\n    return match[2];\n  }\n  static getAbsoluteUrl(relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      const url = new UrlString(baseUrl);\n      const baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n    return relativeUrl;\n  }\n  /**\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\n   * @param hashString\n   */\n  static parseHash(hashString) {\n    const hashIndex1 = hashString.indexOf(\"#\");\n    const hashIndex2 = hashString.indexOf(\"#/\");\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Parses query string from given string. Returns empty string if no query symbol is found.\n   * @param queryString\n   */\n  static parseQueryString(queryString) {\n    const queryIndex1 = queryString.indexOf(\"?\");\n    const queryIndex2 = queryString.indexOf(\"/?\");\n    if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Parses query server response string from given string.\n   * Extract hash between '?code=' and '#' if trailing '# is present.\n   * Returns empty string if no query symbol is found.\n   * @param queryString\n   */\n  static parseQueryServerResponse(queryString) {\n    const queryIndex1 = queryString.indexOf(\"?code\");\n    const queryIndex2 = queryString.indexOf(\"/?code\");\n    const hashIndex = queryString.indexOf(\"#\");\n    if (queryIndex2 > -1 && hashIndex > -1) {\n      return queryString.substring(queryIndex2 + 2, hashIndex);\n    } else if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1 && hashIndex > -1) {\n      return queryString.substring(queryIndex1 + 1, hashIndex);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  }\n  static constructAuthorityUriFromObject(urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  }\n  /**\n   * Returns URL hash as server auth code response object.\n   */\n  static getDeserializedHash(hash) {\n    // Check if given hash is empty\n    if (StringUtils.isEmpty(hash)) {\n      return {};\n    }\n    // Strip the # symbol if present\n    const parsedHash = UrlString.parseHash(hash);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    const deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\n    // Check if deserialization didn't work\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n    return deserializedHash;\n  }\n  /**\n   * Returns URL query string as server auth code response object.\n   */\n  static getDeserializedQueryString(query) {\n    // Check if given query is empty\n    if (StringUtils.isEmpty(query)) {\n      return {};\n    }\n    // Strip the ? symbol if present\n    const parsedQueryString = UrlString.parseQueryString(query);\n    // If ? symbol was not present, above will return empty string, so give original query value\n    const deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);\n    // Check if deserialization didn't work\n    if (!deserializedQueryString) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\n    }\n    return deserializedQueryString;\n  }\n  /**\n   * Returns either deserialized query string or deserialized hash, depending on the serverResponseType\n   * as a server auth code response object.\n   */\n  static getDeserializedCodeResponse(serverResponseType, hashFragment) {\n    const hashUrlString = new UrlString(hashFragment);\n    let serverParams;\n    if (serverResponseType === ServerResponseType.QUERY) {\n      serverParams = UrlString.getDeserializedQueryString(hashFragment);\n    } else {\n      serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n    return serverParams;\n  }\n  /**\n   * Check if the hash of the URL string contains known properties\n   */\n  static hashContainsKnownProperties(hash) {\n    if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n      // Hash doesn't contain key/value pairs\n      return false;\n    }\n    const parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  }\n}\nexport { UrlString };","map":{"version":3,"names":["UrlString","urlString","_urlString","constructor","url","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError","getHash","canonicalizeUri","lowerCaseUrl","toLowerCase","endsWith","slice","validateAsUri","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","Protocol","createInsecureAuthorityUriError","appendQueryString","queryString","indexOf","removeHashFromUrl","split","replaceTenantPath","tenantId","urlObject","pathArray","length","AADAuthorityConstants","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","RegExp","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","getDomainFromUrl","getAbsoluteUrl","relativeUrl","baseUrl","Constants","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","EMPTY_STRING","parseQueryString","queryIndex1","queryIndex2","parseQueryServerResponse","hashIndex","join","getDeserializedHash","hash","parsedHash","deserializedHash","queryStringToObject","ClientAuthError","createHashNotDeserializedError","JSON","stringify","getDeserializedQueryString","query","parsedQueryString","deserializedQueryString","getDeserializedCodeResponse","serverResponseType","hashFragment","hashUrlString","serverParams","ServerResponseType","QUERY","hashContainsKnownProperties","parameters","code","error_description","error","state"],"sources":["../../src/url/UrlString.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}