{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from './entities/AccountEntity.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { AuthToken } from '../account/AuthToken.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\n * @internal\n */\nclass CacheManager {\n  constructor(clientId, cryptoImpl, logger) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n    this.commonLogger = logger.clone(name, version);\n  }\n  /**\n   * Returns all accounts in cache\n   */\n  getAllAccounts() {\n    const allAccountKeys = this.getAccountKeys();\n    if (allAccountKeys.length < 1) {\n      return [];\n    }\n    const accountEntities = allAccountKeys.reduce((accounts, key) => {\n      const entity = this.getAccount(key);\n      if (!entity) {\n        return accounts;\n      }\n      accounts.push(entity);\n      return accounts;\n    }, []);\n    if (accountEntities.length < 1) {\n      return [];\n    } else {\n      const allAccounts = accountEntities.map(accountEntity => {\n        return this.getAccountInfoFromEntity(accountEntity);\n      });\n      return allAccounts;\n    }\n  }\n  /**\n   * Gets accountInfo object based on provided filters\n   */\n  getAccountInfoFilteredBy(accountFilter) {\n    const allAccounts = this.getAccountsFilteredBy(accountFilter);\n    if (allAccounts.length > 0) {\n      return this.getAccountInfoFromEntity(allAccounts[0]);\n    } else {\n      return null;\n    }\n  }\n  getAccountInfoFromEntity(accountEntity) {\n    const accountInfo = accountEntity.getAccountInfo();\n    const idToken = this.getIdToken(accountInfo);\n    if (idToken) {\n      accountInfo.idToken = idToken.secret;\n      accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n    }\n    return accountInfo;\n  }\n  /**\n   * saves a cache record\n   * @param cacheRecord\n   */\n  async saveCacheRecord(cacheRecord, storeInCache) {\n    if (!cacheRecord) {\n      throw ClientAuthError.createNullOrUndefinedCacheRecord();\n    }\n    if (!!cacheRecord.account) {\n      this.setAccount(cacheRecord.account);\n    }\n    if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\n      this.setIdTokenCredential(cacheRecord.idToken);\n    }\n    if (!!cacheRecord.accessToken && storeInCache?.accessToken !== false) {\n      await this.saveAccessToken(cacheRecord.accessToken);\n    }\n    if (!!cacheRecord.refreshToken && storeInCache?.refreshToken !== false) {\n      this.setRefreshTokenCredential(cacheRecord.refreshToken);\n    }\n    if (!!cacheRecord.appMetadata) {\n      this.setAppMetadata(cacheRecord.appMetadata);\n    }\n  }\n  /**\n   * saves access token credential\n   * @param credential\n   */\n  async saveAccessToken(credential) {\n    const accessTokenFilter = {\n      clientId: credential.clientId,\n      credentialType: credential.credentialType,\n      environment: credential.environment,\n      homeAccountId: credential.homeAccountId,\n      realm: credential.realm,\n      tokenType: credential.tokenType,\n      requestedClaimsHash: credential.requestedClaimsHash\n    };\n    const tokenKeys = this.getTokenKeys();\n    const currentScopes = ScopeSet.fromString(credential.target);\n    const removedAccessTokens = [];\n    tokenKeys.accessToken.forEach(key => {\n      if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n        return;\n      }\n      const tokenEntity = this.getAccessTokenCredential(key);\n      if (tokenEntity && this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n        const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n        if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n          removedAccessTokens.push(this.removeAccessToken(key));\n        }\n      }\n    });\n    await Promise.all(removedAccessTokens);\n    this.setAccessTokenCredential(credential);\n  }\n  /**\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n   * @param homeAccountId\n   * @param environment\n   * @param realm\n   */\n  getAccountsFilteredBy(accountFilter) {\n    const allAccountKeys = this.getAccountKeys();\n    const matchingAccounts = [];\n    allAccountKeys.forEach(cacheKey => {\n      if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\n        // Don't parse value if the key doesn't match the account filters\n        return;\n      }\n      const entity = this.getAccount(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!accountFilter.homeAccountId && !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n        return;\n      }\n      if (!!accountFilter.localAccountId && !this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\n        return;\n      }\n      if (!!accountFilter.username && !this.matchUsername(entity, accountFilter.username)) {\n        return;\n      }\n      if (!!accountFilter.environment && !this.matchEnvironment(entity, accountFilter.environment)) {\n        return;\n      }\n      if (!!accountFilter.realm && !this.matchRealm(entity, accountFilter.realm)) {\n        return;\n      }\n      if (!!accountFilter.nativeAccountId && !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n        return;\n      }\n      matchingAccounts.push(entity);\n    });\n    return matchingAccounts;\n  }\n  /**\n   * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\n   * @param key\n   * @param homeAccountId\n   * @param tenantId\n   * @returns\n   */\n  isAccountKey(key, homeAccountId, tenantId) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\n      // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n    if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n      return false;\n    }\n    if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n      return false;\n    }\n    // Do not check environment as aliasing can cause false negatives\n    return true;\n  }\n  /**\n   * Returns true if the given key matches our credential key schema.\n   * @param key\n   */\n  isCredentialKey(key) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\n      // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n    const lowerCaseKey = key.toLowerCase();\n    // Credential keys must indicate what credential type they represent\n    if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n      return false;\n    }\n    if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n      // Refresh tokens must contain the client id or family id\n      const clientIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${this.clientId}${Separators.CACHE_KEY_SEPARATOR}`;\n      const familyIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${THE_FAMILY_ID}${Separators.CACHE_KEY_SEPARATOR}`;\n      if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n        return false;\n      }\n    } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n      // Tokens must contain the clientId\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns whether or not the given credential entity matches the filter\n   * @param entity\n   * @param filter\n   * @returns\n   */\n  credentialMatchesFilter(entity, filter) {\n    if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n      return false;\n    }\n    if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n      return false;\n    }\n    /*\n     * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\n     * because we don't want a client_credential request to return a cached token that has a homeAccountId\n     */\n    if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n      return false;\n    }\n    if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n      return false;\n    }\n    if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n      return false;\n    }\n    if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n      return false;\n    }\n    if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n      return false;\n    }\n    /*\n     * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\n     * Resource specific refresh tokens case will be added when the support is deemed necessary\n     */\n    if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n      return false;\n    }\n    // If request OR cached entity has requested Claims Hash, check if they match\n    if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n      // Don't match if either is undefined or they are different\n      if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n        return false;\n      }\n    }\n    // Access Token with Auth Scheme specific matching\n    if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n      if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n        return false;\n      }\n      // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n      if (filter.tokenType === AuthenticationScheme.SSH) {\n        if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\n   * @param filter\n   */\n  getAppMetadataFilteredBy(filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  }\n  /**\n   * Support function to help match appMetadata\n   * @param environment\n   * @param clientId\n   */\n  getAppMetadataFilteredByInternal(environment, clientId) {\n    const allCacheKeys = this.getKeys();\n    const matchingAppMetadata = {};\n    allCacheKeys.forEach(cacheKey => {\n      // don't parse any non-appMetadata type cache entities\n      if (!this.isAppMetadata(cacheKey)) {\n        return;\n      }\n      // Attempt retrieval\n      const entity = this.getAppMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!environment && !this.matchEnvironment(entity, environment)) {\n        return;\n      }\n      if (!!clientId && !this.matchClientId(entity, clientId)) {\n        return;\n      }\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  }\n  /**\n   * retrieve authorityMetadata that contains a matching alias\n   * @param filter\n   */\n  getAuthorityMetadataByAlias(host) {\n    const allCacheKeys = this.getAuthorityMetadataKeys();\n    let matchedEntity = null;\n    allCacheKeys.forEach(cacheKey => {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n        return;\n      }\n      // Attempt retrieval\n      const entity = this.getAuthorityMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  }\n  /**\n   * Removes all accounts and related tokens from cache.\n   */\n  async removeAllAccounts() {\n    const allAccountKeys = this.getAccountKeys();\n    const removedAccounts = [];\n    allAccountKeys.forEach(cacheKey => {\n      removedAccounts.push(this.removeAccount(cacheKey));\n    });\n    await Promise.all(removedAccounts);\n  }\n  /**\n   * Removes the account and related tokens for a given account key\n   * @param account\n   */\n  async removeAccount(accountKey) {\n    const account = this.getAccount(accountKey);\n    if (!account) {\n      return;\n    }\n    await this.removeAccountContext(account);\n    this.removeItem(accountKey);\n  }\n  /**\n   * Removes credentials associated with the provided account\n   * @param account\n   */\n  async removeAccountContext(account) {\n    const allTokenKeys = this.getTokenKeys();\n    const accountId = account.generateAccountId();\n    const removedCredentials = [];\n    allTokenKeys.idToken.forEach(key => {\n      if (key.indexOf(accountId) === 0) {\n        this.removeIdToken(key);\n      }\n    });\n    allTokenKeys.accessToken.forEach(key => {\n      if (key.indexOf(accountId) === 0) {\n        removedCredentials.push(this.removeAccessToken(key));\n      }\n    });\n    allTokenKeys.refreshToken.forEach(key => {\n      if (key.indexOf(accountId) === 0) {\n        this.removeRefreshToken(key);\n      }\n    });\n    await Promise.all(removedCredentials);\n  }\n  /**\n   * returns a boolean if the given credential is removed\n   * @param credential\n   */\n  async removeAccessToken(key) {\n    const credential = this.getAccessTokenCredential(key);\n    if (!credential) {\n      return;\n    }\n    // Remove Token Binding Key from key store for PoP Tokens Credentials\n    if (credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n      if (credential.tokenType === AuthenticationScheme.POP) {\n        const accessTokenWithAuthSchemeEntity = credential;\n        const kid = accessTokenWithAuthSchemeEntity.keyId;\n        if (kid) {\n          try {\n            await this.cryptoImpl.removeTokenBindingKey(kid);\n          } catch (error) {\n            throw ClientAuthError.createBindingKeyNotRemovedError();\n          }\n        }\n      }\n    }\n    return this.removeItem(key);\n  }\n  /**\n   * Removes all app metadata objects from cache.\n   */\n  removeAppMetadata() {\n    const allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(cacheKey => {\n      if (this.isAppMetadata(cacheKey)) {\n        this.removeItem(cacheKey);\n      }\n    });\n    return true;\n  }\n  /**\n   * Retrieve the cached credentials into a cacherecord\n   * @param account\n   * @param clientId\n   * @param scopes\n   * @param environment\n   * @param authScheme\n   */\n  readCacheRecord(account, request, environment) {\n    const tokenKeys = this.getTokenKeys();\n    const cachedAccount = this.readAccountFromCache(account);\n    const cachedIdToken = this.getIdToken(account, tokenKeys);\n    const cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\n    const cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\n    const cachedAppMetadata = this.readAppMetadataFromCache(environment);\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  }\n  /**\n   * Retrieve AccountEntity from cache\n   * @param account\n   */\n  readAccountFromCache(account) {\n    const accountKey = AccountEntity.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  }\n  /**\n   * Retrieve IdTokenEntity from cache\n   * @param clientId\n   * @param account\n   * @param inputRealm\n   */\n  getIdToken(account, tokenKeys) {\n    this.commonLogger.trace(\"CacheManager - getIdToken called\");\n    const idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.clientId,\n      realm: account.tenantId\n    };\n    const idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n    const numIdTokens = idTokens.length;\n    if (numIdTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n      return null;\n    } else if (numIdTokens > 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - Multiple id tokens found, clearing them\");\n      idTokens.forEach(idToken => {\n        this.removeIdToken(idToken.generateCredentialKey());\n      });\n      return null;\n    }\n    this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\n    return idTokens[0];\n  }\n  /**\n   * Gets all idTokens matching the given filter\n   * @param filter\n   * @returns\n   */\n  getIdTokensByFilter(filter, tokenKeys) {\n    const idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n    const idTokens = [];\n    idTokenKeys.forEach(key => {\n      if (!this.idTokenKeyMatchesFilter(key, {\n        clientId: this.clientId,\n        ...filter\n      })) {\n        return;\n      }\n      const idToken = this.getIdTokenCredential(key);\n      if (idToken && this.credentialMatchesFilter(idToken, filter)) {\n        idTokens.push(idToken);\n      }\n    });\n    return idTokens;\n  }\n  /**\n   * Validate the cache key against filter before retrieving and parsing cache value\n   * @param key\n   * @param filter\n   * @returns\n   */\n  idTokenKeyMatchesFilter(inputKey, filter) {\n    const key = inputKey.toLowerCase();\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Removes idToken from the cache\n   * @param key\n   */\n  removeIdToken(key) {\n    this.removeItem(key);\n  }\n  /**\n   * Removes refresh token from the cache\n   * @param key\n   */\n  removeRefreshToken(key) {\n    this.removeItem(key);\n  }\n  /**\n   * Retrieve AccessTokenEntity from cache\n   * @param clientId\n   * @param account\n   * @param scopes\n   * @param authScheme\n   */\n  getAccessToken(account, request, tokenKeys) {\n    this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n    const scopes = ScopeSet.createSearchScopes(request.scopes);\n    const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\n     * Distinguish between Bearer and PoP/SSH token cache types\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    const credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    const accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: this.clientId,\n      realm: account.tenantId,\n      target: scopes,\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash\n    };\n    const accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n    const accessTokens = [];\n    accessTokenKeys.forEach(key => {\n      // Validate key\n      if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n        const accessToken = this.getAccessTokenCredential(key);\n        // Validate value\n        if (accessToken && this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n          accessTokens.push(accessToken);\n        }\n      }\n    });\n    const numAccessTokens = accessTokens.length;\n    if (numAccessTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n      return null;\n    } else if (numAccessTokens > 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n      accessTokens.forEach(accessToken => {\n        this.removeAccessToken(accessToken.generateCredentialKey());\n      });\n      return null;\n    }\n    this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n    return accessTokens[0];\n  }\n  /**\n   * Validate the cache key against filter before retrieving and parsing cache value\n   * @param key\n   * @param filter\n   * @param keyMustContainAllScopes\n   * @returns\n   */\n  accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\n    const key = inputKey.toLowerCase();\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.target) {\n      const scopes = filter.target.asArray();\n      for (let i = 0; i < scopes.length; i++) {\n        if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache lookup a missing scope would be a cache miss\n          return false;\n        } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache write, any token with a subset of requested scopes should be replaced\n          return true;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * Gets all access tokens matching the filter\n   * @param filter\n   * @returns\n   */\n  getAccessTokensByFilter(filter) {\n    const tokenKeys = this.getTokenKeys();\n    const accessTokens = [];\n    tokenKeys.accessToken.forEach(key => {\n      if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\n        return;\n      }\n      const accessToken = this.getAccessTokenCredential(key);\n      if (accessToken && this.credentialMatchesFilter(accessToken, filter)) {\n        accessTokens.push(accessToken);\n      }\n    });\n    return accessTokens;\n  }\n  /**\n   * Helper to retrieve the appropriate refresh token from cache\n   * @param clientId\n   * @param account\n   * @param familyRT\n   */\n  getRefreshToken(account, familyRT, tokenKeys) {\n    this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n    const id = familyRT ? THE_FAMILY_ID : undefined;\n    const refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: this.clientId,\n      familyId: id\n    };\n    const refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n    const refreshTokens = [];\n    refreshTokenKeys.forEach(key => {\n      // Validate key\n      if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n        const refreshToken = this.getRefreshTokenCredential(key);\n        // Validate value\n        if (refreshToken && this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n          refreshTokens.push(refreshToken);\n        }\n      }\n    });\n    const numRefreshTokens = refreshTokens.length;\n    if (numRefreshTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n      return null;\n    }\n    // address the else case after remove functions address environment aliases\n    this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n    return refreshTokens[0];\n  }\n  /**\n   * Validate the cache key against filter before retrieving and parsing cache value\n   * @param key\n   * @param filter\n   */\n  refreshTokenKeyMatchesFilter(inputKey, filter) {\n    const key = inputKey.toLowerCase();\n    if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n      return false;\n    }\n    // If familyId is used, clientId is not in the key\n    if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Retrieve AppMetadataEntity from cache\n   */\n  readAppMetadataFromCache(environment) {\n    const appMetadataFilter = {\n      environment,\n      clientId: this.clientId\n    };\n    const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    const appMetadataEntries = Object.keys(appMetadata).map(key => appMetadata[key]);\n    const numAppMetadata = appMetadataEntries.length;\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n    }\n    return appMetadataEntries[0];\n  }\n  /**\n   * Return the family_id value associated  with FOCI\n   * @param environment\n   * @param clientId\n   */\n  isAppMetadataFOCI(environment) {\n    const appMetadata = this.readAppMetadataFromCache(environment);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  }\n  /**\n   * helper to match account ids\n   * @param value\n   * @param homeAccountId\n   */\n  matchHomeAccountId(entity, homeAccountId) {\n    return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n  }\n  /**\n   * helper to match account ids\n   * @param entity\n   * @param localAccountId\n   * @returns\n   */\n  matchLocalAccountId(entity, localAccountId) {\n    return !!(typeof entity.localAccountId === \"string\" && localAccountId === entity.localAccountId);\n  }\n  /**\n   * helper to match usernames\n   * @param entity\n   * @param username\n   * @returns\n   */\n  matchUsername(entity, username) {\n    return !!(typeof entity.username === \"string\" && username.toLowerCase() === entity.username.toLowerCase());\n  }\n  /**\n   * helper to match assertion\n   * @param value\n   * @param oboAssertion\n   */\n  matchUserAssertionHash(entity, userAssertionHash) {\n    return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n  }\n  /**\n   * helper to match environment\n   * @param value\n   * @param environment\n   */\n  matchEnvironment(entity, environment) {\n    const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * helper to match credential type\n   * @param entity\n   * @param credentialType\n   */\n  matchCredentialType(entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  }\n  /**\n   * helper to match client ids\n   * @param entity\n   * @param clientId\n   */\n  matchClientId(entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  }\n  /**\n   * helper to match family ids\n   * @param entity\n   * @param familyId\n   */\n  matchFamilyId(entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  }\n  /**\n   * helper to match realm\n   * @param entity\n   * @param realm\n   */\n  matchRealm(entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  }\n  /**\n   * helper to match nativeAccountId\n   * @param entity\n   * @param nativeAccountId\n   * @returns boolean indicating the match result\n   */\n  matchNativeAccountId(entity, nativeAccountId) {\n    return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n  }\n  /**\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\n   * @param entity\n   * @param target\n   */\n  matchTarget(entity, target) {\n    const isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n    const entityScopeSet = ScopeSet.fromString(entity.target);\n    return entityScopeSet.containsScopeSet(target);\n  }\n  /**\n   * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\n   * @param entity\n   * @param tokenType\n   */\n  matchTokenType(entity, tokenType) {\n    return !!(entity.tokenType && entity.tokenType === tokenType);\n  }\n  /**\n   * Returns true if the credential's keyId matches the one in the request, false otherwise\n   * @param entity\n   * @param tokenType\n   */\n  matchKeyId(entity, keyId) {\n    return !!(entity.keyId && entity.keyId === keyId);\n  }\n  /**\n   * returns if a given cache entity is of the type appmetadata\n   * @param key\n   */\n  isAppMetadata(key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  }\n  /**\n   * returns if a given cache entity is of the type authoritymetadata\n   * @param key\n   */\n  isAuthorityMetadata(key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  }\n  /**\n   * returns cache key used for cloud instance metadata\n   */\n  generateAuthorityMetadataCacheKey(authority) {\n    return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n  }\n  /**\n   * Helper to convert serialized data to object\n   * @param obj\n   * @param json\n   */\n  static toObject(obj, json) {\n    for (const propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n    return obj;\n  }\n}\n/** @internal */\nclass DefaultStorageClass extends CacheManager {\n  setAccount() {\n    const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getAccount() {\n    const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setIdTokenCredential() {\n    const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getIdTokenCredential() {\n    const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setAccessTokenCredential() {\n    const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getAccessTokenCredential() {\n    const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setRefreshTokenCredential() {\n    const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getRefreshTokenCredential() {\n    const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setAppMetadata() {\n    const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getAppMetadata() {\n    const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setServerTelemetry() {\n    const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getServerTelemetry() {\n    const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setAuthorityMetadata() {\n    const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getAuthorityMetadata() {\n    const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getAuthorityMetadataKeys() {\n    const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  setThrottlingCache() {\n    const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getThrottlingCache() {\n    const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  removeItem() {\n    const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  containsKey() {\n    const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getKeys() {\n    const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getAccountKeys() {\n    const notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  getTokenKeys() {\n    const notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  async clear() {\n    const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n  updateCredentialCacheKey() {\n    const notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n}\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"names":["CacheManager","constructor","clientId","cryptoImpl","logger","commonLogger","clone","name","version","getAllAccounts","allAccountKeys","getAccountKeys","length","accountEntities","reduce","accounts","key","entity","getAccount","push","allAccounts","map","accountEntity","getAccountInfoFromEntity","getAccountInfoFilteredBy","accountFilter","getAccountsFilteredBy","accountInfo","getAccountInfo","idToken","getIdToken","secret","idTokenClaims","AuthToken","claims","saveCacheRecord","cacheRecord","storeInCache","ClientAuthError","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","accessTokenFilter","credentialType","environment","homeAccountId","realm","tokenType","requestedClaimsHash","tokenKeys","getTokenKeys","currentScopes","ScopeSet","fromString","target","removedAccessTokens","forEach","accessTokenKeyMatchesFilter","tokenEntity","getAccessTokenCredential","credentialMatchesFilter","tokenScopeSet","intersectingScopeSets","removeAccessToken","Promise","all","setAccessTokenCredential","matchingAccounts","cacheKey","isAccountKey","matchHomeAccountId","localAccountId","matchLocalAccountId","username","matchUsername","matchEnvironment","matchRealm","nativeAccountId","matchNativeAccountId","tenantId","split","Separators","CACHE_KEY_SEPARATOR","toLowerCase","includes","isCredentialKey","lowerCaseKey","indexOf","CredentialType","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","clientIdValidation","familyIdValidation","THE_FAMILY_ID","filter","matchClientId","userAssertionHash","matchUserAssertionHash","matchCredentialType","familyId","matchFamilyId","matchTarget","matchTokenType","AuthenticationScheme","SSH","keyId","matchKeyId","getAppMetadataFilteredBy","getAppMetadataFilteredByInternal","allCacheKeys","getKeys","matchingAppMetadata","isAppMetadata","getAppMetadata","getAuthorityMetadataByAlias","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","getAuthorityMetadata","aliases","removeAllAccounts","removedAccounts","removeAccount","accountKey","removeAccountContext","removeItem","allTokenKeys","accountId","generateAccountId","removedCredentials","removeIdToken","removeRefreshToken","POP","accessTokenWithAuthSchemeEntity","kid","removeTokenBindingKey","error","createBindingKeyNotRemovedError","removeAppMetadata","readCacheRecord","request","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","getAccessToken","cachedRefreshToken","getRefreshToken","cachedAppMetadata","readAppMetadataFromCache","AccountEntity","generateAccountCacheKey","trace","idTokenFilter","idTokens","getIdTokensByFilter","numIdTokens","info","generateCredentialKey","idTokenKeys","idTokenKeyMatchesFilter","getIdTokenCredential","inputKey","scopes","createSearchScopes","authScheme","authenticationScheme","BEARER","sshKid","accessTokenKeys","accessTokens","numAccessTokens","keyMustContainAllScopes","asArray","i","getAccessTokensByFilter","familyRT","id","undefined","refreshTokenFilter","refreshTokenKeys","refreshTokens","refreshTokenKeyMatchesFilter","getRefreshTokenCredential","numRefreshTokens","appMetadataFilter","appMetadataEntries","Object","keys","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","isAppMetadataFOCI","cloudMetadata","isNotAccessTokenCredential","entityScopeSet","containsScopeSet","APP_METADATA","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","generateAuthorityMetadataCacheKey","authority","toObject","obj","json","propertyName","DefaultStorageClass","notImplErr","AuthError","createUnexpectedError","setServerTelemetry","getServerTelemetry","setAuthorityMetadata","setThrottlingCache","getThrottlingCache","containsKey","clear","updateCredentialCacheKey"],"sources":["../../src/cache/CacheManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}