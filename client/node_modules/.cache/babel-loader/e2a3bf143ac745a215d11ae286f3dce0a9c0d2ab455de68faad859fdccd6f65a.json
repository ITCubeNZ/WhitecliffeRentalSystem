{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { AuthError } from '../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n  createNewGuid: () => {\n    const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  base64Decode: () => {\n    const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  base64Encode: () => {\n    const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async generatePkceCodes() {\n    const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async getPublicKeyThumbprint() {\n    const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async removeTokenBindingKey() {\n    const notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async clearKeystore() {\n    const notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async signJwt() {\n    const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async hashString() {\n    const notImplErr = \"Crypto interface - hashString() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n};\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };","map":{"version":3,"names":["DEFAULT_CRYPTO_IMPLEMENTATION","createNewGuid","notImplErr","AuthError","createUnexpectedError","base64Decode","base64Encode","generatePkceCodes","getPublicKeyThumbprint","removeTokenBindingKey","clearKeystore","signJwt","hashString"],"sources":["../../src/crypto/ICrypto.ts"],"sourcesContent":[null],"mappings":";;;;;AAAA;;;AAGG;AA6EU,MAAAA,6BAA6B,GAAY;EAClDC,aAAa,EAAEA,CAAA,KAAa;IACxB,MAAMC,UAAU,GACZ,6DAA6D;IACjE,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACDG,YAAY,EAAEA,CAAA,KAAa;IACvB,MAAMH,UAAU,GACZ,4DAA4D;IAChE,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACDI,YAAY,EAAEA,CAAA,KAAa;IACvB,MAAMJ,UAAU,GACZ,4DAA4D;IAChE,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACD,MAAMK,iBAAiBA,CAAA;IACnB,MAAML,UAAU,GACZ,iEAAiE;IACrE,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACD,MAAMM,sBAAsBA,CAAA;IACxB,MAAMN,UAAU,GACZ,sEAAsE;IAC1E,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACD,MAAMO,qBAAqBA,CAAA;IACvB,MAAMP,UAAU,GACZ,qEAAqE;IACzE,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACD,MAAMQ,aAAaA,CAAA;IACf,MAAMR,UAAU,GACZ,6DAA6D;IACjE,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACD,MAAMS,OAAOA,CAAA;IACT,MAAMT,UAAU,GACZ,uDAAuD;IAC3D,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;GACpD;EACD,MAAMU,UAAUA,CAAA;IACZ,MAAMV,UAAU,GACZ,0DAA0D;IAC9D,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}