{"ast":null,"code":"/*! @azure/msal-browser v3.0.2 2023-08-18 */\n'use strict';\n\nimport { StringUtils, ClientAuthError, ServerError } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.mjs';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.mjs';\nimport { InteractionHandler } from './InteractionHandler.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass RedirectHandler extends InteractionHandler {\n  constructor(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto, performanceClient) {\n    super(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient);\n    this.browserCrypto = browserCrypto;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n  async initiateAuthRequest(requestUrl, params) {\n    this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n    // Navigate if valid URL\n    if (!StringUtils.isEmpty(requestUrl)) {\n      // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n      if (params.redirectStartPage) {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n      }\n      // Set interaction status in the library.\n      this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n      this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n      this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n      const navigationOptions = {\n        apiId: ApiId.acquireTokenRedirect,\n        timeout: params.redirectTimeout,\n        noHistory: false\n      };\n      // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n      if (typeof params.onRedirectNavigate === \"function\") {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n        const navigate = params.onRedirectNavigate(requestUrl);\n        // Returning false from onRedirectNavigate will stop navigation\n        if (navigate !== false) {\n          this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n          await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n          return;\n        } else {\n          this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n          return;\n        }\n      } else {\n        // Navigate window to request URL\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n        await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n        return;\n      }\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  }\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n  async handleCodeResponseFromHash(locationHash, state, authority, networkModule) {\n    this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n    // Check that location hash isn't empty.\n    if (StringUtils.isEmpty(locationHash)) {\n      throw BrowserAuthError.createEmptyHashError();\n    }\n    // Interaction is completed - remove interaction status.\n    this.browserStorage.setInteractionInProgress(false);\n    // Handle code response.\n    const stateKey = this.browserStorage.generateStateKey(state);\n    const requestState = this.browserStorage.getTemporaryCache(stateKey);\n    if (!requestState) {\n      throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n    }\n    let authCodeResponse;\n    try {\n      authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n    } catch (e) {\n      if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n        // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n        throw BrowserAuthError.createUserCancelledError();\n      } else {\n        throw e;\n      }\n    }\n    // Get cached items\n    const nonceKey = this.browserStorage.generateNonceKey(requestState);\n    const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n    // Assign code to request\n    this.authCodeRequest.code = authCodeResponse.code;\n    // Check for new cloud instance\n    if (authCodeResponse.cloud_instance_host_name) {\n      await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n    }\n    authCodeResponse.nonce = cachedNonce || undefined;\n    authCodeResponse.state = requestState;\n    // Add CCS parameters if available\n    if (authCodeResponse.client_info) {\n      this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n    } else {\n      const cachedCcsCred = this.checkCcsCredentials();\n      if (cachedCcsCred) {\n        this.authCodeRequest.ccsCredential = cachedCcsCred;\n      }\n    }\n    // Acquire token with retrieved code.\n    const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n    this.browserStorage.cleanRequestByState(state);\n    return tokenResponse;\n  }\n}\nexport { RedirectHandler };","map":{"version":3,"names":["RedirectHandler","InteractionHandler","constructor","authCodeModule","storageImpl","authCodeRequest","logger","browserCrypto","performanceClient","initiateAuthRequest","requestUrl","params","verbose","StringUtils","isEmpty","redirectStartPage","browserStorage","setTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","CORRELATION_ID","correlationId","cacheCodeRequest","infoPii","navigationOptions","apiId","ApiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigate","navigationClient","navigateExternal","info","BrowserAuthError","createEmptyNavigationUriError","handleCodeResponseFromHash","locationHash","state","authority","networkModule","createEmptyHashError","setInteractionInProgress","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","authModule","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","tokenResponse","acquireToken","cleanRequestByState"],"sources":["../../src/interaction_handler/RedirectHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}