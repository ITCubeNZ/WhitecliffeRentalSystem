{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * JWT Token representation class. Parses token string and generates claims object.\n */\nclass AuthToken {\n  constructor(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\n   * Extract token by decoding the rawToken\n   *\n   * @param encodedToken\n   */\n  static extractTokenClaims(encodedToken, crypto) {\n    const decodedToken = StringUtils.decodeAuthToken(encodedToken);\n    // token will be decoded to get the username\n    try {\n      const base64TokenPayload = decodedToken.JWSPayload;\n      // base64Decode() should throw an error if there is an issue\n      const base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  }\n  /**\n   * Determine if the token's max_age has transpired\n   */\n  static checkMaxAge(authTime, maxAge) {\n    /*\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n     */\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n      throw ClientAuthError.createMaxAgeTranspiredError();\n    }\n  }\n}\nexport { AuthToken };","map":{"version":3,"names":["AuthToken","constructor","rawToken","crypto","StringUtils","isEmpty","ClientAuthError","createTokenNullOrEmptyError","claims","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError","checkMaxAge","authTime","maxAge","fiveMinuteSkew","Date","now","createMaxAgeTranspiredError"],"sources":["../../src/account/AuthToken.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;;;AAGG;AAQH;;AAEG;MACUA,SAAS;EAKlBC,WAAYA,CAAAC,QAAgB,EAAEC,MAAe;IACzC,IAAIC,WAAW,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;MAC/B,MAAMI,eAAe,CAACC,2BAA2B,CAACL,QAAQ,CAAC;IAC9D;IAED,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACM,MAAM,GAAGR,SAAS,CAACS,kBAAkB,CAACP,QAAQ,EAAEC,MAAM,CAAC;;EAGhE;;;;AAIG;EACH,OAAOM,kBAAkBA,CACrBC,YAAoB,EACpBP,MAAe;IAEf,MAAMQ,YAAY,GACdP,WAAW,CAACQ,eAAe,CAACF,YAAY,CAAC;;IAG7C,IAAI;MACA,MAAMG,kBAAkB,GAAGF,YAAY,CAACG,UAAU;;MAGlD,MAAMC,aAAa,GAAGZ,MAAM,CAACa,YAAY,CAACH,kBAAkB,CAAC;MAC7D,OAAOI,IAAI,CAACC,KAAK,CAACH,aAAa,CAAgB;IAClD,EAAC,OAAOI,GAAG,EAAE;MACV,MAAMb,eAAe,CAACc,uBAAuB,CAACD,GAAa,CAAC;IAC/D;;EAGL;;AAEG;EACH,OAAOE,WAAWA,CAACC,QAAgB,EAAEC,MAAc;IAC/C;;;;AAIG;IACH,MAAMC,cAAc,GAAG,MAAM,CAAC;IAC9B,IAAID,MAAM,KAAK,CAAC,IAAIE,IAAI,CAACC,GAAG,EAAE,GAAGF,cAAc,GAAGF,QAAQ,GAAGC,MAAM,EAAE;MACjE,MAAMjB,eAAe,CAACqB,2BAA2B,EAAE;IACtD;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}