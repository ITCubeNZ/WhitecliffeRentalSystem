{"ast":null,"code":"/*! @azure/msal-common v14.0.2 2023-08-18 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\nclass ScopeSet {\n  constructor(inputScopes) {\n    // Filter empty string and null/undefined array items\n    const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n    const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(scope => this.scopes.add(scope));\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n  static fromString(inputScopeString) {\n    const scopeString = inputScopeString || Constants.EMPTY_STRING;\n    const inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  }\n  /**\r\n   * Creates the set of scopes to search for in cache lookups\r\n   * @param inputScopeString\r\n   * @returns\r\n   */\n  static createSearchScopes(inputScopeString) {\n    const scopeSet = new ScopeSet(inputScopeString);\n    if (!scopeSet.containsOnlyOIDCScopes()) {\n      scopeSet.removeOIDCScopes();\n    } else {\n      scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n    return scopeSet;\n  }\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n  validateInputScopes(inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  }\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n  containsScope(scope) {\n    const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  }\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n  containsScopeSet(scopeSet) {\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope));\n  }\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n  containsOnlyOIDCScopes() {\n    let defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(defaultScope => {\n      if (this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  }\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n  appendScope(newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  }\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n  appendScopes(newScopes) {\n    try {\n      newScopes.forEach(newScope => this.appendScope(newScope));\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  }\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n  removeScope(scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n    this.scopes.delete(scope.trim());\n  }\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n  removeOIDCScopes() {\n    OIDC_SCOPES.forEach(defaultScope => {\n      this.scopes.delete(defaultScope);\n    });\n  }\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n  unionScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    return unionScopes;\n  }\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n  intersectingScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    const unionScopes = this.unionScopeSets(otherScopes);\n    const sizeOtherScopes = otherScopes.getScopeCount();\n    const sizeThisScopes = this.getScopeCount();\n    const sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  }\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n  getScopeCount() {\n    return this.scopes.size;\n  }\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n  asArray() {\n    const array = [];\n    this.scopes.forEach(val => array.push(val));\n    return array;\n  }\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n  printScopes() {\n    if (this.scopes) {\n      const scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n  printScopesLowerCase() {\n    return this.printScopes().toLowerCase();\n  }\n}\nexport { ScopeSet };","map":{"version":3,"names":["ScopeSet","constructor","inputScopes","scopeArr","StringUtils","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","scope","add","fromString","inputScopeString","scopeString","Constants","EMPTY_STRING","split","createSearchScopes","scopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","length","ClientConfigurationError","createEmptyScopesArrayError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","containsScopeSet","size","asArray","every","defaultScopeCount","OIDC_SCOPES","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","ClientAuthError","createAppendScopeSetError","createRemoveEmptyScopeFromSetError","delete","unionScopeSets","otherScopes","createEmptyInputScopeSetError","unionScopes","intersectingScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","val","push","printScopes","join"],"sources":["../../src/request/ScopeSet.ts"],"sourcesContent":[null],"mappings":";;;;;;;;AAAA;;;AAGG;AAOH;;;;AAIG;MACUA,QAAQ;EAIjBC,YAAYC,WAA0B;;IAElC,MAAMC,QAAQ,GAAGD,WAAW,GACtBE,WAAW,CAACC,gBAAgB,CAAC,CAAC,GAAGH,WAAW,CAAC,CAAC,GAC9C,EAAE;IACR,MAAMI,aAAa,GAAGH,QAAQ,GACxBC,WAAW,CAACG,2BAA2B,CAACJ,QAAQ,CAAC,GACjD,EAAE;;IAGR,IAAI,CAACK,mBAAmB,CAACF,aAAa,CAAC;IAEvC,IAAI,CAACG,MAAM,GAAG,IAAIC,GAAG,EAAU,CAAC;IAChCJ,aAAa,CAACK,OAAO,CAAEC,KAAK,IAAK,IAAI,CAACH,MAAM,CAACI,GAAG,CAACD,KAAK,CAAC,CAAC;;EAG5D;;;;;AAKG;EACH,OAAOE,UAAUA,CAACC,gBAAwB;IACtC,MAAMC,WAAW,GAAGD,gBAAgB,IAAIE,SAAS,CAACC,YAAY;IAC9D,MAAMhB,WAAW,GAAkBc,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC;IACzD,OAAO,IAAInB,QAAQ,CAACE,WAAW,CAAC;;EAGpC;;;;AAIG;EACH,OAAOkB,kBAAkBA,CAACL,gBAA+B;IACrD,MAAMM,QAAQ,GAAG,IAAIrB,QAAQ,CAACe,gBAAgB,CAAC;IAC/C,IAAI,CAACM,QAAQ,CAACC,sBAAsB,EAAE,EAAE;MACpCD,QAAQ,CAACE,gBAAgB,EAAE;IAC9B,OAAM;MACHF,QAAQ,CAACG,WAAW,CAACP,SAAS,CAACQ,oBAAoB,CAAC;IACvD;IAED,OAAOJ,QAAQ;;EAGnB;;;;AAIG;EACKb,mBAAmBA,CAACN,WAA0B;;IAElD,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACwB,MAAM,GAAG,CAAC,EAAE;MACxC,MAAMC,wBAAwB,CAACC,2BAA2B,EAAE;IAC/D;;EAGL;;;AAGG;EACHC,aAAaA,CAACjB,KAAa;IACvB,MAAMkB,eAAe,GAAG,IAAI,CAACC,oBAAoB,EAAE,CAACZ,KAAK,CAAC,GAAG,CAAC;IAC9D,MAAMa,kBAAkB,GAAG,IAAIhC,QAAQ,CAAC8B,eAAe,CAAC;;IAExD,OAAO,CAAC1B,WAAW,CAAC6B,OAAO,CAACrB,KAAK,CAAC,GAC5BoB,kBAAkB,CAACvB,MAAM,CAACyB,GAAG,CAACtB,KAAK,CAACuB,WAAW,EAAE,CAAC,GAClD,KAAK;;EAGf;;;AAGG;EACHC,gBAAgBA,CAACf,QAAkB;IAC/B,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACZ,MAAM,CAAC4B,IAAI,IAAI,CAAC,EAAE;MACxC,OAAO,KAAK;IACf;IAED,OACI,IAAI,CAAC5B,MAAM,CAAC4B,IAAI,IAAIhB,QAAQ,CAACZ,MAAM,CAAC4B,IAAI,IACxChB,QAAQ,CAACiB,OAAO,EAAE,CAACC,KAAK,CAAE3B,KAAK,IAAK,IAAI,CAACiB,aAAa,CAACjB,KAAK,CAAC,CAAC;;EAItE;;AAEG;EACHU,sBAAsBA,CAAA;IAClB,IAAIkB,iBAAiB,GAAG,CAAC;IACzBC,WAAW,CAAC9B,OAAO,CAAE+B,YAAoB,IAAI;MACzC,IAAI,IAAI,CAACb,aAAa,CAACa,YAAY,CAAC,EAAE;QAClCF,iBAAiB,IAAI,CAAC;MACzB;IACL,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC/B,MAAM,CAAC4B,IAAI,KAAKG,iBAAiB;;EAGjD;;;AAGG;EACHG,WAAWA,CAACC,QAAgB;IACxB,IAAI,CAACxC,WAAW,CAAC6B,OAAO,CAACW,QAAQ,CAAC,EAAE;MAChC,IAAI,CAACnC,MAAM,CAACI,GAAG,CAAC+B,QAAQ,CAACC,IAAI,EAAE,CAAC;IACnC;;EAGL;;;AAGG;EACHC,YAAYA,CAACC,SAAwB;IACjC,IAAI;MACAA,SAAS,CAACpC,OAAO,CAAEiC,QAAQ,IAAK,IAAI,CAACD,WAAW,CAACC,QAAQ,CAAC,CAAC;IAC9D,EAAC,OAAOI,CAAC,EAAE;MACR,MAAMC,eAAe,CAACC,yBAAyB,CAACF,CAAW,CAAC;IAC/D;;EAGL;;;AAGG;EACHxB,WAAWA,CAACZ,KAAa;IACrB,IAAIR,WAAW,CAAC6B,OAAO,CAACrB,KAAK,CAAC,EAAE;MAC5B,MAAMqC,eAAe,CAACE,kCAAkC,CAACvC,KAAK,CAAC;IAClE;IACD,IAAI,CAACH,MAAM,CAAC2C,MAAM,CAACxC,KAAK,CAACiC,IAAI,EAAE,CAAC;;EAGpC;;;AAGG;EACHtB,gBAAgBA,CAAA;IACZkB,WAAW,CAAC9B,OAAO,CAAE+B,YAAoB,IAAI;MACzC,IAAI,CAACjC,MAAM,CAAC2C,MAAM,CAACV,YAAY,CAAC;IACpC,CAAC,CAAC;;EAGN;;;AAGG;EACHW,cAAcA,CAACC,WAAqB;IAChC,IAAI,CAACA,WAAW,EAAE;MACd,MAAML,eAAe,CAACM,6BAA6B,EAAE;IACxD;IACD,MAAMC,WAAW,GAAG,IAAI9C,GAAG,EAAU,CAAC;IACtC4C,WAAW,CAAC7C,MAAM,CAACE,OAAO,CAAEC,KAAK,IAC7B4C,WAAW,CAAC3C,GAAG,CAACD,KAAK,CAACuB,WAAW,EAAE,CAAC,CACvC;IACD,IAAI,CAAC1B,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAK4C,WAAW,CAAC3C,GAAG,CAACD,KAAK,CAACuB,WAAW,EAAE,CAAC,CAAC;IACpE,OAAOqB,WAAW;;EAGtB;;;AAGG;EACHC,qBAAqBA,CAACH,WAAqB;IACvC,IAAI,CAACA,WAAW,EAAE;MACd,MAAML,eAAe,CAACM,6BAA6B,EAAE;IACxD;;IAGD,IAAI,CAACD,WAAW,CAAChC,sBAAsB,EAAE,EAAE;MACvCgC,WAAW,CAAC/B,gBAAgB,EAAE;IACjC;IACD,MAAMiC,WAAW,GAAG,IAAI,CAACH,cAAc,CAACC,WAAW,CAAC;IACpD,MAAMI,eAAe,GAAGJ,WAAW,CAACK,aAAa,EAAE;IACnD,MAAMC,cAAc,GAAG,IAAI,CAACD,aAAa,EAAE;IAC3C,MAAME,eAAe,GAAGL,WAAW,CAACnB,IAAI;IACxC,OAAOwB,eAAe,GAAGD,cAAc,GAAGF,eAAe;;EAG7D;;AAEG;EACHC,aAAaA,CAAA;IACT,OAAO,IAAI,CAAClD,MAAM,CAAC4B,IAAI;;EAG3B;;AAEG;EACHC,OAAOA,CAAA;IACH,MAAMwB,KAAK,GAAkB,EAAE;IAC/B,IAAI,CAACrD,MAAM,CAACE,OAAO,CAAEoD,GAAG,IAAKD,KAAK,CAACE,IAAI,CAACD,GAAG,CAAC,CAAC;IAC7C,OAAOD,KAAK;;EAGhB;;AAEG;EACHG,WAAWA,CAAA;IACP,IAAI,IAAI,CAACxD,MAAM,EAAE;MACb,MAAMN,QAAQ,GAAG,IAAI,CAACmC,OAAO,EAAE;MAC/B,OAAOnC,QAAQ,CAAC+D,IAAI,CAAC,GAAG,CAAC;IAC5B;IACD,OAAOjD,SAAS,CAACC,YAAY;;EAGjC;;AAEG;EACHa,oBAAoBA,CAAA;IAChB,OAAO,IAAI,CAACkC,WAAW,EAAE,CAAC9B,WAAW,EAAE;;AAE9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}