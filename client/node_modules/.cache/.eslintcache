[{"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\index.js":"1","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\reportWebVitals.js":"2","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\App.js":"3","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\auth\\authConfig.js":"4","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Footer.js":"5","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\MainHeader.js":"6","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\StudentDashBoard.js":"7","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Header.js":"8","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Book.js":"9","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Login.js":"10","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Home.js":"11","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\equipmentTable.js":"12","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\equipmentModal.js":"13","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\EquipmentTable.js":"14","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\EquipmentModal.js":"15","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\TeacherDashBoard.js":"16","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\BookingForTeacher.js":"17"},{"size":946,"mtime":1693811927168,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1693811927169,"results":"20","hashOfConfig":"19"},{"size":2625,"mtime":1695595151056,"results":"21","hashOfConfig":"19"},{"size":2178,"mtime":1695092504846,"results":"22","hashOfConfig":"19"},{"size":959,"mtime":1693811927156,"results":"23","hashOfConfig":"19"},{"size":888,"mtime":1693811927161,"results":"24","hashOfConfig":"19"},{"size":15297,"mtime":1695530802707,"results":"25","hashOfConfig":"19"},{"size":2499,"mtime":1695533233700,"results":"26","hashOfConfig":"19"},{"size":26930,"mtime":1695530975614,"results":"27","hashOfConfig":"19"},{"size":877,"mtime":1695092561983,"results":"28","hashOfConfig":"19"},{"size":145,"mtime":1693811927158,"results":"29","hashOfConfig":"19"},{"size":16217,"mtime":1693812299942,"results":"30","hashOfConfig":"19"},{"size":2661,"mtime":1693811927164,"results":"31","hashOfConfig":"19"},{"size":16159,"mtime":1695530789972,"results":"32","hashOfConfig":"19"},{"size":3078,"mtime":1695530166926,"results":"33","hashOfConfig":"19"},{"size":14982,"mtime":1695530747876,"results":"34","hashOfConfig":"19"},{"size":18219,"mtime":1695530495851,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"56ahg6",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"39"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"39"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"39"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\index.js",[],[],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\App.js",["95","96"],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\auth\\authConfig.js",[],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Footer.js",["97","98"],[],"import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"../App.css\";\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"sticky-top page-footer font-small blue pt-2 footer bg-black text-white\">\r\n      <Container>\r\n        <div className=\"container-fluid text-center text-md-left\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 mt-md-0 mt-2\">\r\n              <p>Get in Touch: +08000-1234-324</p>\r\n              <p>Privacy Policy</p>\r\n            </div>\r\n\r\n            <hr className=\"clearfix w-100 d-md-none pb-0\" />\r\n\r\n            <div className=\"col-md-3 mb-md-0 mb-2 \">\r\n              <p>artschool@whitecliffe.co.nz</p>\r\n              <p>Rental Terms & Conditions</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"footer-copyright text-center py-0\">Â© 2023 Copyright: IT Cube</div>\r\n      </Container>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\MainHeader.js",[],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\StudentDashBoard.js",["99","100","101","102"],[],"import React, { useContext } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport EquipmentModal from \"./EquipmentModal\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport \"../styles.css\";\r\nimport { UserContext } from \"../App\";\r\nfunction EquipmentTable() {\r\n  const user = useContext(UserContext);\r\n  // function EquipmentTable(apiData) { //how to take data from another page\r\n  /* This will probably be from the main page\r\n    useEffect(() => {\r\n      setData(data);\r\n    }, []);\r\n\r\n    function fetchData(){\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${props.city}&appid=fa51d7d0a04b3ca2bff7a13a3863f53e&units=metric`)\r\n            .then((response) => response.json())\r\n            .then((data) => setData(data));};\r\n\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, []); \r\n    */\r\n  // apidata template data below ///////////////////////////\r\n\r\n  const data = [\r\n    {\r\n      item_id: 2,\r\n      name: \"Blue Screen\",\r\n      description: \"Alright projector\",\r\n      code: 2,\r\n      replacement_cost: 50.0,\r\n      \"purchase year\": 10102023,\r\n      status: 0,\r\n      location: \"Christchurch Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"pending\",\r\n    },\r\n    {\r\n      item_id: 3,\r\n      name: \"Yellow Camera\",\r\n      description: \"Camera\",\r\n      code: 3,\r\n      replacement_cost: 250.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Christchurch Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"booked\",\r\n    },\r\n    {\r\n      item_id: 4,\r\n      name: \"Red Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"avaliable\",\r\n    },\r\n    {\r\n      item_id: 5,\r\n      name: \"Purple Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"overdue\",\r\n    },\r\n    {\r\n      item_id: 6,\r\n      name: \"Multi-color Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 12102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Art Department\",\r\n      last_updated: 11101999,\r\n      rental_status: \"avaliable\",\r\n    },\r\n  ];\r\n\r\n  //const apiData = { apiData: [data] };\r\n  const apiData = { apiData: data };\r\n  // console.log(\"first\");\r\n  // console.log(apiData);\r\n\r\n  // apidata template data above ///////////////////////////\r\n\r\n  //// equipmentTable code below ////////////////////\r\n  // original data from api fetch\r\n  const [dataSet, setData] = useState(apiData);\r\n  // data1 to populate table\r\n  const [data1, setData1] = useState(dataSet);\r\n\r\n  // variable for location\r\n  const [varLocation, setVarLocation] = useState(null);\r\n\r\n  // variable for booking status\r\n  const [varBooking, setVarBooking] = useState(null);\r\n\r\n  // variable for location search dropdown\r\n  const [dropdownLocation, setdropdownLocation] = useState(\"All Locations\");\r\n\r\n  // variable for status search dropdwon\r\n  const [dropdownBooking, setdropdownBooking] = useState(\"All Current Status\");\r\n\r\n  const [data2, setData2] = useState(apiData);\r\n\r\n  // INTIAL POPULATION BELOW //////////////////////////////////////////////////////////////////\r\n  //// code below to populate location dropdown ///////////////\r\n  // just grab locations into locationArray\r\n  const inilocationArray = data2.apiData.map(({ location }) => location);\r\n  // get rid of duplicates\r\n  const iniuniqueLocationArray = inilocationArray.filter((val, id, array) => array.indexOf(val) === id);\r\n  // alphabetically the array\r\n  iniuniqueLocationArray.sort((a, b) => a.localeCompare(b));\r\n  //newMenuItems.sort((a, b) => a.name.localeCompare(b.name));  // maybe have another array or variablbe, since console logs show that it continually repeating.\r\n  // variable for location dropdwon\r\n  const [varLocationDropdown, setVarLocationDropdown] = useState(iniuniqueLocationArray);\r\n  //\r\n  //// equipmentDropdownLocation code above ////////////////////\r\n\r\n  //// code below to populate status dropdown ///////////////\r\n  // just grab locations into statusArray\r\n  const inistatusArray = data2.apiData.map(({ rental_status }) => rental_status);\r\n  // get rid of duplicates\r\n  const iniuniqueStatusArray = inistatusArray.filter((val, id, array) => array.indexOf(val) === id);\r\n  // alphabetically the array\r\n  iniuniqueStatusArray.sort((a, b) => a.localeCompare(b));\r\n  // variable for status dropdown\r\n  const iniuniqueStatusArray3 = [];\r\n  iniuniqueStatusArray.map((datas) => {\r\n    if (datas === \"avaliable\") {\r\n      iniuniqueStatusArray3.avaliable = \"Free To Book\";\r\n    } else if (datas === \"booked\") {\r\n      iniuniqueStatusArray3.booked = \"Booked\";\r\n    } else if (datas === \"overdue\") {\r\n      iniuniqueStatusArray3.overdue = \"Overdue\";\r\n    } else if (datas === \"pending\") {\r\n      iniuniqueStatusArray3.pending = \"Approval Booking Pending\";\r\n    } else {\r\n      iniuniqueStatusArray3.CheckAdministration = \"Check Administration\";\r\n      console.log(\"Something as gone wrong with booking status of object\");\r\n    }\r\n  });\r\n  const [varStatusDropdown, setVarStatusDropdown] = useState(iniuniqueStatusArray3);\r\n  //newMenuItems.sort((a, b) => a.name.localeCompare(b.name));  // maybe have another array or variablbe, since console logs show that it continually repeating.\r\n  //// equipmentDropdownStatus code above ///////////////////////////////////////////////////////\r\n\r\n  //reset everything function /////////////////\r\n  function buttonReset() {\r\n    setData1(dataSet);\r\n    setVarLocation(null);\r\n    setVarBooking(null);\r\n    setdropdownLocation(\"All Locations\");\r\n    setdropdownBooking(\"All Current Status\");\r\n    repopulateDropdowns(\"reset\");\r\n    //handleShowStatus();  // test this\r\n  }\r\n  //// equipmentTable code above ////////////////////\r\n\r\n  function repopulateDropdowns(incomingData) {\r\n    // INTIAL POPULATION BELOW ///////////////////////////////////////////\r\n    const result = { apiData: [] };\r\n    if (incomingData === \"reset\") {\r\n      setVarStatusDropdown(iniuniqueStatusArray3);\r\n      setVarLocationDropdown(iniuniqueLocationArray);\r\n    } else if (incomingData.location) {\r\n      //handleCloseLocation();    // disable dropdown\r\n      dataSet.apiData.forEach(function (item, index) {\r\n        // use original data not data1, data1 information is delayed\r\n        if (item.location === incomingData.location) {\r\n          // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n          result.apiData.push(item);\r\n        }\r\n      });\r\n      // just grab status into statusArray\r\n      const statusArray = result.apiData.map(({ rental_status }) => rental_status);\r\n      // get rid of duplicates\r\n      const uniqueStatusArray = statusArray.filter((val, id, array) => array.indexOf(val) === id);\r\n      // alphabetically the array\r\n      uniqueStatusArray.sort((a, b) => a.localeCompare(b));\r\n      const uniqueStatusArray3 = [];\r\n      uniqueStatusArray.map((datas) => {\r\n        if (datas === \"avaliable\") {\r\n          uniqueStatusArray3.avaliable = \"Free To Book\";\r\n        } else if (datas === \"booked\") {\r\n          uniqueStatusArray3.booked = \"Booked\";\r\n        } else if (datas === \"overdue\") {\r\n          uniqueStatusArray3.overdue = \"Overdue\";\r\n        } else if (datas === \"pending\") {\r\n          uniqueStatusArray3.pending = \"Approval Booking Pending\";\r\n        } else {\r\n          uniqueStatusArray3.CheckAdministration = \"Check Administration\";\r\n          console.log(\"Something as gone wrong with booking status of object\");\r\n        }\r\n      });\r\n      setVarStatusDropdown(uniqueStatusArray3);\r\n    } else {\r\n      console.log(\"Got To End Of repopulate dropdowns\");\r\n    }\r\n  }\r\n\r\n  function repopulate(incomingData) {\r\n    console.log(\"repopulate\");\r\n    const result = { apiData: [] };\r\n    //// location below //////////////////////////////////////////////////////////////////\r\n    if (incomingData.location) {\r\n      console.log(\"---LOCATION---\");\r\n      setVarLocation(incomingData.location); // CHECK THIS\r\n      setdropdownBooking(\"Current Location Status Options\");\r\n      if (incomingData.location === null && varBooking === null) {\r\n        setData1(dataSet);\r\n      } else if (varBooking === null) {\r\n        console.log(\"working\");\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item); // having the apiData,, wird object array combo\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (varLocation === null) {\r\n        // this for when the location is reset but still need status information\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (incomingData.location !== null && varBooking !== null) {\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else {\r\n        setData1(dataSet);\r\n        //mabye have a modal pop up, saying found nothing\r\n      }\r\n\r\n      //// status below //////////////////////////////////////////////////////////////////\r\n    } else if (incomingData.status) {\r\n      console.log(\"---STATUS---\");\r\n      setVarBooking(incomingData.status);\r\n      //setVarBooking(\"Current Location Booking Status\");\r\n      if (incomingData.status === null && varLocation === null) {\r\n        setData1(dataSet);\r\n      } else if (varLocation === null) {\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.rental_status === incomingData.status) {\r\n            // DO NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item); // having the apiData,, wird object array combo\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (varLocation !== null && incomingData.status !== null) {\r\n        console.log(\"working\");\r\n        console.log(incomingData.status);\r\n        console.log(varLocation);\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === varLocation && item.rental_status === incomingData.status) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        console.log(result);\r\n        setData1(result);\r\n      } else {\r\n        setData1(dataSet);\r\n        console.log(\"working\");\r\n        //mabye have a modal pop up, saying found nothing\r\n      }\r\n    } else {\r\n      console.log(\"something has gone wrong - repopulate function\");\r\n      console.log(dataSet);\r\n    }\r\n    repopulateDropdowns(incomingData);\r\n  }\r\n\r\n  const width_proportion = \"80%\";\r\n  const marginStuff = \"auto\";\r\n  const whiteColor = \"#ffffff\";\r\n  const radiusVar = \"6px\";\r\n  const styles = {\r\n    box: {\r\n      margin: marginStuff,\r\n      width: width_proportion,\r\n    },\r\n    title: {\r\n      color: whiteColor,\r\n    },\r\n    radius: radiusVar,\r\n  };\r\n\r\n  return (\r\n    <div style={styles.box}>\r\n      <h1 style={styles.title}>{user} Dashboard</h1>\r\n      <br></br>\r\n      <div className=\"columnLeft\">\r\n        <DropdownButton variant=\"success\" id=\"dropdown-basic-button\" title={dropdownLocation}>\r\n          {varLocationDropdown.map((datas) => {\r\n            return (\r\n              <Dropdown.Item\r\n                key={\"arbitary1\" + datas}\r\n                onClick={() => {\r\n                  repopulate({ location: datas });\r\n                  setdropdownLocation(datas);\r\n                }}\r\n                value={datas}\r\n              >\r\n                {datas}\r\n              </Dropdown.Item>\r\n            );\r\n          })}\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item onClick={() => buttonReset()}>Reset</Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div className=\"columnLeft\">&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n      <div className=\"columnLeft\">\r\n        <DropdownButton variant=\"success\" id=\"dropdown-basic-button\" title={dropdownBooking}>\r\n          {Object.entries(varStatusDropdown).map(([key, value]) => {\r\n            return (\r\n              <Dropdown.Item\r\n                key={\"arbitary2\" + value}\r\n                onClick={() => {\r\n                  repopulate({ status: key });\r\n                  setdropdownBooking(\"Current Location Status Options\");\r\n                }}\r\n                value={key}\r\n              >\r\n                {value}\r\n              </Dropdown.Item>\r\n            );\r\n          })}\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item onClick={() => buttonReset()}>Reset</Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div className=\"columnLeft\">&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n      <Button variant=\"success\" onClick={() => buttonReset()}>\r\n        Reset Search\r\n      </Button>\r\n\r\n      <br></br>\r\n      <br></br>\r\n      <Table\r\n        bordered\r\n        hover\r\n        style={{\r\n          borderCollapse: \"collapsed\",\r\n          borderRadius: \"10px\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>#</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Item</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Location</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Current Status</b>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data1.apiData?.map((datas) => {\r\n            return (\r\n              <tr key={\"arbitary3\" + datas.item_id}>\r\n                <td>{datas.item_id}</td>\r\n                <td>{datas.name}</td>\r\n                <td>{datas.location}</td>\r\n                <td>\r\n                  <EquipmentModal data1={datas}></EquipmentModal>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n          </tr>\r\n        </tfoot>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EquipmentTable;\r\n","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Header.js",["103"],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Book.js",["104","105","106","107","108","109","110","111","112","113","114","115"],[],"import * as React from \"react\";\r\nimport \"../styles.css\";\r\nimport DatePicker, { DateObject, getAllDatesInRange } from \"react-multi-date-picker\";\r\nimport { useState, useEffect } from \"react\";\r\nimport TimePicker from \"react-multi-date-picker/plugins/time_picker\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"react-multi-date-picker/styles/backgrounds/bg-gray.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport \"../green.css\";\r\nimport \"../styles.css\";\r\n\r\n// object {}\r\n// array []\r\n\r\nfunction Book(apiData) {\r\n  // student SQL // Student API here\r\n  const studentSQL = {\r\n    student_id: 12346,\r\n    f_name: \"Biblo\",\r\n    l_name: \"Baggins\",\r\n    degree: \"Software\",\r\n    whitecliffe_id: 123,\r\n    username: \"Billy\",\r\n    password: \"TheOneRing\",\r\n    phone: 5556325,\r\n    email: \"bbaggins@hotmail.com\",\r\n    last_updated: 20230906,\r\n  };\r\n\r\n  // item SQL // Item API here\r\n  const itemSQL = {\r\n    item_id: 4,\r\n    name: \"Red Camera\",\r\n    description: \"Camera\",\r\n    code: 4,\r\n    replacement_cost: 350.0,\r\n    \"purchase year\": 11102023,\r\n    status: 0,\r\n    location: \"Manakau Campus, Media Department\",\r\n    last_updated: 10101999,\r\n    rental_status: \"avaliable\",\r\n  };\r\n\r\n  // rental SQL  This record to be made\r\n  /*\r\nconst rentalSQL =\r\n  [\r\n  {\r\n    \"rental_id\":  ,\r\n    \"student_id\":  ,\r\n    \"staff_id\":  ,\r\n    \"item_id\":  ,\r\n    \"approved\":  ,\r\n    \"rental_date\":  ,\r\n    \"return_date\":  ,\r\n    \"return_condition:  ,\r\n    \"last_updated\": \r\n  }\r\n  ]\r\n*/\r\n  // staff SQL\r\n\r\n  const addDays = (date, days = 1) => {\r\n    const result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const dateRange = (start, end, range = []) => {\r\n    if (start > end) return range;\r\n    const next = addDays(start, 1);\r\n    return dateRange(next, end, [...range, start]);\r\n  };\r\n\r\n  const getDatesArray = (arraySQL) => {\r\n    const SQLRange = [];\r\n    for (let i = 0; i < arraySQL.length; i++) {\r\n      const RangeUnArray = [];\r\n      const range = dateRange(new Date(arraySQL[i][0]), new Date(arraySQL[i][1]));\r\n      console.log(arraySQL.length);\r\n      console.log(i);\r\n      console.log(range);\r\n      console.log(range.map((date) => date.toISOString().slice(0, 10)));\r\n      RangeUnArray.push(range.map((date) => date.toISOString().slice(0, 10)));\r\n      SQLRange.push(RangeUnArray);\r\n    }\r\n    return SQLRange;\r\n  };\r\n\r\n  const indexBooking = (rangeArray) => {\r\n    const indexBooked = {\r\n      // booked\r\n      0: [],\r\n      1: [],\r\n      2: [],\r\n      3: [],\r\n      4: [],\r\n      5: [],\r\n      6: [],\r\n      7: [],\r\n      8: [],\r\n      9: [],\r\n      10: [],\r\n      11: [],\r\n    };\r\n    console.log(indexBooked);\r\n    console.log(indexBooked[1]);\r\n    for (let i = 0; i < rangeArray.length; i++) {\r\n      const [year, month, day] = rangeArray[i].split(\"-\");\r\n      var year1 = Number(year);\r\n      var month1 = Number(month);\r\n      var day1 = Number(day);\r\n      console.log(month1);\r\n      for (let i = 0, y = 1; i < 12; i++, y++) {\r\n        if (month1 === y) {\r\n          //console.log(\"trial\");\r\n          //alert(month1);\r\n          //alert(i);\r\n          console.log(month1);\r\n          console.log(i);\r\n          indexBooked[i].push(day1);\r\n        }\r\n      }\r\n    }\r\n    return indexBooked;\r\n  };\r\n\r\n  // start - booked SQL ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const bookedSQL = [\r\n    [\"2023-09-24\", \"2023-09-30\"],\r\n    [\"2023-10-01\", \"2023-10-07\"],\r\n    [\"2023-11-12\", \"2023-11-18\"], // needs to be - instead of /, otherwise the range programming is one day off\r\n  ];\r\n  const bookedRange = getDatesArray(bookedSQL);\r\n  const bookedRangeArray = bookedRange.flat(2); //The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.  Array of Arrays to one array.  https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays\r\n  const monthIndexBooked = indexBooking(bookedRangeArray);\r\n  console.log(monthIndexBooked);\r\n  // end - booked SQL ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  // pending SQL ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const pendingSQL = [\r\n    [\"2023-10-15\", \"2023-10-21\"],\r\n    [\"2023-12-10\", \"2023-12-16\"], // one off\r\n  ];\r\n  const pendingRange = getDatesArray(pendingSQL);\r\n  const pendingRangeArray = pendingRange.flat(2); //The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.  Array of Arrays to one array.  https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays\r\n  const monthIndexPending = indexBooking(pendingRangeArray);\r\n  console.log(monthIndexPending);\r\n  // pending SQL ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // overdue SQL /////////////////////////////////////////////////////////////////////\r\n  const overdueSQL = [\r\n    [\"2023-10-22\", \"2023-10-28\"],\r\n    [\"2023-11-19\", \"2023-11-25\"],\r\n    [\"2023-12-24\", \"2023-12-30\"],\r\n  ];\r\n  const overdueRange = getDatesArray(overdueSQL);\r\n  const overdueRangeArray = overdueRange.flat(2); //The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.  Array of Arrays to one array.  https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays\r\n  console.log(\"hereeee\");\r\n  console.log(overdueRangeArray);\r\n  const monthIndexOverdue = indexBooking(overdueRangeArray);\r\n  console.log(monthIndexOverdue);\r\n  // overdue SQL /////////////////////////////////////////////////////////////////////\r\n\r\n  const [dataStudent, setData] = useState(\"hello\");\r\n  const [value, setValue] = useState(new DateObject()); // perhaps get date from server\r\n\r\n  const [dates, setDates] = useState([]);\r\n  const [allDates, setAllDates] = useState([]);\r\n\r\n  const [bookingStatus, setBookingStatus] = useState(\"NoBook\");\r\n  const [firstBookSwitch, setFirstBookSwitch] = useState(\"NoBook\");\r\n  const [secondBookSwitch, setSecondBookSwitch] = useState(\"NoBook\");\r\n  const [bookingButton, setBookingButton] = useState(\"First Week To Add To Booking\");\r\n  const [confirmationButton, setconfirmationButton] = useState(\"Please Choose The First Week To Book\");\r\n\r\n  // check below if the second choice is the same as the first choice\r\n\r\n  // below the variables are used for the first week chosen\r\n  const [firstWeekChoice, setfirstWeekChoice] = useState([]); // this is used to display the first choice in the calendar plugin, (purple color) - const firstWeekChoiceInbetween = [[firstInbetween, secondInbetween]];  // needs to be - instead of /, otherwise the range programming is one day off\r\n  const [firstWeekChoiceFirstDate, setFirstWeekChoiceFirstDate] = useState(\"\"); // first date chosen in '-'\r\n  const [firstWeekChoiceSecondDate, setFirstWeekChoiceSecondDate] = useState(\"\"); // second date chosen\r\n\r\n  // below the variables are used for the second week chosen\r\n  const [secondWeekChoice, setsecondWeekChoice] = useState([]); // this is used to display the first choice in the calendar plugin, (purple color) - const secondWeekChoiceInbetween = [[firstInbetween, secondInbetween]];  // needs to be - instead of /, otherwise the range programming is one day off\r\n  const [secondWeekChoiceFirstDate, setSecondWeekChoiceFirstDate] = useState(\"\"); // first date chosen\r\n  const [secondWeekChoiceSecondDate, setSecondWeekChoiceSecondDate] = useState(\"\"); // second date chosen\r\n\r\n  // variable below captures the date with / instead of -, so it can be checked if the user presses the second week being the same as the first week\r\n  const [firstDateFormated, setfirstDateFormated] = useState(\"\"); // '/' instead of '-'\r\n  const [getThatDate, setGetThatDate] = useState(\"\");\r\n\r\n  // Modal Code ///////////////////////////////\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  // Modal Code Datepicker Date Below ////////\r\n  const [value1, setValue1] = useState(new DateObject()); // perhaps get date from server\r\n\r\n  // Color For Confirm Booking Button\r\n  const [confirmColor, setConfirmColor] = useState(\"primary\");\r\n  // Color for add week button\r\n  const [addWeek, setAddWeek] = useState(\"warning\");\r\n\r\n  function addBookings() {\r\n    console.log(bookingButton);\r\n    console.log(\"check here\");\r\n    console.log(bookingStatus);\r\n    const firstSelectedDateUnformat = dates[0];\r\n    let dating = \"\";\r\n    if (typeof firstSelectedDateUnformat !== \"undefined\") {\r\n      dating = firstSelectedDateUnformat.format();\r\n    }\r\n\r\n    if (typeof firstSelectedDateUnformat === \"undefined\") {\r\n      // at the first if the user has not clicked on a date\r\n      alert(\"Please Choose A Week\");\r\n    } else if (dating === firstDateFormated && bookingStatus === \"FirstBook\") {\r\n      // after user has clicked on one week, this pops up if they chose the same week as the second week  (getThatFormat === firstDateFormated)\r\n      alert(\"You Have Already Chosen This Week, Please Choose Another\");\r\n      console.log(\"here1\");\r\n      console.log(firstSelectedDateUnformat.format());\r\n    } else {\r\n      console.log(\"here2\");\r\n      console.log(firstSelectedDateUnformat.format());\r\n      const firstSelectedDateSlashed = firstSelectedDateUnformat.format();\r\n      const secondSelectedDateUnformat = dates[1];\r\n      const secondSelectedDateSlashed = secondSelectedDateUnformat.format();\r\n      setfirstDateFormated(firstSelectedDateSlashed); // this capture the date in / and is used to compare it with a second date chosen\r\n      const firstInbetween = firstSelectedDateSlashed.replaceAll(\"/\", \"-\");\r\n      const secondInbetween = secondSelectedDateSlashed.replaceAll(\"/\", \"-\");\r\n\r\n      if (bookingStatus === \"SecondBook\") {\r\n        // reseting (i think)\r\n        const resetOne = [\r\n          [\"First Week/ First Date \", \"Second Date\"], // needs to be - instead of /, otherwise the range programming is one day off\r\n        ];\r\n        const resetTwo = [\r\n          [\"Second Week/ First Date\", \"Second Date\"], // needs to be - instead of /, otherwise the range programming is one day off\r\n        ];\r\n        setfirstWeekChoice(resetOne); // make this a array\r\n        setsecondWeekChoice(resetTwo);\r\n        setFirstWeekChoiceFirstDate(\"\");\r\n        setFirstWeekChoiceSecondDate(\"\");\r\n        setSecondWeekChoiceFirstDate(\"\");\r\n        setSecondWeekChoiceSecondDate(\"\");\r\n        console.log(\"SecondBook\");\r\n        setBookingStatus(\"NoBook\");\r\n        setFirstBookSwitch(\"NoBook\");\r\n        setSecondBookSwitch(\"NoBook\");\r\n        setBookingButton(\"First Week To Add To Booking\");\r\n        setconfirmationButton(\"Please Choose The First Week To Book\");\r\n        setConfirmColor(\"primary\");\r\n        setAddWeek(\"warning\");\r\n      } else if (bookingStatus === \"FirstBook\") {\r\n        // second choice\r\n        console.log(\"FirstBook\");\r\n        const secondWeekChoiceInbetween = [\r\n          [firstInbetween, secondInbetween], // needs to be - instead of /, otherwise the range programming is one day off\r\n        ];\r\n        setSecondWeekChoiceFirstDate(firstInbetween);\r\n        setSecondWeekChoiceSecondDate(secondInbetween);\r\n        setsecondWeekChoice(secondWeekChoiceInbetween);\r\n        setBookingStatus(\"SecondBook\");\r\n        setSecondBookSwitch(\"SecondBook\");\r\n        setBookingButton(\"You Have Chosen Two Weeks.  Click Here To Reset If You Want To Change Your Decision\");\r\n        setconfirmationButton(\"Click Here To Confirm 2 Week Booking - You May Also Reset (Button Above) To Restart\");\r\n        setConfirmColor(\"success\");\r\n        setAddWeek(\"danger\");\r\n      } else if (bookingStatus === \"NoBook\") {\r\n        // first choice\r\n        console.log(\"NoBook\"); // might put the code below into a function\r\n        const firstWeekChoiceInbetween = [\r\n          [firstInbetween, secondInbetween], // needs to be - instead of /, otherwise the range programming is one day off\r\n        ];\r\n        setFirstWeekChoiceFirstDate(firstInbetween);\r\n        setFirstWeekChoiceSecondDate(secondInbetween);\r\n        setfirstWeekChoice(firstWeekChoiceInbetween);\r\n        setBookingStatus(\"FirstBook\");\r\n        setFirstBookSwitch(\"FirstBook\");\r\n        setBookingButton(\"Second Week To Add To Booking\");\r\n        setconfirmationButton(\"Click Here To Confirm Week Booking - You May Also Choose Another Week Above\");\r\n        setConfirmColor(\"success\");\r\n        setAddWeek(\"warning\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // const [confirmationButton, setconfirmationButton] = useState(\"Please Choose The First Week To Book\");\r\n  function confirmBookingsModal() {\r\n    if (bookingStatus === \"SecondBook\") {\r\n      //alert(\"Two Week Booked\");\r\n      handleShow();\r\n    } else if (bookingStatus === \"FirstBook\") {\r\n      //alert(\"One Week Booked\");\r\n      handleShow();\r\n    } else if (bookingStatus === \"NoBook\") {\r\n      alert(\"You Need To Choose A Week\");\r\n    }\r\n  }\r\n\r\n  function reset() {\r\n    alert(\"reset\");\r\n    const resetOne = [\r\n      [\"First Week/ First Date \", \"Second Date\"], // needs to be - instead of /, otherwise the range programming is one day off\r\n    ];\r\n    const resetTwo = [\r\n      [\"Second Week/ First Date\", \"Second Date\"], // needs to be - instead of /, otherwise the range programming is one day off\r\n    ];\r\n    setfirstWeekChoice(resetOne); // make this a array\r\n    setsecondWeekChoice(resetTwo);\r\n    setFirstWeekChoiceFirstDate(\"\");\r\n    setFirstWeekChoiceSecondDate(\"\");\r\n    setSecondWeekChoiceFirstDate(\"\");\r\n    setSecondWeekChoiceSecondDate(\"\");\r\n    setBookingStatus(\"NoBook\");\r\n    setFirstBookSwitch(\"NoBook\");\r\n    setSecondBookSwitch(\"NoBook\");\r\n    setBookingButton(\"First Week To Add To Booking\");\r\n    setconfirmationButton(\"Please Choose The First Week To Book\");\r\n    setConfirmColor(\"primary\");\r\n    setAddWeek(\"warning\");\r\n  }\r\n\r\n  function finalConfirmBooking() {\r\n    handleClose();\r\n    alert(\"Item Booked\");\r\n    reset();\r\n    // API Code Confirm Code Will Be Here\r\n  }\r\n\r\n  function CustomRangeInput({ onFocus, value, separator }) {\r\n    let values = value.split(separator);\r\n    let from = values[0] || \"\"; // start of week\r\n    let to = values[1] || \"\"; // end of week or 2 weeks\r\n    value = from && to ? from + \" - \" + to : from;\r\n\r\n    return <input onFocus={onFocus} value={value} readOnly />;\r\n  }\r\n\r\n  const width_proportion = \"80%\";\r\n  const marginStuff = \"auto\";\r\n  const whiteColor = \"#ffffff\";\r\n  const radiusVar = \"6px\";\r\n\r\n  const styles = {\r\n    box: {\r\n      margin: marginStuff,\r\n      width: width_proportion,\r\n    },\r\n    title: {\r\n      color: whiteColor,\r\n    },\r\n    radius: radiusVar,\r\n    //backgroundcolor: backGroundColorBlack\r\n  };\r\n\r\n  //firstWeekChoiceFirstDate\r\n  //firstWeekChoiceSecondDate\r\n  //firstWeekChoice\r\n\r\n  //secondWeekChoiceFirstDate\r\n  //secondWeekChoiceSecondDate\r\n  //secondWeekChoice\r\n\r\n  //style={styles.box}\r\n  return (\r\n    <div style={styles.box}>\r\n      <>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title style={{ color: \"#000000\" }}>Equipment Booking Details</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Item Details - </b>\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>Item Name: </b> {itemSQL.name}\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>Item ID: </b> {itemSQL.item_id}\r\n            </p>\r\n            <p style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Booked For - </b>\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>Name: </b> {studentSQL.f_name} {studentSQL.l_name}\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>Student ID: </b> {studentSQL.student_id}\r\n            </p>\r\n            <p style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Weeks Booked - </b>\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>First Week To Book - : </b>{\" \"}\r\n              {firstWeekChoice?.map((date) => (\r\n                <li>\r\n                  {date[0]} to {date[1]}\r\n                </li>\r\n              ))}\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>Second Week To Book - : </b>{\" \"}\r\n              {secondWeekChoice?.map((date, index) => (\r\n                <li>\r\n                  {date[0]} to {date[1]}\r\n                </li>\r\n              ))}\r\n            </p>\r\n            <p style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Pick Up - </b>\r\n            </p>\r\n            <p style={{ color: \"#000000\" }}>\r\n              <b>Date/Time To Pick Up - : </b>\r\n              <DatePicker format=\"MM/DD/YYYY HH:mm:ss\" value={value1} onChange={setValue1} plugins={[<TimePicker position=\"bottom\" hStep={2} mStep={3} sStep={4} />]} />\r\n            </p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"success\" onClick={finalConfirmBooking}>\r\n              Confirm Booking\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n\r\n      <h1 style={styles.title}>Equipment Available</h1>\r\n\r\n      <br></br>\r\n      <br></br>\r\n\r\n      <table className=\"table\" style={styles.box} bordered hover>\r\n        <tbody>\r\n          <tr>\r\n            <td style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Student Details</b>\r\n            </td>\r\n            <td style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}></td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>First Name</td>\r\n            <td>{studentSQL.f_name}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Last Name</td>\r\n            <td>{studentSQL.l_name}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Student ID</td>\r\n            <td>{studentSQL.student_id}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Phone</td>\r\n            <td>{studentSQL.phone}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Item Details</b>\r\n            </td>\r\n            <td style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}></td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>item_id</td>\r\n            <td>{itemSQL.item_id}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Name</td>\r\n            <td>{itemSQL.name}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Description</td>\r\n            <td>{itemSQL.description}</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Booking</b>\r\n            </td>\r\n            <td style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}></td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Choose Week Here - </td>\r\n            <td>\r\n              <DatePicker\r\n                className=\"green\"\r\n                value={value}\r\n                range // makes the choice in range\r\n                render={<CustomRangeInput />}\r\n                weekPicker // limits range weekly\r\n                minDate={new DateObject().add(7, \"days\")} // THIS IS FOR CLIENT\r\n                maxDate={new DateObject().add(9, \"months\")}\r\n                onChange={(dateObjects, ranges) => {\r\n                  setDates(dateObjects); // end points of range\r\n                  setAllDates(getAllDatesInRange(dateObjects)); // all dates within range\r\n                }}\r\n                // when getting the api data, makes sure it is only within a year, because you can't put current year in the calendar\r\n                mapDays={({ date, today, selectedDate, currentMonth, isSameDate }) => {\r\n                  let props = {};\r\n                  props.style = {\r\n                    borderRadius: \"10px\",\r\n                  };\r\n\r\n                  const indexCalendarColoring = (monthlyColors) => {\r\n                    let isArray = [];\r\n                    for (let i = 0; i < monthlyColors.length; i++) {\r\n                      const y = monthlyColors[i];\r\n                      //if ([y].includes(date.day)) props.style.color = \"#505168\";  // red color \"#fe3f24\"  grey/green color \"#3C493F\" probalby don't need this because of disabled function below\r\n                      isArray.push(y); // isGreyBookedArray this returns single numbers, [8,9,10,11,12,13,14]\r\n                    }\r\n                    let isFinishBooked = isArray.includes(date.day); // this returns true or false\r\n                    return isFinishBooked;\r\n                  };\r\n\r\n                  //GREEN AVALIABLE COLORS - this makes everything green, the next function fill in the red and yellow colors\r\n                  for (let i = 0; i < 32; i++) {\r\n                    if ([i].includes(date.day)) props.style.color = \"#00b093\"; // green\r\n                  }\r\n\r\n                  // GREY BOOKED COLORS ///////////////////////////////////////////////\r\n                  const monthlyBooked = monthIndexBooked[currentMonth.index];\r\n                  const isGreyBooked = indexCalendarColoring(monthlyBooked);\r\n                  if (isGreyBooked)\r\n                    return {\r\n                      disabled: true,\r\n                      style: { color: \"#505168\" },\r\n                      onClick: () => alert(\"This Week Has Been Booked\"),\r\n                    };\r\n\r\n                  // YELLOW PENDING COLORS //////////////////////////////////////////////////\r\n                  const monthlyPending = monthIndexPending[currentMonth.index];\r\n                  const yellowPendingArray = indexCalendarColoring(monthlyPending);\r\n                  if (yellowPendingArray)\r\n                    return {\r\n                      disabled: true,\r\n                      style: { color: \"#ffca00\" },\r\n                      onClick: () => alert(\"This Week Has Been Booked And Waiting For Tutor Approval\"),\r\n                    };\r\n\r\n                  // RED OVERDUE COLORS /////////////////////////////////////////////////\r\n                  const monthlyOverdue = monthIndexOverdue[currentMonth.index];\r\n                  const isRedOverdue = indexCalendarColoring(monthlyOverdue);\r\n                  if (isRedOverdue)\r\n                    return {\r\n                      disabled: true,\r\n                      style: { color: \"#fe3f24\" },\r\n                      onClick: () => alert(\"The Item is Overdue - Check with administration\"),\r\n                    };\r\n\r\n                  // FIRST WEEK //////////////////////////////////////  breakpoint\r\n                  let firstDateReservedOne = selectedDate[0]?.format();\r\n                  let firstDateReservedTwo = selectedDate[1]?.format();\r\n                  console.log(firstDateReservedOne);\r\n                  console.log(firstDateReservedTwo);\r\n\r\n                  if (firstBookSwitch === \"FirstBook\") {\r\n                    console.log(\"working\");\r\n                    const firstWeekChoiceRange = getDatesArray(firstWeekChoice);\r\n                    const firstWeekChoiceRangeArray = firstWeekChoiceRange.flat(2); //The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.  Array of Arrays to one array.  https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays\r\n                    const firstWeekChoiceArray = indexBooking(firstWeekChoiceRangeArray);\r\n                    console.log(firstWeekChoiceArray);\r\n                    const firstWeek = firstWeekChoiceArray[currentMonth.index];\r\n                    const isfirstWeek = indexCalendarColoring(firstWeek);\r\n                    if (isfirstWeek)\r\n                      return {\r\n                        disabled: true,\r\n                        style: { color: \"#67032f\" }, //\"#fe3f24\"\r\n                        onClick: () => alert(\"First Week Chosen, You Can Choose Another Week\"),\r\n                      };\r\n                  }\r\n\r\n                  if (secondBookSwitch === \"SecondBook\") {\r\n                    console.log(\"working\");\r\n                    const secondWeekChoiceRange = getDatesArray(secondWeekChoice);\r\n                    const secondWeekChoiceRangeArray = secondWeekChoiceRange.flat(2); //The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.  Array of Arrays to one array.  https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays\r\n                    const secondWeekChoiceArray = indexBooking(secondWeekChoiceRangeArray);\r\n                    console.log(secondWeekChoiceArray);\r\n                    const secondWeek = secondWeekChoiceArray[currentMonth.index];\r\n                    const issecondWeek = indexCalendarColoring(secondWeek);\r\n                    if (issecondWeek)\r\n                      return {\r\n                        disabled: true,\r\n                        style: { color: \"#67032f\" }, //\"#fe3f24\"\r\n                        onClick: () => alert(\"Second Week Chosen\"),\r\n                      };\r\n                  }\r\n\r\n                  return props;\r\n                }}\r\n              />\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>First Week Chosen -</td>\r\n            <td>\r\n              {firstWeekChoice?.map((date) => (\r\n                <li>\r\n                  {date[0]} to {date[1]}\r\n                </li>\r\n              ))}\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Second Week Chosen -</td>\r\n            <td>\r\n              {secondWeekChoice?.map((date, index) => (\r\n                <li>\r\n                  {date[0]} to {date[1]}\r\n                </li>\r\n              ))}\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Add The Above Week To Booking</td>\r\n            <td>\r\n              <Button variant={addWeek} onClick={addBookings}>\r\n                {bookingButton}\r\n              </Button>{\" \"}\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Confirm Booking</td>\r\n            <td>\r\n              <Button variant={confirmColor} onClick={confirmBookingsModal}>\r\n                {confirmationButton}\r\n              </Button>{\" \"}\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>Reset Booking</td>\r\n            <td>\r\n              <Button\r\n                variant=\"danger\r\n              \"\r\n                onClick={reset}\r\n              >\r\n                Reset Bookings\r\n              </Button>{\" \"}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Book;\r\n\r\n/*import React from \"react\";\r\n\r\nconst Book = () => {\r\n  return (\r\n    <div>\r\n      <h1>Booking Page</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Book;*/\r\n","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Login.js",[],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\Home.js",[],[],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\equipmentTable.js",["116","117","118","119"],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\equipmentModal.js",["120"],[],"C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\EquipmentTable.js",["121","122","123","124"],[],"import * as React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport EquipmentModal from \"./EquipmentModal\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport \"../styles.css\";\r\n\r\nfunction EquipmentTable() {\r\n  // function EquipmentTable(apiData) { //how to take data from another page\r\n  /* This will probably be from the main page\r\n    useEffect(() => {\r\n      setData(data);\r\n    }, []);\r\n\r\n    function fetchData(){\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${props.city}&appid=fa51d7d0a04b3ca2bff7a13a3863f53e&units=metric`)\r\n            .then((response) => response.json())\r\n            .then((data) => setData(data));};\r\n\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, []); \r\n    */\r\n  // apidata template data below ///////////////////////////\r\n\r\n  const data = [\r\n    {\r\n      item_id: 1,\r\n      name: \"Green Screen\",\r\n      description: \"Awesome projector\",\r\n      code: 1,\r\n      replacement_cost: 100.0,\r\n      \"purchase year\": 10101999,\r\n      status: 0,\r\n      location: \"Manakau Campus, Art Department\",\r\n      last_updated: 10 - 10 - 99,\r\n      rental_status: \"pending\",\r\n    },\r\n    {\r\n      item_id: 2,\r\n      name: \"Blue Screen\",\r\n      description: \"Alright projector\",\r\n      code: 2,\r\n      replacement_cost: 50.0,\r\n      \"purchase year\": 10102023,\r\n      status: 0,\r\n      location: \"Christchurch Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"pending\",\r\n    },\r\n    {\r\n      item_id: 3,\r\n      name: \"Yellow Camera\",\r\n      description: \"Camera\",\r\n      code: 3,\r\n      replacement_cost: 250.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Christchurch Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"booked\",\r\n    },\r\n    {\r\n      item_id: 4,\r\n      name: \"Red Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"avaliable\",\r\n    },\r\n    {\r\n      item_id: 5,\r\n      name: \"Purple Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"overdue\",\r\n    },\r\n    {\r\n      item_id: 6,\r\n      name: \"Multi-color Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 12102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Art Department\",\r\n      last_updated: 11101999,\r\n      rental_status: \"avaliable\",\r\n    },\r\n    {\r\n      item_id: 7,\r\n      name: \"Black Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 12102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Art Department\",\r\n      last_updated: 11101999,\r\n      rental_status: \"avaliable\",\r\n    },\r\n    {\r\n      item_id: 8,\r\n      name: \"Grey Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 12102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Art Department\",\r\n      last_updated: 11101999,\r\n      rental_status: \"pending\",\r\n    },\r\n  ];\r\n\r\n  //const apiData = { apiData: [data] };\r\n  const apiData = { apiData: data };\r\n  // console.log(\"first\");\r\n  // console.log(apiData);\r\n\r\n  // apidata template data above ///////////////////////////\r\n\r\n  //// equipmentTable code below ////////////////////\r\n  // original data from api fetch\r\n  const [dataSet, setData] = useState(apiData);\r\n  // data1 to populate table\r\n  const [data1, setData1] = useState(dataSet);\r\n\r\n  // variable for location\r\n  const [varLocation, setVarLocation] = useState(null);\r\n\r\n  // variable for booking status\r\n  const [varBooking, setVarBooking] = useState(null);\r\n\r\n  // variable for location search dropdown\r\n  const [dropdownLocation, setdropdownLocation] = useState(\"All Locations\");\r\n\r\n  // variable for status search dropdwon\r\n  const [dropdownBooking, setdropdownBooking] = useState(\"All Current Status\");\r\n\r\n  const [data2, setData2] = useState(apiData);\r\n\r\n  // INTIAL POPULATION BELOW //////////////////////////////////////////////////////////////////\r\n  //// code below to populate location dropdown ///////////////\r\n  // just grab locations into locationArray\r\n  const inilocationArray = data2.apiData.map(({ location }) => location);\r\n  // get rid of duplicates\r\n  const iniuniqueLocationArray = inilocationArray.filter((val, id, array) => array.indexOf(val) === id);\r\n  // alphabetically the array\r\n  iniuniqueLocationArray.sort((a, b) => a.localeCompare(b));\r\n  //newMenuItems.sort((a, b) => a.name.localeCompare(b.name));  // maybe have another array or variablbe, since console logs show that it continually repeating.\r\n  // variable for location dropdwon\r\n  const [varLocationDropdown, setVarLocationDropdown] = useState(iniuniqueLocationArray);\r\n  //\r\n  //// equipmentDropdownLocation code above ////////////////////\r\n\r\n  //// code below to populate status dropdown ///////////////\r\n  // just grab locations into statusArray\r\n  const inistatusArray = data2.apiData.map(({ rental_status }) => rental_status);\r\n  // get rid of duplicates\r\n  const iniuniqueStatusArray = inistatusArray.filter((val, id, array) => array.indexOf(val) === id);\r\n  // alphabetically the array\r\n  iniuniqueStatusArray.sort((a, b) => a.localeCompare(b));\r\n  // variable for status dropdown\r\n  const iniuniqueStatusArray3 = [];\r\n  iniuniqueStatusArray.map((datas) => {\r\n    if (datas === \"avaliable\") {\r\n      iniuniqueStatusArray3.avaliable = \"Free To Book\";\r\n    } else if (datas === \"booked\") {\r\n      iniuniqueStatusArray3.booked = \"Booked\";\r\n    } else if (datas === \"overdue\") {\r\n      iniuniqueStatusArray3.overdue = \"Overdue\";\r\n    } else if (datas === \"pending\") {\r\n      iniuniqueStatusArray3.pending = \"Approval Booking Pending\";\r\n    } else {\r\n      iniuniqueStatusArray3.CheckAdministration = \"Check Administration\";\r\n      console.log(\"Something as gone wrong with booking status of object\");\r\n    }\r\n  });\r\n  const [varStatusDropdown, setVarStatusDropdown] = useState(iniuniqueStatusArray3);\r\n  //newMenuItems.sort((a, b) => a.name.localeCompare(b.name));  // maybe have another array or variablbe, since console logs show that it continually repeating.\r\n  //// equipmentDropdownStatus code above ///////////////////////////////////////////////////////\r\n\r\n  //reset everything function /////////////////\r\n  function buttonReset() {\r\n    setData1(dataSet);\r\n    setVarLocation(null);\r\n    setVarBooking(null);\r\n    setdropdownLocation(\"All Locations\");\r\n    setdropdownBooking(\"All Current Status\");\r\n    repopulateDropdowns(\"reset\");\r\n    //handleShowStatus();  // test this\r\n  }\r\n  //// equipmentTable code above ////////////////////\r\n\r\n  function repopulateDropdowns(incomingData) {\r\n    // INTIAL POPULATION BELOW ///////////////////////////////////////////\r\n    const result = { apiData: [] };\r\n    if (incomingData === \"reset\") {\r\n      setVarStatusDropdown(iniuniqueStatusArray3);\r\n      setVarLocationDropdown(iniuniqueLocationArray);\r\n    } else if (incomingData.location) {\r\n      //handleCloseLocation();    // disable dropdown\r\n      dataSet.apiData.forEach(function (item, index) {\r\n        // use original data not data1, data1 information is delayed\r\n        if (item.location === incomingData.location) {\r\n          // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n          result.apiData.push(item);\r\n        }\r\n      });\r\n      // just grab status into statusArray\r\n      const statusArray = result.apiData.map(({ rental_status }) => rental_status);\r\n      // get rid of duplicates\r\n      const uniqueStatusArray = statusArray.filter((val, id, array) => array.indexOf(val) === id);\r\n      // alphabetically the array\r\n      uniqueStatusArray.sort((a, b) => a.localeCompare(b));\r\n      const uniqueStatusArray3 = [];\r\n      uniqueStatusArray.map((datas) => {\r\n        if (datas === \"avaliable\") {\r\n          uniqueStatusArray3.avaliable = \"Free To Book\";\r\n        } else if (datas === \"booked\") {\r\n          uniqueStatusArray3.booked = \"Booked\";\r\n        } else if (datas === \"overdue\") {\r\n          uniqueStatusArray3.overdue = \"Overdue\";\r\n        } else if (datas === \"pending\") {\r\n          uniqueStatusArray3.pending = \"Approval Booking Pending\";\r\n        } else {\r\n          uniqueStatusArray3.CheckAdministration = \"Check Administration\";\r\n          console.log(\"Something as gone wrong with booking status of object\");\r\n        }\r\n      });\r\n      setVarStatusDropdown(uniqueStatusArray3);\r\n    } else {\r\n      console.log(\"Got To End Of repopulate dropdowns\");\r\n    }\r\n  }\r\n\r\n  function repopulate(incomingData) {\r\n    console.log(\"repopulate\");\r\n    const result = { apiData: [] };\r\n    //// location below //////////////////////////////////////////////////////////////////\r\n    if (incomingData.location) {\r\n      console.log(\"---LOCATION---\");\r\n      setVarLocation(incomingData.location); // CHECK THIS\r\n      setdropdownBooking(\"Current Location Status Options\");\r\n      if (incomingData.location === null && varBooking === null) {\r\n        setData1(dataSet);\r\n      } else if (varBooking === null) {\r\n        console.log(\"working\");\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item); // having the apiData,, wird object array combo\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (varLocation === null) {\r\n        // this for when the location is reset but still need status information\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (incomingData.location !== null && varBooking !== null) {\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else {\r\n        setData1(dataSet);\r\n        //mabye have a modal pop up, saying found nothing\r\n      }\r\n\r\n      //// status below //////////////////////////////////////////////////////////////////\r\n    } else if (incomingData.status) {\r\n      console.log(\"---STATUS---\");\r\n      setVarBooking(incomingData.status);\r\n      //setVarBooking(\"Current Location Booking Status\");\r\n      if (incomingData.status === null && varLocation === null) {\r\n        setData1(dataSet);\r\n      } else if (varLocation === null) {\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.rental_status === incomingData.status) {\r\n            // DO NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item); // having the apiData,, wird object array combo\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (varLocation !== null && incomingData.status !== null) {\r\n        console.log(\"working\");\r\n        console.log(incomingData.status);\r\n        console.log(varLocation);\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === varLocation && item.rental_status === incomingData.status) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        console.log(result);\r\n        setData1(result);\r\n      } else {\r\n        setData1(dataSet);\r\n        console.log(\"working\");\r\n        //mabye have a modal pop up, saying found nothing\r\n      }\r\n    } else {\r\n      console.log(\"something has gone wrong - repopulate function\");\r\n      console.log(dataSet);\r\n    }\r\n    repopulateDropdowns(incomingData);\r\n  }\r\n\r\n  const width_proportion = \"80%\";\r\n  const marginStuff = \"auto\";\r\n  const whiteColor = \"#ffffff\";\r\n  const radiusVar = \"6px\";\r\n  const styles = {\r\n    box: {\r\n      margin: marginStuff,\r\n      width: width_proportion,\r\n    },\r\n    title: {\r\n      color: whiteColor,\r\n    },\r\n    radius: radiusVar,\r\n  };\r\n\r\n  return (\r\n    <div style={styles.box}>\r\n      <h1 style={styles.title}>Equipment Available</h1>\r\n      <br></br>\r\n      <div className=\"columnLeft\">\r\n        <DropdownButton variant=\"success\" id=\"dropdown-basic-button\" title={dropdownLocation}>\r\n          {varLocationDropdown.map((datas) => {\r\n            return (\r\n              <Dropdown.Item\r\n                key={\"arbitary1\" + datas}\r\n                onClick={() => {\r\n                  repopulate({ location: datas });\r\n                  setdropdownLocation(datas);\r\n                }}\r\n                value={datas}\r\n              >\r\n                {datas}\r\n              </Dropdown.Item>\r\n            );\r\n          })}\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item onClick={() => buttonReset()}>Reset</Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div className=\"columnLeft\">&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n      <div className=\"columnLeft\">\r\n        <DropdownButton variant=\"success\" id=\"dropdown-basic-button\" title={dropdownBooking}>\r\n          {Object.entries(varStatusDropdown).map(([key, value]) => {\r\n            return (\r\n              <Dropdown.Item\r\n                key={\"arbitary2\" + value}\r\n                onClick={() => {\r\n                  repopulate({ status: key });\r\n                  setdropdownBooking(\"Current Location Status Options\");\r\n                }}\r\n                value={key}\r\n              >\r\n                {value}\r\n              </Dropdown.Item>\r\n            );\r\n          })}\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item onClick={() => buttonReset()}>Reset</Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div className=\"columnLeft\">&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n      <Button variant=\"success\" onClick={() => buttonReset()}>\r\n        Reset Search\r\n      </Button>\r\n\r\n      <br></br>\r\n      <br></br>\r\n      <Table\r\n        bordered\r\n        hover\r\n        style={{\r\n          borderCollapse: \"collapsed\",\r\n          borderRadius: \"10px\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>#</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Item</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Location</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Current Status/To Book</b>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data1.apiData?.map((datas) => {\r\n            return (\r\n              <tr key={\"arbitary3\" + datas.item_id}>\r\n                <td>{datas.item_id}</td>\r\n                <td>{datas.name}</td>\r\n                <td>{datas.location}</td>\r\n                <td>\r\n                  <EquipmentModal data1={datas}></EquipmentModal>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n          </tr>\r\n        </tfoot>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EquipmentTable;\r\n","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\EquipmentModal.js",["125"],[],"import { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nfunction EquipmentModal({ data1 }) {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const spareArray = [];\r\n  const colorArray = [];\r\n  const loanStatus = [];\r\n\r\n  if (data1.rental_status === \"avaliable\") {\r\n    //console.log(\"FIRST-\" + data1.rental_status);\r\n    //spareArray.push(\"Free To Book ------\");\r\n    spareArray.push(\"Free To Book ----- Click Here To Book Now\");\r\n    colorArray.push(\"success\");\r\n    loanStatus.push(\"Free To Book\");\r\n    //(\"Free To Book\");\r\n    //console.log(spareArray);\r\n  } else if (data1.rental_status === \"booked\") {\r\n    //console.log(\"SECOND-\" + data1.rental_status);\r\n    //spareArray.push(\"Currently Booked -\");\r\n    spareArray.push(\"Currently Booked -- Click Here To Reserve\");\r\n    colorArray.push(\"primary\");\r\n    loanStatus.push(\"Currently Booked - Reserve Avaliable\");\r\n    //(\"Booked\");\r\n  } else if (data1.rental_status === \"pending\") {\r\n    //console.log(\"THIRD-\" + data1.rental_status);\r\n    //spareArray.push(\"Booking Pending -\");\r\n    spareArray.push(\"Approval Pending -- Click Here To Reserve\");\r\n    colorArray.push(\"warning\");\r\n    loanStatus.push(\"Approval Pending - Reserve Avaliable\");\r\n    //(\"Pending Booking\");\r\n  } else if (data1.rental_status === \"overdue\") {\r\n    //console.log(\"THIRD-\" + data1.rental_status);\r\n    spareArray.push(\"Item Overdue ------ Click Here To Reserve\");\r\n    colorArray.push(\"danger\");\r\n    loanStatus.push(\"Item Overdue - Reserve Avaliable\");\r\n    //(\"Pending Booking\");\r\n  } else {\r\n    //(\"Check With Administration\");\r\n    console.log(\"something has gone wrong/Modal\");\r\n    spareArray.push(\"--------- Contact Adminstration ---------\");\r\n    colorArray.push(\"dark\");\r\n    loanStatus.push(\"- Contact Adminstration -\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button variant={colorArray[0]} onClick={handleShow}>\r\n        {spareArray[0]}\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title style={{ color: \"#000000\" }}>Equipment Details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p style={{ color: \"#000000\" }}>\r\n            <b>Name: </b>\r\n            {data1.name}\r\n          </p>\r\n          <p style={{ color: \"#000000\" }}>\r\n            <b>Description: </b> {data1.description}\r\n          </p>\r\n          <p style={{ color: \"#000000\" }}>\r\n            <b>Location: </b> {data1.location}\r\n          </p>\r\n          <p style={{ color: \"#000000\" }}>\r\n            <b>Loan Status: </b> {loanStatus[0]}\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Book This Item\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EquipmentModal;\r\n","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\TeacherDashBoard.js",["126","127","128","129","130"],[],"import React, { useContext } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport EquipmentModal from \"./EquipmentModal\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport \"../styles.css\";\r\nimport { UserContext } from \"../App\";\r\nfunction EquipmentTable() {\r\n  const user = useContext(UserContext);\r\n  // function EquipmentTable(apiData) { //how to take data from another page\r\n  /* This will probably be from the main page\r\n    useEffect(() => {\r\n      setData(data);\r\n    }, []);\r\n\r\n    function fetchData(){\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${props.city}&appid=fa51d7d0a04b3ca2bff7a13a3863f53e&units=metric`)\r\n            .then((response) => response.json())\r\n            .then((data) => setData(data));};\r\n\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, []); \r\n    */\r\n  // apidata template data below ///////////////////////////\r\n\r\n  const data = [\r\n    {\r\n      item_id: 2,\r\n      name: \"Blue Screen\",\r\n      description: \"Alright projector\",\r\n      code: 2,\r\n      replacement_cost: 50.0,\r\n      \"purchase year\": 10102023,\r\n      status: 0,\r\n      location: \"Christchurch Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"pending\",\r\n    },\r\n    {\r\n      item_id: 3,\r\n      name: \"Yellow Camera\",\r\n      description: \"Camera\",\r\n      code: 3,\r\n      replacement_cost: 250.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Christchurch Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"booked\",\r\n    },\r\n    {\r\n      item_id: 4,\r\n      name: \"Red Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"avaliable\",\r\n    },\r\n    {\r\n      item_id: 5,\r\n      name: \"Purple Camera\",\r\n      description: \"Camera\",\r\n      code: 4,\r\n      replacement_cost: 350.0,\r\n      \"purchase year\": 11102023,\r\n      status: 0,\r\n      location: \"Manakau Campus, Media Department\",\r\n      last_updated: 10101999,\r\n      rental_status: \"overdue\",\r\n    },\r\n  ];\r\n\r\n  //const apiData = { apiData: [data] };\r\n  const apiData = { apiData: data };\r\n  // console.log(\"first\");\r\n  // console.log(apiData);\r\n\r\n  // apidata template data above ///////////////////////////\r\n\r\n  //// equipmentTable code below ////////////////////\r\n  // original data from api fetch\r\n  const [dataSet, setData] = useState(apiData);\r\n  // data1 to populate table\r\n  const [data1, setData1] = useState(dataSet);\r\n\r\n  // variable for location\r\n  const [varLocation, setVarLocation] = useState(null);\r\n\r\n  // variable for booking status\r\n  const [varBooking, setVarBooking] = useState(null);\r\n\r\n  // variable for location search dropdown\r\n  const [dropdownLocation, setdropdownLocation] = useState(\"All Locations\");\r\n\r\n  // variable for status search dropdwon\r\n  const [dropdownBooking, setdropdownBooking] = useState(\"All Current Status\");\r\n\r\n  const [data2, setData2] = useState(apiData);\r\n\r\n  // INTIAL POPULATION BELOW //////////////////////////////////////////////////////////////////\r\n  //// code below to populate location dropdown ///////////////\r\n  // just grab locations into locationArray\r\n  const inilocationArray = data2.apiData.map(({ location }) => location);\r\n  // get rid of duplicates\r\n  const iniuniqueLocationArray = inilocationArray.filter((val, id, array) => array.indexOf(val) === id);\r\n  // alphabetically the array\r\n  iniuniqueLocationArray.sort((a, b) => a.localeCompare(b));\r\n  //newMenuItems.sort((a, b) => a.name.localeCompare(b.name));  // maybe have another array or variablbe, since console logs show that it continually repeating.\r\n  // variable for location dropdwon\r\n  const [varLocationDropdown, setVarLocationDropdown] = useState(iniuniqueLocationArray);\r\n  //\r\n  //// equipmentDropdownLocation code above ////////////////////\r\n\r\n  //// code below to populate status dropdown ///////////////\r\n  // just grab locations into statusArray\r\n  const inistatusArray = data2.apiData.map(({ rental_status }) => rental_status);\r\n  // get rid of duplicates\r\n  const iniuniqueStatusArray = inistatusArray.filter((val, id, array) => array.indexOf(val) === id);\r\n  // alphabetically the array\r\n  iniuniqueStatusArray.sort((a, b) => a.localeCompare(b));\r\n  // variable for status dropdown\r\n  const iniuniqueStatusArray3 = [];\r\n  iniuniqueStatusArray.map((datas) => {\r\n    if (datas === \"avaliable\") {\r\n      iniuniqueStatusArray3.avaliable = \"Free To Book\";\r\n    } else if (datas === \"booked\") {\r\n      iniuniqueStatusArray3.booked = \"Booked\";\r\n    } else if (datas === \"overdue\") {\r\n      iniuniqueStatusArray3.overdue = \"Overdue\";\r\n    } else if (datas === \"pending\") {\r\n      iniuniqueStatusArray3.pending = \"Approval Booking Pending\";\r\n    } else {\r\n      iniuniqueStatusArray3.CheckAdministration = \"Check Administration\";\r\n      console.log(\"Something as gone wrong with booking status of object\");\r\n    }\r\n  });\r\n  const [varStatusDropdown, setVarStatusDropdown] = useState(iniuniqueStatusArray3);\r\n  //newMenuItems.sort((a, b) => a.name.localeCompare(b.name));  // maybe have another array or variablbe, since console logs show that it continually repeating.\r\n  //// equipmentDropdownStatus code above ///////////////////////////////////////////////////////\r\n\r\n  //reset everything function /////////////////\r\n  function buttonReset() {\r\n    setData1(dataSet);\r\n    setVarLocation(null);\r\n    setVarBooking(null);\r\n    setdropdownLocation(\"All Locations\");\r\n    setdropdownBooking(\"All Current Status\");\r\n    repopulateDropdowns(\"reset\");\r\n    //handleShowStatus();  // test this\r\n  }\r\n  //// equipmentTable code above ////////////////////\r\n\r\n  function repopulateDropdowns(incomingData) {\r\n    // INTIAL POPULATION BELOW ///////////////////////////////////////////\r\n    const result = { apiData: [] };\r\n    if (incomingData === \"reset\") {\r\n      setVarStatusDropdown(iniuniqueStatusArray3);\r\n      setVarLocationDropdown(iniuniqueLocationArray);\r\n    } else if (incomingData.location) {\r\n      //handleCloseLocation();    // disable dropdown\r\n      dataSet.apiData.forEach(function (item, index) {\r\n        // use original data not data1, data1 information is delayed\r\n        if (item.location === incomingData.location) {\r\n          // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n          result.apiData.push(item);\r\n        }\r\n      });\r\n      // just grab status into statusArray\r\n      const statusArray = result.apiData.map(({ rental_status }) => rental_status);\r\n      // get rid of duplicates\r\n      const uniqueStatusArray = statusArray.filter((val, id, array) => array.indexOf(val) === id);\r\n      // alphabetically the array\r\n      uniqueStatusArray.sort((a, b) => a.localeCompare(b));\r\n      const uniqueStatusArray3 = [];\r\n      uniqueStatusArray.map((datas) => {\r\n        if (datas === \"avaliable\") {\r\n          uniqueStatusArray3.avaliable = \"Free To Book\";\r\n        } else if (datas === \"booked\") {\r\n          uniqueStatusArray3.booked = \"Booked\";\r\n        } else if (datas === \"overdue\") {\r\n          uniqueStatusArray3.overdue = \"Overdue\";\r\n        } else if (datas === \"pending\") {\r\n          uniqueStatusArray3.pending = \"Approval Booking Pending\";\r\n        } else {\r\n          uniqueStatusArray3.CheckAdministration = \"Check Administration\";\r\n          console.log(\"Something as gone wrong with booking status of object\");\r\n        }\r\n      });\r\n      setVarStatusDropdown(uniqueStatusArray3);\r\n    } else {\r\n      console.log(\"Got To End Of repopulate dropdowns\");\r\n    }\r\n  }\r\n\r\n  function repopulate(incomingData) {\r\n    console.log(\"repopulate\");\r\n    const result = { apiData: [] };\r\n    //// location below //////////////////////////////////////////////////////////////////\r\n    if (incomingData.location) {\r\n      console.log(\"---LOCATION---\");\r\n      setVarLocation(incomingData.location); // CHECK THIS\r\n      setdropdownBooking(\"Current Location Status Options\");\r\n      if (incomingData.location === null && varBooking === null) {\r\n        setData1(dataSet);\r\n      } else if (varBooking === null) {\r\n        console.log(\"working\");\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item); // having the apiData,, wird object array combo\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (varLocation === null) {\r\n        // this for when the location is reset but still need status information\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (incomingData.location !== null && varBooking !== null) {\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === incomingData.location) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else {\r\n        setData1(dataSet);\r\n        //mabye have a modal pop up, saying found nothing\r\n      }\r\n\r\n      //// status below //////////////////////////////////////////////////////////////////\r\n    } else if (incomingData.status) {\r\n      console.log(\"---STATUS---\");\r\n      setVarBooking(incomingData.status);\r\n      //setVarBooking(\"Current Location Booking Status\");\r\n      if (incomingData.status === null && varLocation === null) {\r\n        setData1(dataSet);\r\n      } else if (varLocation === null) {\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.rental_status === incomingData.status) {\r\n            // DO NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item); // having the apiData,, wird object array combo\r\n          }\r\n        });\r\n        setData1(result);\r\n      } else if (varLocation !== null && incomingData.status !== null) {\r\n        console.log(\"working\");\r\n        console.log(incomingData.status);\r\n        console.log(varLocation);\r\n        dataSet.apiData.forEach(function (item, index) {\r\n          if (item.location === varLocation && item.rental_status === incomingData.status) {\r\n            // DONt NOT USE - if (item.location === varLocation){ - IT DELAYS IT, setstate performed after function\r\n            result.apiData.push(item);\r\n          }\r\n        });\r\n        console.log(result);\r\n        setData1(result);\r\n      } else {\r\n        setData1(dataSet);\r\n        console.log(\"working\");\r\n        //mabye have a modal pop up, saying found nothing\r\n      }\r\n    } else {\r\n      console.log(\"something has gone wrong - repopulate function\");\r\n      console.log(dataSet);\r\n    }\r\n    repopulateDropdowns(incomingData);\r\n  }\r\n\r\n  const width_proportion = \"80%\";\r\n  const marginStuff = \"auto\";\r\n  const whiteColor = \"#ffffff\";\r\n  const radiusVar = \"6px\";\r\n  const styles = {\r\n    box: {\r\n      margin: marginStuff,\r\n      width: width_proportion,\r\n    },\r\n    title: {\r\n      color: whiteColor,\r\n    },\r\n    radius: radiusVar,\r\n  };\r\n\r\n  return (\r\n    <div style={styles.box}>\r\n      <h1 style={styles.title}>Teacher Dashboard</h1>\r\n      <br></br>\r\n      <div className=\"columnLeft\">\r\n        <DropdownButton variant=\"success\" id=\"dropdown-basic-button\" title={dropdownLocation}>\r\n          {varLocationDropdown.map((datas) => {\r\n            return (\r\n              <Dropdown.Item\r\n                key={\"arbitary1\" + datas}\r\n                onClick={() => {\r\n                  repopulate({ location: datas });\r\n                  setdropdownLocation(datas);\r\n                }}\r\n                value={datas}\r\n              >\r\n                {datas}\r\n              </Dropdown.Item>\r\n            );\r\n          })}\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item onClick={() => buttonReset()}>Reset</Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div className=\"columnLeft\">&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n      <div className=\"columnLeft\">\r\n        <DropdownButton variant=\"success\" id=\"dropdown-basic-button\" title={dropdownBooking}>\r\n          {Object.entries(varStatusDropdown).map(([key, value]) => {\r\n            return (\r\n              <Dropdown.Item\r\n                key={\"arbitary2\" + value}\r\n                onClick={() => {\r\n                  repopulate({ status: key });\r\n                  setdropdownBooking(\"Current Location Status Options\");\r\n                }}\r\n                value={key}\r\n              >\r\n                {value}\r\n              </Dropdown.Item>\r\n            );\r\n          })}\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item onClick={() => buttonReset()}>Reset</Dropdown.Item>\r\n        </DropdownButton>\r\n      </div>\r\n      <div className=\"columnLeft\">&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n      <Button variant=\"success\" onClick={() => buttonReset()}>\r\n        Reset Search\r\n      </Button>\r\n\r\n      <br></br>\r\n      <br></br>\r\n      <Table\r\n        bordered\r\n        hover\r\n        style={{\r\n          borderCollapse: \"collapsed\",\r\n          borderRadius: \"10px\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>#</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Item</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Location</b>\r\n            </th>\r\n            <th style={{ backgroundColor: \"#212529\", color: \"#ffffff\" }}>\r\n              <b>Current Status</b>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data1.apiData?.map((datas) => {\r\n            return (\r\n              <tr key={\"arbitary3\" + datas.item_id}>\r\n                <td>{datas.item_id}</td>\r\n                <td>{datas.name}</td>\r\n                <td>{datas.location}</td>\r\n                <td>\r\n                  <EquipmentModal data1={datas}></EquipmentModal>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n          </tr>\r\n        </tfoot>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EquipmentTable;\r\n","C:\\Users\\64212\\WhitecliffeRentalSystem\\client\\src\\components\\BookingForTeacher.js",["131","132","133","134","135","136","137","138"],[],{"ruleId":"139","severity":1,"message":"140","line":9,"column":8,"nodeType":"141","messageId":"142","endLine":9,"endColumn":24},{"ruleId":"139","severity":1,"message":"143","line":14,"column":27,"nodeType":"141","messageId":"142","endLine":14,"endColumn":33},{"ruleId":"139","severity":1,"message":"144","line":2,"column":21,"nodeType":"141","messageId":"142","endLine":2,"endColumn":24},{"ruleId":"139","severity":1,"message":"145","line":2,"column":26,"nodeType":"141","messageId":"142","endLine":2,"endColumn":29},{"ruleId":"139","severity":1,"message":"146","line":101,"column":19,"nodeType":"141","messageId":"142","endLine":101,"endColumn":26},{"ruleId":"139","severity":1,"message":"147","line":117,"column":17,"nodeType":"141","messageId":"142","endLine":117,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":142,"column":36,"nodeType":"150","messageId":"151","endLine":142,"endColumn":38},{"ruleId":"148","severity":1,"message":"149","line":194,"column":37,"nodeType":"150","messageId":"151","endLine":194,"endColumn":39},{"ruleId":"139","severity":1,"message":"143","line":6,"column":27,"nodeType":"141","messageId":"142","endLine":6,"endColumn":33},{"ruleId":"139","severity":1,"message":"152","line":4,"column":20,"nodeType":"141","messageId":"142","endLine":4,"endColumn":29},{"ruleId":"139","severity":1,"message":"153","line":110,"column":11,"nodeType":"141","messageId":"142","endLine":110,"endColumn":16},{"ruleId":"139","severity":1,"message":"154","line":164,"column":10,"nodeType":"141","messageId":"142","endLine":164,"endColumn":21},{"ruleId":"139","severity":1,"message":"146","line":164,"column":23,"nodeType":"141","messageId":"142","endLine":164,"endColumn":30},{"ruleId":"139","severity":1,"message":"155","line":165,"column":17,"nodeType":"141","messageId":"142","endLine":165,"endColumn":25},{"ruleId":"139","severity":1,"message":"156","line":168,"column":10,"nodeType":"141","messageId":"142","endLine":168,"endColumn":18},{"ruleId":"139","severity":1,"message":"157","line":180,"column":10,"nodeType":"141","messageId":"142","endLine":180,"endColumn":34},{"ruleId":"139","severity":1,"message":"158","line":181,"column":10,"nodeType":"141","messageId":"142","endLine":181,"endColumn":35},{"ruleId":"139","severity":1,"message":"159","line":185,"column":10,"nodeType":"141","messageId":"142","endLine":185,"endColumn":35},{"ruleId":"139","severity":1,"message":"160","line":186,"column":10,"nodeType":"141","messageId":"142","endLine":186,"endColumn":36},{"ruleId":"139","severity":1,"message":"161","line":190,"column":10,"nodeType":"141","messageId":"142","endLine":190,"endColumn":21},{"ruleId":"139","severity":1,"message":"162","line":190,"column":23,"nodeType":"141","messageId":"142","endLine":190,"endColumn":37},{"ruleId":"139","severity":1,"message":"146","line":141,"column":21,"nodeType":"141","messageId":"142","endLine":141,"endColumn":28},{"ruleId":"139","severity":1,"message":"147","line":157,"column":19,"nodeType":"141","messageId":"142","endLine":157,"endColumn":27},{"ruleId":"148","severity":1,"message":"149","line":184,"column":36,"nodeType":"150","messageId":"151","endLine":184,"endColumn":38},{"ruleId":"148","severity":1,"message":"149","line":237,"column":35,"nodeType":"150","messageId":"151","endLine":237,"endColumn":37},{"ruleId":"139","severity":1,"message":"152","line":1,"column":20,"nodeType":"141","messageId":"142","endLine":1,"endColumn":29},{"ruleId":"139","severity":1,"message":"146","line":136,"column":19,"nodeType":"141","messageId":"142","endLine":136,"endColumn":26},{"ruleId":"139","severity":1,"message":"147","line":152,"column":17,"nodeType":"141","messageId":"142","endLine":152,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":177,"column":36,"nodeType":"150","messageId":"151","endLine":177,"endColumn":38},{"ruleId":"148","severity":1,"message":"149","line":229,"column":37,"nodeType":"150","messageId":"151","endLine":229,"endColumn":39},{"ruleId":"139","severity":1,"message":"152","line":1,"column":20,"nodeType":"141","messageId":"142","endLine":1,"endColumn":29},{"ruleId":"139","severity":1,"message":"163","line":11,"column":9,"nodeType":"141","messageId":"142","endLine":11,"endColumn":13},{"ruleId":"139","severity":1,"message":"146","line":89,"column":19,"nodeType":"141","messageId":"142","endLine":89,"endColumn":26},{"ruleId":"139","severity":1,"message":"147","line":105,"column":17,"nodeType":"141","messageId":"142","endLine":105,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":130,"column":36,"nodeType":"150","messageId":"151","endLine":130,"endColumn":38},{"ruleId":"148","severity":1,"message":"149","line":182,"column":37,"nodeType":"150","messageId":"151","endLine":182,"endColumn":39},{"ruleId":"139","severity":1,"message":"152","line":4,"column":20,"nodeType":"141","messageId":"142","endLine":4,"endColumn":29},{"ruleId":"139","severity":1,"message":"153","line":110,"column":11,"nodeType":"141","messageId":"142","endLine":110,"endColumn":16},{"ruleId":"139","severity":1,"message":"154","line":164,"column":10,"nodeType":"141","messageId":"142","endLine":164,"endColumn":21},{"ruleId":"139","severity":1,"message":"146","line":164,"column":23,"nodeType":"141","messageId":"142","endLine":164,"endColumn":30},{"ruleId":"139","severity":1,"message":"155","line":165,"column":17,"nodeType":"141","messageId":"142","endLine":165,"endColumn":25},{"ruleId":"139","severity":1,"message":"156","line":168,"column":10,"nodeType":"141","messageId":"142","endLine":168,"endColumn":18},{"ruleId":"139","severity":1,"message":"164","line":174,"column":24,"nodeType":"141","messageId":"142","endLine":174,"endColumn":39},{"ruleId":"139","severity":1,"message":"165","line":175,"column":30,"nodeType":"141","messageId":"142","endLine":175,"endColumn":51},"no-unused-vars","'TeacherDashBoard' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'setData' is assigned a value but never used.","'setData2' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'year1' is assigned a value but never used.","'dataStudent' is assigned a value but never used.","'setValue' is assigned a value but never used.","'allDates' is assigned a value but never used.","'firstWeekChoiceFirstDate' is assigned a value but never used.","'firstWeekChoiceSecondDate' is assigned a value but never used.","'secondWeekChoiceFirstDate' is assigned a value but never used.","'secondWeekChoiceSecondDate' is assigned a value but never used.","'getThatDate' is assigned a value but never used.","'setGetThatDate' is assigned a value but never used.","'user' is assigned a value but never used.","'setAddingButton' is assigned a value but never used.","'setconfirmationButton' is assigned a value but never used."]